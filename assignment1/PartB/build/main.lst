
build/main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000034b4  08000000  0c000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 Stack         00000800  10000000  10000000  00030000  2**0
                  ALLOC
  2 .ram_code     00000000  10000800  10000800  00020430  2**0
                  CONTENTS
  3 PSRAM_DATA    00000000  10000800  10000800  00020430  2**0
                  CONTENTS
  4 PSRAM_BSS     00000000  10000800  10000800  00020430  2**0
                  CONTENTS
  5 .data         00000430  20000000  0c0034b4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000018  20000430  0c0038e4  00020430  2**2
                  ALLOC
  7 .no_init      00000014  2000ffc0  2000ffc0  0002ffc0  2**2
                  ALLOC
  8 DSRAM2_DATA   00000000  30000000  30000000  00020430  2**0
                  CONTENTS
  9 DSRAM2_BSS    00000000  30000000  30000000  00020430  2**0
                  CONTENTS
 10 .debug_aranges 000001a8  00000000  00000000  00020430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_info   0000237b  00000000  00000000  000205d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 000008c5  00000000  00000000  00022953  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line   000020de  00000000  00000000  00023218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_frame  00000b7c  00000000  00000000  000252f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00076434  00000000  00000000  00025e74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_loc    00000b68  00000000  00000000  0009c2a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00000148  00000000  00000000  0009ce10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .build_attributes 000004a2  00000000  00000000  0009cf58  2**0
                  CONTENTS, READONLY
 19 .debug_macro  00018d8f  00000000  00000000  0009d3fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000000 <__Vectors>:
 8000000:	00 08 00 10 01 02 00 08 b1 02 00 08 b1 02 00 08     ................
 8000010:	b1 02 00 08 b1 02 00 08 b1 02 00 08 00 00 00 00     ................
	...
 800002c:	b1 02 00 08 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 800003c:	6d 04 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     m...............
 800004c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800005c:	b1 02 00 08 b1 02 00 08 00 00 00 00 00 00 00 00     ................
 800006c:	00 00 00 00 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 800007c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800008c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800009c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000ac:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000bc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000cc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000dc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000ec:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000fc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800010c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800011c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800012c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800013c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800014c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800015c:	b1 02 00 08 00 00 00 00 00 00 00 00 00 00 00 00     ................
 800016c:	00 00 00 00 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800017c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800018c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800019c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001ac:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001bc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001cc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001dc:	00 00 00 00 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001ec:	b1 02 00 08 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 80001fc:	00 00 00 00                                         ....

08000200 <Reset_Handler>:
 8000200:	f8df d08c 	ldr.w	sp, [pc, #140]	; 8000290 <__zero_table_end__>
 8000204:	4823      	ldr	r0, [pc, #140]	; (8000294 <__zero_table_end__+0x4>)
 8000206:	4780      	blx	r0
 8000208:	4c23      	ldr	r4, [pc, #140]	; (8000298 <__zero_table_end__+0x8>)
 800020a:	4d24      	ldr	r5, [pc, #144]	; (800029c <__zero_table_end__+0xc>)
 800020c:	42ac      	cmp	r4, r5
 800020e:	da09      	bge.n	8000224 <Reset_Handler+0x24>
 8000210:	6821      	ldr	r1, [r4, #0]
 8000212:	6862      	ldr	r2, [r4, #4]
 8000214:	68a3      	ldr	r3, [r4, #8]
 8000216:	3b04      	subs	r3, #4
 8000218:	bfa2      	ittt	ge
 800021a:	58c8      	ldrge	r0, [r1, r3]
 800021c:	50d0      	strge	r0, [r2, r3]
 800021e:	e7fa      	bge.n	8000216 <Reset_Handler+0x16>
 8000220:	340c      	adds	r4, #12
 8000222:	e7f3      	b.n	800020c <Reset_Handler+0xc>
 8000224:	4b1e      	ldr	r3, [pc, #120]	; (80002a0 <__zero_table_end__+0x10>)
 8000226:	4c1f      	ldr	r4, [pc, #124]	; (80002a4 <__zero_table_end__+0x14>)
 8000228:	42a3      	cmp	r3, r4
 800022a:	da08      	bge.n	800023e <Reset_Handler+0x3e>
 800022c:	6819      	ldr	r1, [r3, #0]
 800022e:	685a      	ldr	r2, [r3, #4]
 8000230:	2000      	movs	r0, #0
 8000232:	3a04      	subs	r2, #4
 8000234:	bfa4      	itt	ge
 8000236:	5088      	strge	r0, [r1, r2]
 8000238:	e7fb      	bge.n	8000232 <Reset_Handler+0x32>
 800023a:	3308      	adds	r3, #8
 800023c:	e7f4      	b.n	8000228 <Reset_Handler+0x28>
 800023e:	481a      	ldr	r0, [pc, #104]	; (80002a8 <__zero_table_end__+0x18>)
 8000240:	4780      	blx	r0
 8000242:	481a      	ldr	r0, [pc, #104]	; (80002ac <__zero_table_end__+0x1c>)
 8000244:	4780      	blx	r0
	...

08000248 <__copy_table_start__>:
 8000248:	0c0034b4 	.word	0x0c0034b4
 800024c:	20000000 	.word	0x20000000
 8000250:	00000430 	.word	0x00000430
 8000254:	0c0038e4 	.word	0x0c0038e4
 8000258:	30000000 	.word	0x30000000
 800025c:	00000000 	.word	0x00000000
 8000260:	0c0034b4 	.word	0x0c0034b4
 8000264:	10000800 	.word	0x10000800
 8000268:	00000000 	.word	0x00000000
 800026c:	0c0034b4 	.word	0x0c0034b4
 8000270:	10000800 	.word	0x10000800
 8000274:	00000000 	.word	0x00000000

08000278 <__copy_table_end__>:
 8000278:	20000430 	.word	0x20000430
 800027c:	00000018 	.word	0x00000018
 8000280:	30000000 	.word	0x30000000
 8000284:	00000000 	.word	0x00000000
 8000288:	10000800 	.word	0x10000800
 800028c:	00000000 	.word	0x00000000

08000290 <__zero_table_end__>:
 8000290:	10000800 	.word	0x10000800
 8000294:	08000f59 	.word	0x08000f59
 8000298:	08000248 	.word	0x08000248
 800029c:	08000278 	.word	0x08000278
 80002a0:	08000278 	.word	0x08000278
 80002a4:	08000290 	.word	0x08000290
 80002a8:	08003441 	.word	0x08003441
 80002ac:	080003b9 	.word	0x080003b9

080002b0 <BusFault_Handler>:
 80002b0:	e7fe      	b.n	80002b0 <BusFault_Handler>
	...

080002b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002b4:	b480      	push	{r7}
 80002b6:	b083      	sub	sp, #12
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	4603      	mov	r3, r0
 80002bc:	6039      	str	r1, [r7, #0]
 80002be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	db0a      	blt.n	80002de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002c8:	683b      	ldr	r3, [r7, #0]
 80002ca:	b2da      	uxtb	r2, r3
 80002cc:	490c      	ldr	r1, [pc, #48]	; (8000300 <__NVIC_SetPriority+0x4c>)
 80002ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002d2:	0092      	lsls	r2, r2, #2
 80002d4:	b2d2      	uxtb	r2, r2
 80002d6:	440b      	add	r3, r1
 80002d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80002dc:	e00a      	b.n	80002f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002de:	683b      	ldr	r3, [r7, #0]
 80002e0:	b2da      	uxtb	r2, r3
 80002e2:	4908      	ldr	r1, [pc, #32]	; (8000304 <__NVIC_SetPriority+0x50>)
 80002e4:	79fb      	ldrb	r3, [r7, #7]
 80002e6:	f003 030f 	and.w	r3, r3, #15
 80002ea:	3b04      	subs	r3, #4
 80002ec:	0092      	lsls	r2, r2, #2
 80002ee:	b2d2      	uxtb	r2, r2
 80002f0:	440b      	add	r3, r1
 80002f2:	761a      	strb	r2, [r3, #24]
}
 80002f4:	bf00      	nop
 80002f6:	370c      	adds	r7, #12
 80002f8:	46bd      	mov	sp, r7
 80002fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002fe:	4770      	bx	lr
 8000300:	e000e100 	.word	0xe000e100
 8000304:	e000ed00 	.word	0xe000ed00

08000308 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	b082      	sub	sp, #8
 800030c:	af00      	add	r7, sp, #0
 800030e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	3b01      	subs	r3, #1
 8000314:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000318:	d301      	bcc.n	800031e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800031a:	2301      	movs	r3, #1
 800031c:	e00f      	b.n	800033e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800031e:	4a0a      	ldr	r2, [pc, #40]	; (8000348 <SysTick_Config+0x40>)
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	3b01      	subs	r3, #1
 8000324:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000326:	213f      	movs	r1, #63	; 0x3f
 8000328:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800032c:	f7ff ffc2 	bl	80002b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000330:	4b05      	ldr	r3, [pc, #20]	; (8000348 <SysTick_Config+0x40>)
 8000332:	2200      	movs	r2, #0
 8000334:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000336:	4b04      	ldr	r3, [pc, #16]	; (8000348 <SysTick_Config+0x40>)
 8000338:	2207      	movs	r2, #7
 800033a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800033c:	2300      	movs	r3, #0
}
 800033e:	4618      	mov	r0, r3
 8000340:	3708      	adds	r7, #8
 8000342:	46bd      	mov	sp, r7
 8000344:	bd80      	pop	{r7, pc}
 8000346:	bf00      	nop
 8000348:	e000e010 	.word	0xe000e010

0800034c <XMC_GPIO_SetOutputHigh>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 800034c:	b480      	push	{r7}
 800034e:	b083      	sub	sp, #12
 8000350:	af00      	add	r7, sp, #0
 8000352:	6078      	str	r0, [r7, #4]
 8000354:	460b      	mov	r3, r1
 8000356:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputHigh: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = (uint32_t)0x1U << pin;
 8000358:	78fb      	ldrb	r3, [r7, #3]
 800035a:	2201      	movs	r2, #1
 800035c:	409a      	lsls	r2, r3
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	605a      	str	r2, [r3, #4]
}
 8000362:	bf00      	nop
 8000364:	370c      	adds	r7, #12
 8000366:	46bd      	mov	sp, r7
 8000368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800036c:	4770      	bx	lr

0800036e <XMC_GPIO_SetOutputLow>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.\n
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputLow(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 800036e:	b480      	push	{r7}
 8000370:	b083      	sub	sp, #12
 8000372:	af00      	add	r7, sp, #0
 8000374:	6078      	str	r0, [r7, #4]
 8000376:	460b      	mov	r3, r1
 8000378:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputLow: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10000U << pin;
 800037a:	78fb      	ldrb	r3, [r7, #3]
 800037c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000380:	409a      	lsls	r2, r3
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	605a      	str	r2, [r3, #4]
}
 8000386:	bf00      	nop
 8000388:	370c      	adds	r7, #12
 800038a:	46bd      	mov	sp, r7
 800038c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000390:	4770      	bx	lr

08000392 <XMC_GPIO_GetInput>:
 * Prior to this api, user has to configure port pin to input mode using XMC_GPIO_SetMode().
 *
 */

__STATIC_INLINE uint32_t XMC_GPIO_GetInput(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 8000392:	b480      	push	{r7}
 8000394:	b083      	sub	sp, #12
 8000396:	af00      	add	r7, sp, #0
 8000398:	6078      	str	r0, [r7, #4]
 800039a:	460b      	mov	r3, r1
 800039c:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_GetInput: Invalid port", XMC_GPIO_CHECK_PORT(port));

  return (((port->IN) >> pin) & 0x1U);
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80003a2:	78fb      	ldrb	r3, [r7, #3]
 80003a4:	fa22 f303 	lsr.w	r3, r2, r3
 80003a8:	f003 0301 	and.w	r3, r3, #1
}
 80003ac:	4618      	mov	r0, r3
 80003ae:	370c      	adds	r7, #12
 80003b0:	46bd      	mov	sp, r7
 80003b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b6:	4770      	bx	lr

080003b8 <main>:
void sentence_encode(const char* str, int len );

// 1 number -> symbols
void number_encode(uint32_t amount);

int main(void) {
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b084      	sub	sp, #16
 80003bc:	af00      	add	r7, sp, #0
  
  XMC_GPIO_Init(GPIO_LED1,     &out_config);
 80003be:	4a22      	ldr	r2, [pc, #136]	; (8000448 <main+0x90>)
 80003c0:	2101      	movs	r1, #1
 80003c2:	4822      	ldr	r0, [pc, #136]	; (800044c <main+0x94>)
 80003c4:	f000 fb0c 	bl	80009e0 <XMC_GPIO_Init>
  XMC_GPIO_Init(GPIO_BUTTON1,  &in_config);
 80003c8:	4a21      	ldr	r2, [pc, #132]	; (8000450 <main+0x98>)
 80003ca:	210e      	movs	r1, #14
 80003cc:	481f      	ldr	r0, [pc, #124]	; (800044c <main+0x94>)
 80003ce:	f000 fb07 	bl	80009e0 <XMC_GPIO_Init>
  XMC_GPIO_Init(GPIO_BUTTON2,  &in_config);
 80003d2:	4a1f      	ldr	r2, [pc, #124]	; (8000450 <main+0x98>)
 80003d4:	210f      	movs	r1, #15
 80003d6:	481d      	ldr	r0, [pc, #116]	; (800044c <main+0x94>)
 80003d8:	f000 fb02 	bl	80009e0 <XMC_GPIO_Init>

  // 1 tick = 1ms
  SysTick_Config(SystemCoreClock / 1000);
 80003dc:	4b1d      	ldr	r3, [pc, #116]	; (8000454 <main+0x9c>)
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	4a1d      	ldr	r2, [pc, #116]	; (8000458 <main+0xa0>)
 80003e2:	fba2 2303 	umull	r2, r3, r2, r3
 80003e6:	099b      	lsrs	r3, r3, #6
 80003e8:	4618      	mov	r0, r3
 80003ea:	f7ff ff8d 	bl	8000308 <SysTick_Config>

  const char str[] = "i can morse";
 80003ee:	4a1b      	ldr	r2, [pc, #108]	; (800045c <main+0xa4>)
 80003f0:	1d3b      	adds	r3, r7, #4
 80003f2:	ca07      	ldmia	r2, {r0, r1, r2}
 80003f4:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  while(1){

    if(XMC_GPIO_GetInput(GPIO_BUTTON1) == 0){
 80003f8:	210e      	movs	r1, #14
 80003fa:	4814      	ldr	r0, [pc, #80]	; (800044c <main+0x94>)
 80003fc:	f7ff ffc9 	bl	8000392 <XMC_GPIO_GetInput>
 8000400:	4603      	mov	r3, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d10a      	bne.n	800041c <main+0x64>
      button1_once = 1;
 8000406:	4b16      	ldr	r3, [pc, #88]	; (8000460 <main+0xa8>)
 8000408:	2201      	movs	r2, #1
 800040a:	701a      	strb	r2, [r3, #0]
      button1_on = 1;
 800040c:	4b15      	ldr	r3, [pc, #84]	; (8000464 <main+0xac>)
 800040e:	2201      	movs	r2, #1
 8000410:	701a      	strb	r2, [r3, #0]
      sentence_encode(str,11);
 8000412:	1d3b      	adds	r3, r7, #4
 8000414:	210b      	movs	r1, #11
 8000416:	4618      	mov	r0, r3
 8000418:	f000 f896 	bl	8000548 <sentence_encode>
    }

    if(XMC_GPIO_GetInput(GPIO_BUTTON2) == 0){
 800041c:	210f      	movs	r1, #15
 800041e:	480b      	ldr	r0, [pc, #44]	; (800044c <main+0x94>)
 8000420:	f7ff ffb7 	bl	8000392 <XMC_GPIO_GetInput>
 8000424:	4603      	mov	r3, r0
 8000426:	2b00      	cmp	r3, #0
 8000428:	d1e6      	bne.n	80003f8 <main+0x40>
      if (!button1_once) number_encode(0);
 800042a:	4b0d      	ldr	r3, [pc, #52]	; (8000460 <main+0xa8>)
 800042c:	781b      	ldrb	r3, [r3, #0]
 800042e:	2b00      	cmp	r3, #0
 8000430:	d103      	bne.n	800043a <main+0x82>
 8000432:	2000      	movs	r0, #0
 8000434:	f000 f93c 	bl	80006b0 <number_encode>
 8000438:	e7de      	b.n	80003f8 <main+0x40>
      else number_encode(interval1);
 800043a:	4b0b      	ldr	r3, [pc, #44]	; (8000468 <main+0xb0>)
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	4618      	mov	r0, r3
 8000440:	f000 f936 	bl	80006b0 <number_encode>
    if(XMC_GPIO_GetInput(GPIO_BUTTON1) == 0){
 8000444:	e7d8      	b.n	80003f8 <main+0x40>
 8000446:	bf00      	nop
 8000448:	08003488 	.word	0x08003488
 800044c:	48028100 	.word	0x48028100
 8000450:	08003494 	.word	0x08003494
 8000454:	2000ffc0 	.word	0x2000ffc0
 8000458:	10624dd3 	.word	0x10624dd3
 800045c:	080034a0 	.word	0x080034a0
 8000460:	2000043d 	.word	0x2000043d
 8000464:	2000043c 	.word	0x2000043c
 8000468:	20000434 	.word	0x20000434

0800046c <SysTick_Handler>:

  return 0;
}


void SysTick_Handler(){
 800046c:	b480      	push	{r7}
 800046e:	af00      	add	r7, sp, #0
  if (tick>0) tick--;
 8000470:	4b10      	ldr	r3, [pc, #64]	; (80004b4 <SysTick_Handler+0x48>)
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	2b00      	cmp	r3, #0
 8000476:	d004      	beq.n	8000482 <SysTick_Handler+0x16>
 8000478:	4b0e      	ldr	r3, [pc, #56]	; (80004b4 <SysTick_Handler+0x48>)
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	3b01      	subs	r3, #1
 800047e:	4a0d      	ldr	r2, [pc, #52]	; (80004b4 <SysTick_Handler+0x48>)
 8000480:	6013      	str	r3, [r2, #0]

  if (!button1_on){
 8000482:	4b0d      	ldr	r3, [pc, #52]	; (80004b8 <SysTick_Handler+0x4c>)
 8000484:	781b      	ldrb	r3, [r3, #0]
 8000486:	2b00      	cmp	r3, #0
 8000488:	d105      	bne.n	8000496 <SysTick_Handler+0x2a>
    interval2++;
 800048a:	4b0c      	ldr	r3, [pc, #48]	; (80004bc <SysTick_Handler+0x50>)
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	3301      	adds	r3, #1
 8000490:	4a0a      	ldr	r2, [pc, #40]	; (80004bc <SysTick_Handler+0x50>)
 8000492:	6013      	str	r3, [r2, #0]
    interval1=interval2;
    interval2=0;
  }


}
 8000494:	e009      	b.n	80004aa <SysTick_Handler+0x3e>
    button1_on=0;
 8000496:	4b08      	ldr	r3, [pc, #32]	; (80004b8 <SysTick_Handler+0x4c>)
 8000498:	2200      	movs	r2, #0
 800049a:	701a      	strb	r2, [r3, #0]
    interval1=interval2;
 800049c:	4b07      	ldr	r3, [pc, #28]	; (80004bc <SysTick_Handler+0x50>)
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	4a07      	ldr	r2, [pc, #28]	; (80004c0 <SysTick_Handler+0x54>)
 80004a2:	6013      	str	r3, [r2, #0]
    interval2=0;
 80004a4:	4b05      	ldr	r3, [pc, #20]	; (80004bc <SysTick_Handler+0x50>)
 80004a6:	2200      	movs	r2, #0
 80004a8:	601a      	str	r2, [r3, #0]
}
 80004aa:	bf00      	nop
 80004ac:	46bd      	mov	sp, r7
 80004ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b2:	4770      	bx	lr
 80004b4:	20000430 	.word	0x20000430
 80004b8:	2000043c 	.word	0x2000043c
 80004bc:	20000438 	.word	0x20000438
 80004c0:	20000434 	.word	0x20000434

080004c4 <sleep>:

void sleep(uint32_t amount){
 80004c4:	b480      	push	{r7}
 80004c6:	b083      	sub	sp, #12
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
  tick = amount;
 80004cc:	4a07      	ldr	r2, [pc, #28]	; (80004ec <sleep+0x28>)
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	6013      	str	r3, [r2, #0]
  while(tick>0);
 80004d2:	bf00      	nop
 80004d4:	4b05      	ldr	r3, [pc, #20]	; (80004ec <sleep+0x28>)
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d1fb      	bne.n	80004d4 <sleep+0x10>
}
 80004dc:	bf00      	nop
 80004de:	bf00      	nop
 80004e0:	370c      	adds	r7, #12
 80004e2:	46bd      	mov	sp, r7
 80004e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop
 80004ec:	20000430 	.word	0x20000430

080004f0 <character_encode>:

void character_encode(char symbol){
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b082      	sub	sp, #8
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	4603      	mov	r3, r0
 80004f8:	71fb      	strb	r3, [r7, #7]
  if (symbol == 0){ // dot
 80004fa:	79fb      	ldrb	r3, [r7, #7]
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d10e      	bne.n	800051e <character_encode+0x2e>
    XMC_GPIO_SetOutputHigh(GPIO_LED1);
 8000500:	2101      	movs	r1, #1
 8000502:	4810      	ldr	r0, [pc, #64]	; (8000544 <character_encode+0x54>)
 8000504:	f7ff ff22 	bl	800034c <XMC_GPIO_SetOutputHigh>
    sleep(TICK_DIT);
 8000508:	2064      	movs	r0, #100	; 0x64
 800050a:	f7ff ffdb 	bl	80004c4 <sleep>
    XMC_GPIO_SetOutputLow(GPIO_LED1);
 800050e:	2101      	movs	r1, #1
 8000510:	480c      	ldr	r0, [pc, #48]	; (8000544 <character_encode+0x54>)
 8000512:	f7ff ff2c 	bl	800036e <XMC_GPIO_SetOutputLow>
    sleep(TICK_DD_SPACE);
 8000516:	2064      	movs	r0, #100	; 0x64
 8000518:	f7ff ffd4 	bl	80004c4 <sleep>
    XMC_GPIO_SetOutputHigh(GPIO_LED1);
    sleep(TICK_DAH);
    XMC_GPIO_SetOutputLow(GPIO_LED1);
    sleep(TICK_DD_SPACE);
  }
}
 800051c:	e00e      	b.n	800053c <character_encode+0x4c>
    XMC_GPIO_SetOutputHigh(GPIO_LED1);
 800051e:	2101      	movs	r1, #1
 8000520:	4808      	ldr	r0, [pc, #32]	; (8000544 <character_encode+0x54>)
 8000522:	f7ff ff13 	bl	800034c <XMC_GPIO_SetOutputHigh>
    sleep(TICK_DAH);
 8000526:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800052a:	f7ff ffcb 	bl	80004c4 <sleep>
    XMC_GPIO_SetOutputLow(GPIO_LED1);
 800052e:	2101      	movs	r1, #1
 8000530:	4804      	ldr	r0, [pc, #16]	; (8000544 <character_encode+0x54>)
 8000532:	f7ff ff1c 	bl	800036e <XMC_GPIO_SetOutputLow>
    sleep(TICK_DD_SPACE);
 8000536:	2064      	movs	r0, #100	; 0x64
 8000538:	f7ff ffc4 	bl	80004c4 <sleep>
}
 800053c:	bf00      	nop
 800053e:	3708      	adds	r7, #8
 8000540:	46bd      	mov	sp, r7
 8000542:	bd80      	pop	{r7, pc}
 8000544:	48028100 	.word	0x48028100

08000548 <sentence_encode>:

void sentence_encode(const char* str, int len ){
 8000548:	b580      	push	{r7, lr}
 800054a:	b084      	sub	sp, #16
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
 8000550:	6039      	str	r1, [r7, #0]

  for (int i=0; i<len; i++){
 8000552:	2300      	movs	r3, #0
 8000554:	60fb      	str	r3, [r7, #12]
 8000556:	e09e      	b.n	8000696 <sentence_encode+0x14e>
    switch(str[i]){
 8000558:	68fb      	ldr	r3, [r7, #12]
 800055a:	687a      	ldr	r2, [r7, #4]
 800055c:	4413      	add	r3, r2
 800055e:	781b      	ldrb	r3, [r3, #0]
 8000560:	2b20      	cmp	r3, #32
 8000562:	f000 8088 	beq.w	8000676 <sentence_encode+0x12e>
 8000566:	2b20      	cmp	r3, #32
 8000568:	f2c0 8089 	blt.w	800067e <sentence_encode+0x136>
 800056c:	2b73      	cmp	r3, #115	; 0x73
 800056e:	f300 8086 	bgt.w	800067e <sentence_encode+0x136>
 8000572:	2b61      	cmp	r3, #97	; 0x61
 8000574:	f2c0 8083 	blt.w	800067e <sentence_encode+0x136>
 8000578:	3b61      	subs	r3, #97	; 0x61
 800057a:	2b12      	cmp	r3, #18
 800057c:	d87f      	bhi.n	800067e <sentence_encode+0x136>
 800057e:	a201      	add	r2, pc, #4	; (adr r2, 8000584 <sentence_encode+0x3c>)
 8000580:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000584:	080005f9 	.word	0x080005f9
 8000588:	0800067f 	.word	0x0800067f
 800058c:	080005df 	.word	0x080005df
 8000590:	0800067f 	.word	0x0800067f
 8000594:	0800065f 	.word	0x0800065f
 8000598:	0800067f 	.word	0x0800067f
 800059c:	0800067f 	.word	0x0800067f
 80005a0:	0800067f 	.word	0x0800067f
 80005a4:	080005d1 	.word	0x080005d1
 80005a8:	0800067f 	.word	0x0800067f
 80005ac:	0800067f 	.word	0x0800067f
 80005b0:	0800067f 	.word	0x0800067f
 80005b4:	08000615 	.word	0x08000615
 80005b8:	08000607 	.word	0x08000607
 80005bc:	08000623 	.word	0x08000623
 80005c0:	0800067f 	.word	0x0800067f
 80005c4:	0800067f 	.word	0x0800067f
 80005c8:	08000637 	.word	0x08000637
 80005cc:	0800064b 	.word	0x0800064b
      case 'i': // ..
        character_encode(0);
 80005d0:	2000      	movs	r0, #0
 80005d2:	f7ff ff8d 	bl	80004f0 <character_encode>
        character_encode(0);
 80005d6:	2000      	movs	r0, #0
 80005d8:	f7ff ff8a 	bl	80004f0 <character_encode>
        break;
 80005dc:	e050      	b.n	8000680 <sentence_encode+0x138>
      case 'c': // -.-.
        character_encode(1);
 80005de:	2001      	movs	r0, #1
 80005e0:	f7ff ff86 	bl	80004f0 <character_encode>
        character_encode(0);
 80005e4:	2000      	movs	r0, #0
 80005e6:	f7ff ff83 	bl	80004f0 <character_encode>
        character_encode(1);
 80005ea:	2001      	movs	r0, #1
 80005ec:	f7ff ff80 	bl	80004f0 <character_encode>
        character_encode(0);
 80005f0:	2000      	movs	r0, #0
 80005f2:	f7ff ff7d 	bl	80004f0 <character_encode>
        break;
 80005f6:	e043      	b.n	8000680 <sentence_encode+0x138>
      case 'a': //.-
        character_encode(0);
 80005f8:	2000      	movs	r0, #0
 80005fa:	f7ff ff79 	bl	80004f0 <character_encode>
        character_encode(1);
 80005fe:	2001      	movs	r0, #1
 8000600:	f7ff ff76 	bl	80004f0 <character_encode>
        break;
 8000604:	e03c      	b.n	8000680 <sentence_encode+0x138>
      case 'n': // -.
        character_encode(1);
 8000606:	2001      	movs	r0, #1
 8000608:	f7ff ff72 	bl	80004f0 <character_encode>
        character_encode(0);
 800060c:	2000      	movs	r0, #0
 800060e:	f7ff ff6f 	bl	80004f0 <character_encode>
        break;
 8000612:	e035      	b.n	8000680 <sentence_encode+0x138>
      case 'm': // --
        character_encode(1);
 8000614:	2001      	movs	r0, #1
 8000616:	f7ff ff6b 	bl	80004f0 <character_encode>
        character_encode(1);
 800061a:	2001      	movs	r0, #1
 800061c:	f7ff ff68 	bl	80004f0 <character_encode>
        break;
 8000620:	e02e      	b.n	8000680 <sentence_encode+0x138>
      case 'o': // ---
        character_encode(1);
 8000622:	2001      	movs	r0, #1
 8000624:	f7ff ff64 	bl	80004f0 <character_encode>
        character_encode(1);
 8000628:	2001      	movs	r0, #1
 800062a:	f7ff ff61 	bl	80004f0 <character_encode>
        character_encode(1);
 800062e:	2001      	movs	r0, #1
 8000630:	f7ff ff5e 	bl	80004f0 <character_encode>
        break;
 8000634:	e024      	b.n	8000680 <sentence_encode+0x138>
      case 'r': // .-.
        character_encode(0);
 8000636:	2000      	movs	r0, #0
 8000638:	f7ff ff5a 	bl	80004f0 <character_encode>
        character_encode(1);
 800063c:	2001      	movs	r0, #1
 800063e:	f7ff ff57 	bl	80004f0 <character_encode>
        character_encode(0);
 8000642:	2000      	movs	r0, #0
 8000644:	f7ff ff54 	bl	80004f0 <character_encode>
        break;
 8000648:	e01a      	b.n	8000680 <sentence_encode+0x138>
      case 's': // ...
        character_encode(0);
 800064a:	2000      	movs	r0, #0
 800064c:	f7ff ff50 	bl	80004f0 <character_encode>
        character_encode(0);
 8000650:	2000      	movs	r0, #0
 8000652:	f7ff ff4d 	bl	80004f0 <character_encode>
        character_encode(0);
 8000656:	2000      	movs	r0, #0
 8000658:	f7ff ff4a 	bl	80004f0 <character_encode>
        break;
 800065c:	e010      	b.n	8000680 <sentence_encode+0x138>
      case 'e': // .
        XMC_GPIO_SetOutputHigh(GPIO_LED1);
 800065e:	2101      	movs	r1, #1
 8000660:	4812      	ldr	r0, [pc, #72]	; (80006ac <sentence_encode+0x164>)
 8000662:	f7ff fe73 	bl	800034c <XMC_GPIO_SetOutputHigh>
        sleep(TICK_DIT);
 8000666:	2064      	movs	r0, #100	; 0x64
 8000668:	f7ff ff2c 	bl	80004c4 <sleep>
        XMC_GPIO_SetOutputLow(GPIO_LED1);
 800066c:	2101      	movs	r1, #1
 800066e:	480f      	ldr	r0, [pc, #60]	; (80006ac <sentence_encode+0x164>)
 8000670:	f7ff fe7d 	bl	800036e <XMC_GPIO_SetOutputLow>
        break;
 8000674:	e004      	b.n	8000680 <sentence_encode+0x138>
      case ' ': // 200
        sleep(200);
 8000676:	20c8      	movs	r0, #200	; 0xc8
 8000678:	f7ff ff24 	bl	80004c4 <sleep>
        break;
 800067c:	e000      	b.n	8000680 <sentence_encode+0x138>
      default :
        break;
 800067e:	bf00      	nop
    }
    if (i!=len-1) sleep(200);
 8000680:	683b      	ldr	r3, [r7, #0]
 8000682:	3b01      	subs	r3, #1
 8000684:	68fa      	ldr	r2, [r7, #12]
 8000686:	429a      	cmp	r2, r3
 8000688:	d002      	beq.n	8000690 <sentence_encode+0x148>
 800068a:	20c8      	movs	r0, #200	; 0xc8
 800068c:	f7ff ff1a 	bl	80004c4 <sleep>
  for (int i=0; i<len; i++){
 8000690:	68fb      	ldr	r3, [r7, #12]
 8000692:	3301      	adds	r3, #1
 8000694:	60fb      	str	r3, [r7, #12]
 8000696:	68fa      	ldr	r2, [r7, #12]
 8000698:	683b      	ldr	r3, [r7, #0]
 800069a:	429a      	cmp	r2, r3
 800069c:	f6ff af5c 	blt.w	8000558 <sentence_encode+0x10>
  }
}
 80006a0:	bf00      	nop
 80006a2:	bf00      	nop
 80006a4:	3710      	adds	r7, #16
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	48028100 	.word	0x48028100

080006b0 <number_encode>:

void number_encode(uint32_t amount){
 80006b0:	b5b0      	push	{r4, r5, r7, lr}
 80006b2:	b086      	sub	sp, #24
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
  int len =0;
 80006b8:	2300      	movs	r3, #0
 80006ba:	617b      	str	r3, [r7, #20]
  if (amount != 0){
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d010      	beq.n	80006e4 <number_encode+0x34>
    len = log10(amount);
 80006c2:	6878      	ldr	r0, [r7, #4]
 80006c4:	f002 fb44 	bl	8002d50 <__aeabi_ui2d>
 80006c8:	4602      	mov	r2, r0
 80006ca:	460b      	mov	r3, r1
 80006cc:	4610      	mov	r0, r2
 80006ce:	4619      	mov	r1, r3
 80006d0:	f000 fe42 	bl	8001358 <log10>
 80006d4:	4602      	mov	r2, r0
 80006d6:	460b      	mov	r3, r1
 80006d8:	4610      	mov	r0, r2
 80006da:	4619      	mov	r1, r3
 80006dc:	f002 fe62 	bl	80033a4 <__aeabi_d2iz>
 80006e0:	4603      	mov	r3, r0
 80006e2:	617b      	str	r3, [r7, #20]
  }
  for (int i=len;i>=0;i--){
 80006e4:	697b      	ldr	r3, [r7, #20]
 80006e6:	613b      	str	r3, [r7, #16]
 80006e8:	e10a      	b.n	8000900 <number_encode+0x250>
    int n = (int) (amount/pow(10,i));
 80006ea:	6878      	ldr	r0, [r7, #4]
 80006ec:	f002 fb30 	bl	8002d50 <__aeabi_ui2d>
 80006f0:	4604      	mov	r4, r0
 80006f2:	460d      	mov	r5, r1
 80006f4:	6938      	ldr	r0, [r7, #16]
 80006f6:	f002 fb3b 	bl	8002d70 <__aeabi_i2d>
 80006fa:	4602      	mov	r2, r0
 80006fc:	460b      	mov	r3, r1
 80006fe:	f04f 0000 	mov.w	r0, #0
 8000702:	4984      	ldr	r1, [pc, #528]	; (8000914 <number_encode+0x264>)
 8000704:	f000 fe5c 	bl	80013c0 <pow>
 8000708:	4602      	mov	r2, r0
 800070a:	460b      	mov	r3, r1
 800070c:	4620      	mov	r0, r4
 800070e:	4629      	mov	r1, r5
 8000710:	f002 fcc2 	bl	8003098 <__aeabi_ddiv>
 8000714:	4602      	mov	r2, r0
 8000716:	460b      	mov	r3, r1
 8000718:	4610      	mov	r0, r2
 800071a:	4619      	mov	r1, r3
 800071c:	f002 fe42 	bl	80033a4 <__aeabi_d2iz>
 8000720:	4603      	mov	r3, r0
 8000722:	60fb      	str	r3, [r7, #12]
    switch(n){
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	2b09      	cmp	r3, #9
 8000728:	f200 80b8 	bhi.w	800089c <number_encode+0x1ec>
 800072c:	a201      	add	r2, pc, #4	; (adr r2, 8000734 <number_encode+0x84>)
 800072e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000732:	bf00      	nop
 8000734:	0800075d 	.word	0x0800075d
 8000738:	0800077d 	.word	0x0800077d
 800073c:	0800079d 	.word	0x0800079d
 8000740:	080007bd 	.word	0x080007bd
 8000744:	080007dd 	.word	0x080007dd
 8000748:	080007fd 	.word	0x080007fd
 800074c:	0800081d 	.word	0x0800081d
 8000750:	0800083d 	.word	0x0800083d
 8000754:	0800085d 	.word	0x0800085d
 8000758:	0800087d 	.word	0x0800087d
      case 0: // -----
        character_encode(1);
 800075c:	2001      	movs	r0, #1
 800075e:	f7ff fec7 	bl	80004f0 <character_encode>
        character_encode(1);
 8000762:	2001      	movs	r0, #1
 8000764:	f7ff fec4 	bl	80004f0 <character_encode>
        character_encode(1);
 8000768:	2001      	movs	r0, #1
 800076a:	f7ff fec1 	bl	80004f0 <character_encode>
        character_encode(1);
 800076e:	2001      	movs	r0, #1
 8000770:	f7ff febe 	bl	80004f0 <character_encode>
        character_encode(1);
 8000774:	2001      	movs	r0, #1
 8000776:	f7ff febb 	bl	80004f0 <character_encode>
        break;
 800077a:	e090      	b.n	800089e <number_encode+0x1ee>
      case 1: // .----
        character_encode(0);
 800077c:	2000      	movs	r0, #0
 800077e:	f7ff feb7 	bl	80004f0 <character_encode>
        character_encode(1);
 8000782:	2001      	movs	r0, #1
 8000784:	f7ff feb4 	bl	80004f0 <character_encode>
        character_encode(1);
 8000788:	2001      	movs	r0, #1
 800078a:	f7ff feb1 	bl	80004f0 <character_encode>
        character_encode(1);
 800078e:	2001      	movs	r0, #1
 8000790:	f7ff feae 	bl	80004f0 <character_encode>
        character_encode(1);
 8000794:	2001      	movs	r0, #1
 8000796:	f7ff feab 	bl	80004f0 <character_encode>
        break;
 800079a:	e080      	b.n	800089e <number_encode+0x1ee>
      case 2: // ..---
        character_encode(0);
 800079c:	2000      	movs	r0, #0
 800079e:	f7ff fea7 	bl	80004f0 <character_encode>
        character_encode(0);
 80007a2:	2000      	movs	r0, #0
 80007a4:	f7ff fea4 	bl	80004f0 <character_encode>
        character_encode(1);
 80007a8:	2001      	movs	r0, #1
 80007aa:	f7ff fea1 	bl	80004f0 <character_encode>
        character_encode(1);
 80007ae:	2001      	movs	r0, #1
 80007b0:	f7ff fe9e 	bl	80004f0 <character_encode>
        character_encode(1);
 80007b4:	2001      	movs	r0, #1
 80007b6:	f7ff fe9b 	bl	80004f0 <character_encode>
        break;
 80007ba:	e070      	b.n	800089e <number_encode+0x1ee>
      case 3: // ...--
        character_encode(0);
 80007bc:	2000      	movs	r0, #0
 80007be:	f7ff fe97 	bl	80004f0 <character_encode>
        character_encode(0);
 80007c2:	2000      	movs	r0, #0
 80007c4:	f7ff fe94 	bl	80004f0 <character_encode>
        character_encode(0);
 80007c8:	2000      	movs	r0, #0
 80007ca:	f7ff fe91 	bl	80004f0 <character_encode>
        character_encode(1);
 80007ce:	2001      	movs	r0, #1
 80007d0:	f7ff fe8e 	bl	80004f0 <character_encode>
        character_encode(1);
 80007d4:	2001      	movs	r0, #1
 80007d6:	f7ff fe8b 	bl	80004f0 <character_encode>
        break;
 80007da:	e060      	b.n	800089e <number_encode+0x1ee>
      case 4: // ....-
        character_encode(0);
 80007dc:	2000      	movs	r0, #0
 80007de:	f7ff fe87 	bl	80004f0 <character_encode>
        character_encode(0);
 80007e2:	2000      	movs	r0, #0
 80007e4:	f7ff fe84 	bl	80004f0 <character_encode>
        character_encode(0);
 80007e8:	2000      	movs	r0, #0
 80007ea:	f7ff fe81 	bl	80004f0 <character_encode>
        character_encode(0);
 80007ee:	2000      	movs	r0, #0
 80007f0:	f7ff fe7e 	bl	80004f0 <character_encode>
        character_encode(1);
 80007f4:	2001      	movs	r0, #1
 80007f6:	f7ff fe7b 	bl	80004f0 <character_encode>
        break;
 80007fa:	e050      	b.n	800089e <number_encode+0x1ee>
      case 5: // .....
        character_encode(0);
 80007fc:	2000      	movs	r0, #0
 80007fe:	f7ff fe77 	bl	80004f0 <character_encode>
        character_encode(0);
 8000802:	2000      	movs	r0, #0
 8000804:	f7ff fe74 	bl	80004f0 <character_encode>
        character_encode(0);
 8000808:	2000      	movs	r0, #0
 800080a:	f7ff fe71 	bl	80004f0 <character_encode>
        character_encode(0);
 800080e:	2000      	movs	r0, #0
 8000810:	f7ff fe6e 	bl	80004f0 <character_encode>
        character_encode(0);
 8000814:	2000      	movs	r0, #0
 8000816:	f7ff fe6b 	bl	80004f0 <character_encode>
        break;
 800081a:	e040      	b.n	800089e <number_encode+0x1ee>
      case 6: // -....
        character_encode(1);
 800081c:	2001      	movs	r0, #1
 800081e:	f7ff fe67 	bl	80004f0 <character_encode>
        character_encode(0);
 8000822:	2000      	movs	r0, #0
 8000824:	f7ff fe64 	bl	80004f0 <character_encode>
        character_encode(0);
 8000828:	2000      	movs	r0, #0
 800082a:	f7ff fe61 	bl	80004f0 <character_encode>
        character_encode(0);
 800082e:	2000      	movs	r0, #0
 8000830:	f7ff fe5e 	bl	80004f0 <character_encode>
        character_encode(0);
 8000834:	2000      	movs	r0, #0
 8000836:	f7ff fe5b 	bl	80004f0 <character_encode>
        break;
 800083a:	e030      	b.n	800089e <number_encode+0x1ee>
      case 7: // --...
        character_encode(1);
 800083c:	2001      	movs	r0, #1
 800083e:	f7ff fe57 	bl	80004f0 <character_encode>
        character_encode(1);
 8000842:	2001      	movs	r0, #1
 8000844:	f7ff fe54 	bl	80004f0 <character_encode>
        character_encode(0);
 8000848:	2000      	movs	r0, #0
 800084a:	f7ff fe51 	bl	80004f0 <character_encode>
        character_encode(0);
 800084e:	2000      	movs	r0, #0
 8000850:	f7ff fe4e 	bl	80004f0 <character_encode>
        character_encode(0);
 8000854:	2000      	movs	r0, #0
 8000856:	f7ff fe4b 	bl	80004f0 <character_encode>
        break;
 800085a:	e020      	b.n	800089e <number_encode+0x1ee>
      case 8: // ---..
        character_encode(1);
 800085c:	2001      	movs	r0, #1
 800085e:	f7ff fe47 	bl	80004f0 <character_encode>
        character_encode(1);
 8000862:	2001      	movs	r0, #1
 8000864:	f7ff fe44 	bl	80004f0 <character_encode>
        character_encode(1);
 8000868:	2001      	movs	r0, #1
 800086a:	f7ff fe41 	bl	80004f0 <character_encode>
        character_encode(0);
 800086e:	2000      	movs	r0, #0
 8000870:	f7ff fe3e 	bl	80004f0 <character_encode>
        character_encode(0);
 8000874:	2000      	movs	r0, #0
 8000876:	f7ff fe3b 	bl	80004f0 <character_encode>
        break;
 800087a:	e010      	b.n	800089e <number_encode+0x1ee>
      case 9: // ----.
        character_encode(1);
 800087c:	2001      	movs	r0, #1
 800087e:	f7ff fe37 	bl	80004f0 <character_encode>
        character_encode(1);
 8000882:	2001      	movs	r0, #1
 8000884:	f7ff fe34 	bl	80004f0 <character_encode>
        character_encode(1);
 8000888:	2001      	movs	r0, #1
 800088a:	f7ff fe31 	bl	80004f0 <character_encode>
        character_encode(1);
 800088e:	2001      	movs	r0, #1
 8000890:	f7ff fe2e 	bl	80004f0 <character_encode>
        character_encode(0);
 8000894:	2000      	movs	r0, #0
 8000896:	f7ff fe2b 	bl	80004f0 <character_encode>
        break;
 800089a:	e000      	b.n	800089e <number_encode+0x1ee>
      default:
        break;
 800089c:	bf00      	nop
    }
    amount-=n*pow(10,i);
 800089e:	68f8      	ldr	r0, [r7, #12]
 80008a0:	f002 fa66 	bl	8002d70 <__aeabi_i2d>
 80008a4:	4604      	mov	r4, r0
 80008a6:	460d      	mov	r5, r1
 80008a8:	6938      	ldr	r0, [r7, #16]
 80008aa:	f002 fa61 	bl	8002d70 <__aeabi_i2d>
 80008ae:	4602      	mov	r2, r0
 80008b0:	460b      	mov	r3, r1
 80008b2:	f04f 0000 	mov.w	r0, #0
 80008b6:	4917      	ldr	r1, [pc, #92]	; (8000914 <number_encode+0x264>)
 80008b8:	f000 fd82 	bl	80013c0 <pow>
 80008bc:	4602      	mov	r2, r0
 80008be:	460b      	mov	r3, r1
 80008c0:	4620      	mov	r0, r4
 80008c2:	4629      	mov	r1, r5
 80008c4:	f002 fabe 	bl	8002e44 <__aeabi_dmul>
 80008c8:	4602      	mov	r2, r0
 80008ca:	460b      	mov	r3, r1
 80008cc:	4614      	mov	r4, r2
 80008ce:	461d      	mov	r5, r3
 80008d0:	6878      	ldr	r0, [r7, #4]
 80008d2:	f002 fa3d 	bl	8002d50 <__aeabi_ui2d>
 80008d6:	4622      	mov	r2, r4
 80008d8:	462b      	mov	r3, r5
 80008da:	f002 f8fb 	bl	8002ad4 <__aeabi_dsub>
 80008de:	4602      	mov	r2, r0
 80008e0:	460b      	mov	r3, r1
 80008e2:	4610      	mov	r0, r2
 80008e4:	4619      	mov	r1, r3
 80008e6:	f002 fd85 	bl	80033f4 <__aeabi_d2uiz>
 80008ea:	4603      	mov	r3, r0
 80008ec:	607b      	str	r3, [r7, #4]
    if (len) sleep(200);
 80008ee:	697b      	ldr	r3, [r7, #20]
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d002      	beq.n	80008fa <number_encode+0x24a>
 80008f4:	20c8      	movs	r0, #200	; 0xc8
 80008f6:	f7ff fde5 	bl	80004c4 <sleep>
  for (int i=len;i>=0;i--){
 80008fa:	693b      	ldr	r3, [r7, #16]
 80008fc:	3b01      	subs	r3, #1
 80008fe:	613b      	str	r3, [r7, #16]
 8000900:	693b      	ldr	r3, [r7, #16]
 8000902:	2b00      	cmp	r3, #0
 8000904:	f6bf aef1 	bge.w	80006ea <number_encode+0x3a>
  }
}
 8000908:	bf00      	nop
 800090a:	bf00      	nop
 800090c:	3718      	adds	r7, #24
 800090e:	46bd      	mov	sp, r7
 8000910:	bdb0      	pop	{r4, r5, r7, pc}
 8000912:	bf00      	nop
 8000914:	40240000 	.word	0x40240000

08000918 <XMC_GPIO_SetMode>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_SetMode(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_MODE_t mode)
{
 8000918:	b480      	push	{r7}
 800091a:	b083      	sub	sp, #12
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
 8000920:	460b      	mov	r3, r1
 8000922:	70fb      	strb	r3, [r7, #3]
 8000924:	4613      	mov	r3, r2
 8000926:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_GPIO_SetMode: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetMode: Invalid mode", XMC_GPIO_IsModeValid(mode));

  port->IOCR[(uint32_t)pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U)));
 8000928:	78fb      	ldrb	r3, [r7, #3]
 800092a:	089b      	lsrs	r3, r3, #2
 800092c:	b2db      	uxtb	r3, r3
 800092e:	461a      	mov	r2, r3
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	3204      	adds	r2, #4
 8000934:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000938:	78fb      	ldrb	r3, [r7, #3]
 800093a:	f003 0303 	and.w	r3, r3, #3
 800093e:	00db      	lsls	r3, r3, #3
 8000940:	21f8      	movs	r1, #248	; 0xf8
 8000942:	fa01 f303 	lsl.w	r3, r1, r3
 8000946:	43db      	mvns	r3, r3
 8000948:	78f9      	ldrb	r1, [r7, #3]
 800094a:	0889      	lsrs	r1, r1, #2
 800094c:	b2c9      	uxtb	r1, r1
 800094e:	4608      	mov	r0, r1
 8000950:	ea02 0103 	and.w	r1, r2, r3
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	1d02      	adds	r2, r0, #4
 8000958:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  port->IOCR[(uint32_t)pin >> 2U] |= (uint32_t)mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 800095c:	78fb      	ldrb	r3, [r7, #3]
 800095e:	089b      	lsrs	r3, r3, #2
 8000960:	b2db      	uxtb	r3, r3
 8000962:	461a      	mov	r2, r3
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	3204      	adds	r2, #4
 8000968:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800096c:	78b9      	ldrb	r1, [r7, #2]
 800096e:	78fb      	ldrb	r3, [r7, #3]
 8000970:	f003 0303 	and.w	r3, r3, #3
 8000974:	00db      	lsls	r3, r3, #3
 8000976:	fa01 f303 	lsl.w	r3, r1, r3
 800097a:	78f9      	ldrb	r1, [r7, #3]
 800097c:	0889      	lsrs	r1, r1, #2
 800097e:	b2c9      	uxtb	r1, r1
 8000980:	4608      	mov	r0, r1
 8000982:	ea42 0103 	orr.w	r1, r2, r3
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	1d02      	adds	r2, r0, #4
 800098a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800098e:	bf00      	nop
 8000990:	370c      	adds	r7, #12
 8000992:	46bd      	mov	sp, r7
 8000994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000998:	4770      	bx	lr

0800099a <XMC_GPIO_SetHardwareControl>:

void XMC_GPIO_SetHardwareControl(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_HWCTRL_t hwctrl)
{
 800099a:	b480      	push	{r7}
 800099c:	b083      	sub	sp, #12
 800099e:	af00      	add	r7, sp, #0
 80009a0:	6078      	str	r0, [r7, #4]
 80009a2:	460b      	mov	r3, r1
 80009a4:	70fb      	strb	r3, [r7, #3]
 80009a6:	4613      	mov	r3, r2
 80009a8:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid hwctrl", XMC_GPIO_CHECK_HWCTRL(hwctrl));

  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80009ae:	78fb      	ldrb	r3, [r7, #3]
 80009b0:	005b      	lsls	r3, r3, #1
 80009b2:	2103      	movs	r1, #3
 80009b4:	fa01 f303 	lsl.w	r3, r1, r3
 80009b8:	43db      	mvns	r3, r3
 80009ba:	401a      	ands	r2, r3
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	675a      	str	r2, [r3, #116]	; 0x74
  port->HWSEL |= (uint32_t)hwctrl << ((uint32_t)pin << 1U);
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80009c4:	78b9      	ldrb	r1, [r7, #2]
 80009c6:	78fb      	ldrb	r3, [r7, #3]
 80009c8:	005b      	lsls	r3, r3, #1
 80009ca:	fa01 f303 	lsl.w	r3, r1, r3
 80009ce:	431a      	orrs	r2, r3
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	675a      	str	r2, [r3, #116]	; 0x74
}
 80009d4:	bf00      	nop
 80009d6:	370c      	adds	r7, #12
 80009d8:	46bd      	mov	sp, r7
 80009da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009de:	4770      	bx	lr

080009e0 <XMC_GPIO_Init>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_Init(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_CONFIG_t *const config)
{
 80009e0:	b480      	push	{r7}
 80009e2:	b085      	sub	sp, #20
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	60f8      	str	r0, [r7, #12]
 80009e8:	460b      	mov	r3, r1
 80009ea:	607a      	str	r2, [r7, #4]
 80009ec:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid mode", XMC_GPIO_IsModeValid(config->mode));
 
  /* Switch to input */
  port->IOCR[pin >> 2U] &= (uint32_t)~(PORT_IOCR_PC_Msk << (PORT_IOCR_PC_Size * (pin & 0x3U)));
 80009ee:	7afb      	ldrb	r3, [r7, #11]
 80009f0:	089b      	lsrs	r3, r3, #2
 80009f2:	b2db      	uxtb	r3, r3
 80009f4:	461a      	mov	r2, r3
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	3204      	adds	r2, #4
 80009fa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80009fe:	7afb      	ldrb	r3, [r7, #11]
 8000a00:	f003 0303 	and.w	r3, r3, #3
 8000a04:	00db      	lsls	r3, r3, #3
 8000a06:	21f8      	movs	r1, #248	; 0xf8
 8000a08:	fa01 f303 	lsl.w	r3, r1, r3
 8000a0c:	43db      	mvns	r3, r3
 8000a0e:	7af9      	ldrb	r1, [r7, #11]
 8000a10:	0889      	lsrs	r1, r1, #2
 8000a12:	b2c9      	uxtb	r1, r1
 8000a14:	4608      	mov	r0, r1
 8000a16:	ea02 0103 	and.w	r1, r2, r3
 8000a1a:	68fb      	ldr	r3, [r7, #12]
 8000a1c:	1d02      	adds	r2, r0, #4
 8000a1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* HW port control is disabled */
  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8000a26:	7afb      	ldrb	r3, [r7, #11]
 8000a28:	005b      	lsls	r3, r3, #1
 8000a2a:	2103      	movs	r1, #3
 8000a2c:	fa01 f303 	lsl.w	r3, r1, r3
 8000a30:	43db      	mvns	r3, r3
 8000a32:	401a      	ands	r2, r3
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	675a      	str	r2, [r3, #116]	; 0x74


  /* Enable digital input */
  if (XMC_GPIO_CHECK_ANALOG_PORT(port))
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	4a38      	ldr	r2, [pc, #224]	; (8000b1c <XMC_GPIO_Init+0x13c>)
 8000a3c:	4293      	cmp	r3, r2
 8000a3e:	d003      	beq.n	8000a48 <XMC_GPIO_Init+0x68>
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	4a37      	ldr	r2, [pc, #220]	; (8000b20 <XMC_GPIO_Init+0x140>)
 8000a44:	4293      	cmp	r3, r2
 8000a46:	d10a      	bne.n	8000a5e <XMC_GPIO_Init+0x7e>
  {
    port->PDISC &= ~(uint32_t)((uint32_t)0x1U << pin);
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000a4c:	7afb      	ldrb	r3, [r7, #11]
 8000a4e:	2101      	movs	r1, #1
 8000a50:	fa01 f303 	lsl.w	r3, r1, r3
 8000a54:	43db      	mvns	r3, r3
 8000a56:	401a      	ands	r2, r3
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	661a      	str	r2, [r3, #96]	; 0x60
 8000a5c:	e03c      	b.n	8000ad8 <XMC_GPIO_Init+0xf8>
  }
  else
  {
    /* Set output level */
    port->OMR = (uint32_t)config->output_level << pin;
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	685a      	ldr	r2, [r3, #4]
 8000a62:	7afb      	ldrb	r3, [r7, #11]
 8000a64:	409a      	lsls	r2, r3
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	605a      	str	r2, [r3, #4]

    /* Set output driver strength */
    port->PDR[pin >> 3U] &= (uint32_t)~(PORT_PDR_Msk << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U)));
 8000a6a:	7afb      	ldrb	r3, [r7, #11]
 8000a6c:	08db      	lsrs	r3, r3, #3
 8000a6e:	b2db      	uxtb	r3, r3
 8000a70:	461a      	mov	r2, r3
 8000a72:	68fb      	ldr	r3, [r7, #12]
 8000a74:	3210      	adds	r2, #16
 8000a76:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000a7a:	7afb      	ldrb	r3, [r7, #11]
 8000a7c:	f003 0307 	and.w	r3, r3, #7
 8000a80:	009b      	lsls	r3, r3, #2
 8000a82:	2107      	movs	r1, #7
 8000a84:	fa01 f303 	lsl.w	r3, r1, r3
 8000a88:	43db      	mvns	r3, r3
 8000a8a:	7af9      	ldrb	r1, [r7, #11]
 8000a8c:	08c9      	lsrs	r1, r1, #3
 8000a8e:	b2c9      	uxtb	r1, r1
 8000a90:	4608      	mov	r0, r1
 8000a92:	ea02 0103 	and.w	r1, r2, r3
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	f100 0210 	add.w	r2, r0, #16
 8000a9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    port->PDR[pin >> 3U] |= (uint32_t)config->output_strength << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U));
 8000aa0:	7afb      	ldrb	r3, [r7, #11]
 8000aa2:	08db      	lsrs	r3, r3, #3
 8000aa4:	b2db      	uxtb	r3, r3
 8000aa6:	461a      	mov	r2, r3
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	3210      	adds	r2, #16
 8000aac:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	7a1b      	ldrb	r3, [r3, #8]
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	7afb      	ldrb	r3, [r7, #11]
 8000ab8:	f003 0307 	and.w	r3, r3, #7
 8000abc:	009b      	lsls	r3, r3, #2
 8000abe:	fa01 f303 	lsl.w	r3, r1, r3
 8000ac2:	7af9      	ldrb	r1, [r7, #11]
 8000ac4:	08c9      	lsrs	r1, r1, #3
 8000ac6:	b2c9      	uxtb	r1, r1
 8000ac8:	4608      	mov	r0, r1
 8000aca:	ea42 0103 	orr.w	r1, r2, r3
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	f100 0210 	add.w	r2, r0, #16
 8000ad4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  /* Set mode */
  port->IOCR[pin >> 2U] |= (uint32_t)config->mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 8000ad8:	7afb      	ldrb	r3, [r7, #11]
 8000ada:	089b      	lsrs	r3, r3, #2
 8000adc:	b2db      	uxtb	r3, r3
 8000ade:	461a      	mov	r2, r3
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	3204      	adds	r2, #4
 8000ae4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	4619      	mov	r1, r3
 8000aee:	7afb      	ldrb	r3, [r7, #11]
 8000af0:	f003 0303 	and.w	r3, r3, #3
 8000af4:	00db      	lsls	r3, r3, #3
 8000af6:	fa01 f303 	lsl.w	r3, r1, r3
 8000afa:	7af9      	ldrb	r1, [r7, #11]
 8000afc:	0889      	lsrs	r1, r1, #2
 8000afe:	b2c9      	uxtb	r1, r1
 8000b00:	4608      	mov	r0, r1
 8000b02:	ea42 0103 	orr.w	r1, r2, r3
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	1d02      	adds	r2, r0, #4
 8000b0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000b0e:	bf00      	nop
 8000b10:	3714      	adds	r7, #20
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop
 8000b1c:	48028e00 	.word	0x48028e00
 8000b20:	48028f00 	.word	0x48028f00

08000b24 <XMC_GPIO_SetOutputStrength>:

void XMC_GPIO_SetOutputStrength(XMC_GPIO_PORT_t *const port, const uint8_t pin, XMC_GPIO_OUTPUT_STRENGTH_t strength)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b083      	sub	sp, #12
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
 8000b2c:	460b      	mov	r3, r1
 8000b2e:	70fb      	strb	r3, [r7, #3]
 8000b30:	4613      	mov	r3, r2
 8000b32:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid output strength", XMC_GPIO_CHECK_OUTPUT_STRENGTH(strength));

  port->PDR[pin >> 3U] &= (uint32_t)~((uint32_t)PORT_PDR_Msk << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U)));
 8000b34:	78fb      	ldrb	r3, [r7, #3]
 8000b36:	08db      	lsrs	r3, r3, #3
 8000b38:	b2db      	uxtb	r3, r3
 8000b3a:	461a      	mov	r2, r3
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	3210      	adds	r2, #16
 8000b40:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000b44:	78fb      	ldrb	r3, [r7, #3]
 8000b46:	f003 0307 	and.w	r3, r3, #7
 8000b4a:	009b      	lsls	r3, r3, #2
 8000b4c:	2107      	movs	r1, #7
 8000b4e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b52:	43db      	mvns	r3, r3
 8000b54:	78f9      	ldrb	r1, [r7, #3]
 8000b56:	08c9      	lsrs	r1, r1, #3
 8000b58:	b2c9      	uxtb	r1, r1
 8000b5a:	4608      	mov	r0, r1
 8000b5c:	ea02 0103 	and.w	r1, r2, r3
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	f100 0210 	add.w	r2, r0, #16
 8000b66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  port->PDR[pin >> 3U] |= (uint32_t)strength << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U));
 8000b6a:	78fb      	ldrb	r3, [r7, #3]
 8000b6c:	08db      	lsrs	r3, r3, #3
 8000b6e:	b2db      	uxtb	r3, r3
 8000b70:	461a      	mov	r2, r3
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	3210      	adds	r2, #16
 8000b76:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000b7a:	78b9      	ldrb	r1, [r7, #2]
 8000b7c:	78fb      	ldrb	r3, [r7, #3]
 8000b7e:	f003 0307 	and.w	r3, r3, #7
 8000b82:	009b      	lsls	r3, r3, #2
 8000b84:	fa01 f303 	lsl.w	r3, r1, r3
 8000b88:	78f9      	ldrb	r1, [r7, #3]
 8000b8a:	08c9      	lsrs	r1, r1, #3
 8000b8c:	b2c9      	uxtb	r1, r1
 8000b8e:	4608      	mov	r0, r1
 8000b90:	ea42 0103 	orr.w	r1, r2, r3
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	f100 0210 	add.w	r2, r0, #16
 8000b9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000b9e:	bf00      	nop
 8000ba0:	370c      	adds	r7, #12
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr

08000baa <XMC_PRIOARRAY_GetHead>:

/*
 *
 */
__STATIC_INLINE int32_t XMC_PRIOARRAY_GetHead(XMC_PRIOARRAY_t *prioarray)
{
 8000baa:	b480      	push	{r7}
 8000bac:	b083      	sub	sp, #12
 8000bae:	af00      	add	r7, sp, #0
 8000bb0:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_PRIOARRAY_Init: NULL pointer", prioarray != NULL);
  return prioarray->items[prioarray->size].next;
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	685a      	ldr	r2, [r3, #4]
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	4619      	mov	r1, r3
 8000bbc:	460b      	mov	r3, r1
 8000bbe:	005b      	lsls	r3, r3, #1
 8000bc0:	440b      	add	r3, r1
 8000bc2:	009b      	lsls	r3, r3, #2
 8000bc4:	4413      	add	r3, r2
 8000bc6:	689b      	ldr	r3, [r3, #8]
}
 8000bc8:	4618      	mov	r0, r3
 8000bca:	370c      	adds	r7, #12
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd2:	4770      	bx	lr

08000bd4 <XMC_PRIOARRAY_GetItemPriority>:

/*
 *
 */
__STATIC_INLINE int32_t XMC_PRIOARRAY_GetItemPriority(XMC_PRIOARRAY_t *prioarray, int32_t item)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b083      	sub	sp, #12
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
 8000bdc:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_PRIOARRAY_GetItemPriority: item out of range", (item >= 0) && (item < prioarray->size));
  return prioarray->items[item].priority;
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	6859      	ldr	r1, [r3, #4]
 8000be2:	683a      	ldr	r2, [r7, #0]
 8000be4:	4613      	mov	r3, r2
 8000be6:	005b      	lsls	r3, r3, #1
 8000be8:	4413      	add	r3, r2
 8000bea:	009b      	lsls	r3, r3, #2
 8000bec:	440b      	add	r3, r1
 8000bee:	681b      	ldr	r3, [r3, #0]
}
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	370c      	adds	r7, #12
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfa:	4770      	bx	lr

08000bfc <XMC_PRIOARRAY_GetItemNext>:

/*
 *
 */
__STATIC_INLINE int32_t XMC_PRIOARRAY_GetItemNext(XMC_PRIOARRAY_t *prioarray, int32_t item)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b083      	sub	sp, #12
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
 8000c04:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_PRIOARRAY_GetItemNext: item out of range", (item >= 0) && (item < prioarray->size));
  return prioarray->items[item].next;
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	6859      	ldr	r1, [r3, #4]
 8000c0a:	683a      	ldr	r2, [r7, #0]
 8000c0c:	4613      	mov	r3, r2
 8000c0e:	005b      	lsls	r3, r3, #1
 8000c10:	4413      	add	r3, r2
 8000c12:	009b      	lsls	r3, r3, #2
 8000c14:	440b      	add	r3, r1
 8000c16:	689b      	ldr	r3, [r3, #8]
}
 8000c18:	4618      	mov	r0, r3
 8000c1a:	370c      	adds	r7, #12
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr

08000c24 <XMC_LIST_Init>:
  }
}
#endif

void XMC_LIST_Init(XMC_LIST_t *list)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b083      	sub	sp, #12
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  *list = NULL;
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	2200      	movs	r2, #0
 8000c30:	601a      	str	r2, [r3, #0]
}
 8000c32:	bf00      	nop
 8000c34:	370c      	adds	r7, #12
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr

08000c3e <XMC_LIST_GetHead>:

void *XMC_LIST_GetHead(XMC_LIST_t *list)
{
 8000c3e:	b480      	push	{r7}
 8000c40:	b083      	sub	sp, #12
 8000c42:	af00      	add	r7, sp, #0
 8000c44:	6078      	str	r0, [r7, #4]
  return *list;
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	370c      	adds	r7, #12
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr

08000c56 <XMC_LIST_GetTail>:

void *XMC_LIST_GetTail(XMC_LIST_t *list)
{
 8000c56:	b480      	push	{r7}
 8000c58:	b085      	sub	sp, #20
 8000c5a:	af00      	add	r7, sp, #0
 8000c5c:	6078      	str	r0, [r7, #4]
  struct list *tail;
  
  if (*list == NULL) 
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d102      	bne.n	8000c6c <XMC_LIST_GetTail+0x16>
  {
    tail = NULL;
 8000c66:	2300      	movs	r3, #0
 8000c68:	60fb      	str	r3, [r7, #12]
 8000c6a:	e00a      	b.n	8000c82 <XMC_LIST_GetTail+0x2c>
  }
  else
  {
    for (tail = (struct list *)*list; tail->next != NULL; tail = tail->next)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	60fb      	str	r3, [r7, #12]
 8000c72:	e002      	b.n	8000c7a <XMC_LIST_GetTail+0x24>
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	60fb      	str	r3, [r7, #12]
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d1f8      	bne.n	8000c74 <XMC_LIST_GetTail+0x1e>
    {
      /* Loop through the list */
    }  
  }
  
  return tail;    
 8000c82:	68fb      	ldr	r3, [r7, #12]
}
 8000c84:	4618      	mov	r0, r3
 8000c86:	3714      	adds	r7, #20
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr

08000c90 <XMC_LIST_Add>:

void XMC_LIST_Add(XMC_LIST_t *list, void *item)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b084      	sub	sp, #16
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
 8000c98:	6039      	str	r1, [r7, #0]
  struct list *tail;
  
  ((struct list *)item)->next = NULL;
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	601a      	str	r2, [r3, #0]
  tail = (struct list *)XMC_LIST_GetTail(list);
 8000ca0:	6878      	ldr	r0, [r7, #4]
 8000ca2:	f7ff ffd8 	bl	8000c56 <XMC_LIST_GetTail>
 8000ca6:	60f8      	str	r0, [r7, #12]
  
  if (tail == NULL) 
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d103      	bne.n	8000cb6 <XMC_LIST_Add+0x26>
  {
    *list = item;
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	683a      	ldr	r2, [r7, #0]
 8000cb2:	601a      	str	r2, [r3, #0]
  } 
  else 
  {
    tail->next = (struct list *)item;
  }
}
 8000cb4:	e002      	b.n	8000cbc <XMC_LIST_Add+0x2c>
    tail->next = (struct list *)item;
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	683a      	ldr	r2, [r7, #0]
 8000cba:	601a      	str	r2, [r3, #0]
}
 8000cbc:	bf00      	nop
 8000cbe:	3710      	adds	r7, #16
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}

08000cc4 <XMC_LIST_Remove>:

void XMC_LIST_Remove(XMC_LIST_t *list, void *item)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b085      	sub	sp, #20
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
 8000ccc:	6039      	str	r1, [r7, #0]
  struct list *right, *left;
  
  if (*list != NULL) 
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d022      	beq.n	8000d1c <XMC_LIST_Remove+0x58>
  {
    left = NULL;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	60bb      	str	r3, [r7, #8]
    for(right = (struct list *)*list; right != NULL; right = right->next)
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	60fb      	str	r3, [r7, #12]
 8000ce0:	e019      	b.n	8000d16 <XMC_LIST_Remove+0x52>
    {
      if(right == item) 
 8000ce2:	68fa      	ldr	r2, [r7, #12]
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	429a      	cmp	r2, r3
 8000ce8:	d110      	bne.n	8000d0c <XMC_LIST_Remove+0x48>
      {
        if(left == NULL) 
 8000cea:	68bb      	ldr	r3, [r7, #8]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d104      	bne.n	8000cfa <XMC_LIST_Remove+0x36>
        {
          /* First on list */
          *list = right->next;
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	681a      	ldr	r2, [r3, #0]
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	601a      	str	r2, [r3, #0]
 8000cf8:	e003      	b.n	8000d02 <XMC_LIST_Remove+0x3e>
        } 
        else 
        {
          /* Not first on list */
          left->next = right->next;
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	681a      	ldr	r2, [r3, #0]
 8000cfe:	68bb      	ldr	r3, [r7, #8]
 8000d00:	601a      	str	r2, [r3, #0]
        }
        right->next = NULL;
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	2200      	movs	r2, #0
 8000d06:	601a      	str	r2, [r3, #0]
        break;
 8000d08:	bf00      	nop
      }
      left = right;
    }
  }
}
 8000d0a:	e007      	b.n	8000d1c <XMC_LIST_Remove+0x58>
      left = right;
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	60bb      	str	r3, [r7, #8]
    for(right = (struct list *)*list; right != NULL; right = right->next)
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	60fb      	str	r3, [r7, #12]
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d1e2      	bne.n	8000ce2 <XMC_LIST_Remove+0x1e>
}
 8000d1c:	bf00      	nop
 8000d1e:	3714      	adds	r7, #20
 8000d20:	46bd      	mov	sp, r7
 8000d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d26:	4770      	bx	lr

08000d28 <XMC_LIST_Insert>:

void XMC_LIST_Insert(XMC_LIST_t *list, void *prev_item, void *new_item)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b085      	sub	sp, #20
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	60f8      	str	r0, [r7, #12]
 8000d30:	60b9      	str	r1, [r7, #8]
 8000d32:	607a      	str	r2, [r7, #4]
  if (prev_item == NULL) 
 8000d34:	68bb      	ldr	r3, [r7, #8]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d107      	bne.n	8000d4a <XMC_LIST_Insert+0x22>
  {
	((struct list *)new_item)->next = (struct list *)*list;
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	681a      	ldr	r2, [r3, #0]
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	601a      	str	r2, [r3, #0]
	*list = new_item;
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	687a      	ldr	r2, [r7, #4]
 8000d46:	601a      	str	r2, [r3, #0]
  else 
  {
    ((struct list *)new_item)->next = ((struct list *)prev_item)->next;
    ((struct list *)prev_item)->next = (struct list *)new_item;
  }
}
 8000d48:	e006      	b.n	8000d58 <XMC_LIST_Insert+0x30>
    ((struct list *)new_item)->next = ((struct list *)prev_item)->next;
 8000d4a:	68bb      	ldr	r3, [r7, #8]
 8000d4c:	681a      	ldr	r2, [r3, #0]
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	601a      	str	r2, [r3, #0]
    ((struct list *)prev_item)->next = (struct list *)new_item;
 8000d52:	68bb      	ldr	r3, [r7, #8]
 8000d54:	687a      	ldr	r2, [r7, #4]
 8000d56:	601a      	str	r2, [r3, #0]
}
 8000d58:	bf00      	nop
 8000d5a:	3714      	adds	r7, #20
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr

08000d64 <XMC_PRIOARRAY_Init>:

void XMC_PRIOARRAY_Init(XMC_PRIOARRAY_t *prioarray)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b083      	sub	sp, #12
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_PRIOARRAY_Init: NULL pointer", prioarray != NULL);

  /* Initialize head, next points to tail, previous to NULL and the priority is MININT */
  prioarray->items[prioarray->size].next = prioarray->size + 1;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681a      	ldr	r2, [r3, #0]
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	6859      	ldr	r1, [r3, #4]
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4618      	mov	r0, r3
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	005b      	lsls	r3, r3, #1
 8000d7e:	4403      	add	r3, r0
 8000d80:	009b      	lsls	r3, r3, #2
 8000d82:	440b      	add	r3, r1
 8000d84:	3201      	adds	r2, #1
 8000d86:	609a      	str	r2, [r3, #8]
  prioarray->items[prioarray->size].previous = -1;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	685a      	ldr	r2, [r3, #4]
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4619      	mov	r1, r3
 8000d92:	460b      	mov	r3, r1
 8000d94:	005b      	lsls	r3, r3, #1
 8000d96:	440b      	add	r3, r1
 8000d98:	009b      	lsls	r3, r3, #2
 8000d9a:	4413      	add	r3, r2
 8000d9c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000da0:	605a      	str	r2, [r3, #4]
  prioarray->items[prioarray->size].priority = INT32_MAX;
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	685a      	ldr	r2, [r3, #4]
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	4619      	mov	r1, r3
 8000dac:	460b      	mov	r3, r1
 8000dae:	005b      	lsls	r3, r3, #1
 8000db0:	440b      	add	r3, r1
 8000db2:	009b      	lsls	r3, r3, #2
 8000db4:	4413      	add	r3, r2
 8000db6:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8000dba:	601a      	str	r2, [r3, #0]

  /* Initialize tail, next points to NULL, previous is the head and the priority is MAXINT */
  prioarray->items[prioarray->size + 1].next = -1;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	6859      	ldr	r1, [r3, #4]
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	1c5a      	adds	r2, r3, #1
 8000dc6:	4613      	mov	r3, r2
 8000dc8:	005b      	lsls	r3, r3, #1
 8000dca:	4413      	add	r3, r2
 8000dcc:	009b      	lsls	r3, r3, #2
 8000dce:	440b      	add	r3, r1
 8000dd0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000dd4:	609a      	str	r2, [r3, #8]
  prioarray->items[prioarray->size + 1].previous = prioarray->size;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	6859      	ldr	r1, [r3, #4]
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	1c5a      	adds	r2, r3, #1
 8000de0:	4613      	mov	r3, r2
 8000de2:	005b      	lsls	r3, r3, #1
 8000de4:	4413      	add	r3, r2
 8000de6:	009b      	lsls	r3, r3, #2
 8000de8:	440b      	add	r3, r1
 8000dea:	687a      	ldr	r2, [r7, #4]
 8000dec:	6812      	ldr	r2, [r2, #0]
 8000dee:	605a      	str	r2, [r3, #4]
  prioarray->items[prioarray->size + 1].priority = INT32_MIN;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	6859      	ldr	r1, [r3, #4]
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	1c5a      	adds	r2, r3, #1
 8000dfa:	4613      	mov	r3, r2
 8000dfc:	005b      	lsls	r3, r3, #1
 8000dfe:	4413      	add	r3, r2
 8000e00:	009b      	lsls	r3, r3, #2
 8000e02:	440b      	add	r3, r1
 8000e04:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000e08:	601a      	str	r2, [r3, #0]

}
 8000e0a:	bf00      	nop
 8000e0c:	370c      	adds	r7, #12
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr

08000e16 <XMC_PRIOARRAY_Add>:

void XMC_PRIOARRAY_Add(XMC_PRIOARRAY_t *prioarray, int32_t item, int32_t priority)
{
 8000e16:	b580      	push	{r7, lr}
 8000e18:	b086      	sub	sp, #24
 8000e1a:	af00      	add	r7, sp, #0
 8000e1c:	60f8      	str	r0, [r7, #12]
 8000e1e:	60b9      	str	r1, [r7, #8]
 8000e20:	607a      	str	r2, [r7, #4]
  int32_t next;
  int32_t previous;

  XMC_ASSERT("XMC_PRIOARRAY_Add: item out of range", (item >= 0) && (item < prioarray->size));
  
  next = XMC_PRIOARRAY_GetHead(prioarray);
 8000e22:	68f8      	ldr	r0, [r7, #12]
 8000e24:	f7ff fec1 	bl	8000baa <XMC_PRIOARRAY_GetHead>
 8000e28:	6178      	str	r0, [r7, #20]
  while (XMC_PRIOARRAY_GetItemPriority(prioarray, next) > priority)
 8000e2a:	e004      	b.n	8000e36 <XMC_PRIOARRAY_Add+0x20>
  {
    next = XMC_PRIOARRAY_GetItemNext(prioarray, next);
 8000e2c:	6979      	ldr	r1, [r7, #20]
 8000e2e:	68f8      	ldr	r0, [r7, #12]
 8000e30:	f7ff fee4 	bl	8000bfc <XMC_PRIOARRAY_GetItemNext>
 8000e34:	6178      	str	r0, [r7, #20]
  while (XMC_PRIOARRAY_GetItemPriority(prioarray, next) > priority)
 8000e36:	6979      	ldr	r1, [r7, #20]
 8000e38:	68f8      	ldr	r0, [r7, #12]
 8000e3a:	f7ff fecb 	bl	8000bd4 <XMC_PRIOARRAY_GetItemPriority>
 8000e3e:	4602      	mov	r2, r0
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	4293      	cmp	r3, r2
 8000e44:	dbf2      	blt.n	8000e2c <XMC_PRIOARRAY_Add+0x16>
  }

  previous = prioarray->items[next].previous;
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	6859      	ldr	r1, [r3, #4]
 8000e4a:	697a      	ldr	r2, [r7, #20]
 8000e4c:	4613      	mov	r3, r2
 8000e4e:	005b      	lsls	r3, r3, #1
 8000e50:	4413      	add	r3, r2
 8000e52:	009b      	lsls	r3, r3, #2
 8000e54:	440b      	add	r3, r1
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	613b      	str	r3, [r7, #16]

  prioarray->items[item].next = next;
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	6859      	ldr	r1, [r3, #4]
 8000e5e:	68ba      	ldr	r2, [r7, #8]
 8000e60:	4613      	mov	r3, r2
 8000e62:	005b      	lsls	r3, r3, #1
 8000e64:	4413      	add	r3, r2
 8000e66:	009b      	lsls	r3, r3, #2
 8000e68:	440b      	add	r3, r1
 8000e6a:	697a      	ldr	r2, [r7, #20]
 8000e6c:	609a      	str	r2, [r3, #8]
  prioarray->items[item].previous = previous;
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	6859      	ldr	r1, [r3, #4]
 8000e72:	68ba      	ldr	r2, [r7, #8]
 8000e74:	4613      	mov	r3, r2
 8000e76:	005b      	lsls	r3, r3, #1
 8000e78:	4413      	add	r3, r2
 8000e7a:	009b      	lsls	r3, r3, #2
 8000e7c:	440b      	add	r3, r1
 8000e7e:	693a      	ldr	r2, [r7, #16]
 8000e80:	605a      	str	r2, [r3, #4]
  prioarray->items[item].priority = priority;
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	6859      	ldr	r1, [r3, #4]
 8000e86:	68ba      	ldr	r2, [r7, #8]
 8000e88:	4613      	mov	r3, r2
 8000e8a:	005b      	lsls	r3, r3, #1
 8000e8c:	4413      	add	r3, r2
 8000e8e:	009b      	lsls	r3, r3, #2
 8000e90:	440b      	add	r3, r1
 8000e92:	687a      	ldr	r2, [r7, #4]
 8000e94:	601a      	str	r2, [r3, #0]

  prioarray->items[previous].next = item;
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	6859      	ldr	r1, [r3, #4]
 8000e9a:	693a      	ldr	r2, [r7, #16]
 8000e9c:	4613      	mov	r3, r2
 8000e9e:	005b      	lsls	r3, r3, #1
 8000ea0:	4413      	add	r3, r2
 8000ea2:	009b      	lsls	r3, r3, #2
 8000ea4:	440b      	add	r3, r1
 8000ea6:	68ba      	ldr	r2, [r7, #8]
 8000ea8:	609a      	str	r2, [r3, #8]
  prioarray->items[next].previous = item;
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	6859      	ldr	r1, [r3, #4]
 8000eae:	697a      	ldr	r2, [r7, #20]
 8000eb0:	4613      	mov	r3, r2
 8000eb2:	005b      	lsls	r3, r3, #1
 8000eb4:	4413      	add	r3, r2
 8000eb6:	009b      	lsls	r3, r3, #2
 8000eb8:	440b      	add	r3, r1
 8000eba:	68ba      	ldr	r2, [r7, #8]
 8000ebc:	605a      	str	r2, [r3, #4]
}
 8000ebe:	bf00      	nop
 8000ec0:	3718      	adds	r7, #24
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}

08000ec6 <XMC_PRIOARRAY_Remove>:

void XMC_PRIOARRAY_Remove(XMC_PRIOARRAY_t *prioarray, int32_t item)
{
 8000ec6:	b480      	push	{r7}
 8000ec8:	b085      	sub	sp, #20
 8000eca:	af00      	add	r7, sp, #0
 8000ecc:	6078      	str	r0, [r7, #4]
 8000ece:	6039      	str	r1, [r7, #0]
  int32_t next;
  int32_t previous;

  XMC_ASSERT("XMC_PRIOARRAY_Add: item out of range", (item >= 0) && (item < prioarray->size));
  
  next = prioarray->items[item].next;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	6859      	ldr	r1, [r3, #4]
 8000ed4:	683a      	ldr	r2, [r7, #0]
 8000ed6:	4613      	mov	r3, r2
 8000ed8:	005b      	lsls	r3, r3, #1
 8000eda:	4413      	add	r3, r2
 8000edc:	009b      	lsls	r3, r3, #2
 8000ede:	440b      	add	r3, r1
 8000ee0:	689b      	ldr	r3, [r3, #8]
 8000ee2:	60fb      	str	r3, [r7, #12]
  previous = prioarray->items[item].previous;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	6859      	ldr	r1, [r3, #4]
 8000ee8:	683a      	ldr	r2, [r7, #0]
 8000eea:	4613      	mov	r3, r2
 8000eec:	005b      	lsls	r3, r3, #1
 8000eee:	4413      	add	r3, r2
 8000ef0:	009b      	lsls	r3, r3, #2
 8000ef2:	440b      	add	r3, r1
 8000ef4:	685b      	ldr	r3, [r3, #4]
 8000ef6:	60bb      	str	r3, [r7, #8]

  prioarray->items[previous].next = next;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	6859      	ldr	r1, [r3, #4]
 8000efc:	68ba      	ldr	r2, [r7, #8]
 8000efe:	4613      	mov	r3, r2
 8000f00:	005b      	lsls	r3, r3, #1
 8000f02:	4413      	add	r3, r2
 8000f04:	009b      	lsls	r3, r3, #2
 8000f06:	440b      	add	r3, r1
 8000f08:	68fa      	ldr	r2, [r7, #12]
 8000f0a:	609a      	str	r2, [r3, #8]
  prioarray->items[next].previous = previous;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	6859      	ldr	r1, [r3, #4]
 8000f10:	68fa      	ldr	r2, [r7, #12]
 8000f12:	4613      	mov	r3, r2
 8000f14:	005b      	lsls	r3, r3, #1
 8000f16:	4413      	add	r3, r2
 8000f18:	009b      	lsls	r3, r3, #2
 8000f1a:	440b      	add	r3, r1
 8000f1c:	68ba      	ldr	r2, [r7, #8]
 8000f1e:	605a      	str	r2, [r3, #4]
}
 8000f20:	bf00      	nop
 8000f22:	3714      	adds	r7, #20
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr

08000f2c <delay>:

/*******************************************************************************
 * LOCAL FUNCTIONS
 *******************************************************************************/
static void delay(uint32_t cycles)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b085      	sub	sp, #20
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  volatile uint32_t i;

  for(i = 0UL; i < cycles ;++i)
 8000f34:	2300      	movs	r3, #0
 8000f36:	60fb      	str	r3, [r7, #12]
 8000f38:	e003      	b.n	8000f42 <delay+0x16>
  {
    __NOP();
 8000f3a:	bf00      	nop
  for(i = 0UL; i < cycles ;++i)
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	3301      	adds	r3, #1
 8000f40:	60fb      	str	r3, [r7, #12]
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	687a      	ldr	r2, [r7, #4]
 8000f46:	429a      	cmp	r2, r3
 8000f48:	d8f7      	bhi.n	8000f3a <delay+0xe>
  }
}
 8000f4a:	bf00      	nop
 8000f4c:	bf00      	nop
 8000f4e:	3714      	adds	r7, #20
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr

08000f58 <SystemInit>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

__WEAK void SystemInit(void)
{
 8000f58:	b598      	push	{r3, r4, r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
  memcpy(g_chipid, CHIPID_LOC, 16);
 8000f5c:	4a06      	ldr	r2, [pc, #24]	; (8000f78 <SystemInit+0x20>)
 8000f5e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000f62:	4614      	mov	r4, r2
 8000f64:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f66:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  SystemCoreSetup();
 8000f6a:	f000 f807 	bl	8000f7c <SystemCoreSetup>
  SystemCoreClockSetup(); 
 8000f6e:	f000 f83f 	bl	8000ff0 <SystemCoreClockSetup>
}
 8000f72:	bf00      	nop
 8000f74:	bd98      	pop	{r3, r4, r7, pc}
 8000f76:	bf00      	nop
 8000f78:	2000ffc4 	.word	0x2000ffc4

08000f7c <SystemCoreSetup>:

__WEAK void SystemCoreSetup(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b083      	sub	sp, #12
 8000f80:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f82:	b672      	cpsid	i
}
 8000f84:	bf00      	nop
  uint32_t temp;
	
  /* relocate vector table */
  __disable_irq();
  SCB->VTOR = (uint32_t)(&__Vectors);
 8000f86:	4b17      	ldr	r3, [pc, #92]	; (8000fe4 <SystemCoreSetup+0x68>)
 8000f88:	4a17      	ldr	r2, [pc, #92]	; (8000fe8 <SystemCoreSetup+0x6c>)
 8000f8a:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000f8c:	f3bf 8f4f 	dsb	sy
}
 8000f90:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 8000f92:	b662      	cpsie	i
}
 8000f94:	bf00      	nop
  __DSB();
  __enable_irq();
    
#if ((__FPU_PRESENT == 1) && (__FPU_USED == 1))
  SCB->CPACR |= ((3UL << 10*2) |                 /* set CP10 Full Access */
 8000f96:	4b13      	ldr	r3, [pc, #76]	; (8000fe4 <SystemCoreSetup+0x68>)
 8000f98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f9c:	4a11      	ldr	r2, [pc, #68]	; (8000fe4 <SystemCoreSetup+0x68>)
 8000f9e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fa2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
                 (3UL << 11*2)  );               /* set CP11 Full Access */
#endif

  /* Enable unaligned memory access - SCB_CCR.UNALIGN_TRP = 0 */
  SCB->CCR &= ~(SCB_CCR_UNALIGN_TRP_Msk);
 8000fa6:	4b0f      	ldr	r3, [pc, #60]	; (8000fe4 <SystemCoreSetup+0x68>)
 8000fa8:	695b      	ldr	r3, [r3, #20]
 8000faa:	4a0e      	ldr	r2, [pc, #56]	; (8000fe4 <SystemCoreSetup+0x68>)
 8000fac:	f023 0308 	bic.w	r3, r3, #8
 8000fb0:	6153      	str	r3, [r2, #20]

  temp = FLASH0->FCON;
 8000fb2:	4b0e      	ldr	r3, [pc, #56]	; (8000fec <SystemCoreSetup+0x70>)
 8000fb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000fb8:	695b      	ldr	r3, [r3, #20]
 8000fba:	607b      	str	r3, [r7, #4]
  temp &= ~FLASH_FCON_WSPFLASH_Msk;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	f023 030f 	bic.w	r3, r3, #15
 8000fc2:	607b      	str	r3, [r7, #4]
  temp |= PMU_FLASH_WS;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	f043 0303 	orr.w	r3, r3, #3
 8000fca:	607b      	str	r3, [r7, #4]
  FLASH0->FCON = temp;
 8000fcc:	4b07      	ldr	r3, [pc, #28]	; (8000fec <SystemCoreSetup+0x70>)
 8000fce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000fd2:	461a      	mov	r2, r3
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	6153      	str	r3, [r2, #20]
}
 8000fd8:	bf00      	nop
 8000fda:	370c      	adds	r7, #12
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr
 8000fe4:	e000ed00 	.word	0xe000ed00
 8000fe8:	08000000 	.word	0x08000000
 8000fec:	58001000 	.word	0x58001000

08000ff0 <SystemCoreClockSetup>:

__WEAK void SystemCoreClockSetup(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
#else
  /* Automatic calibration uses the fSTDBY */

  /* Enable HIB domain */
  /* Power up HIB domain if and only if it is currently powered down */
  if((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0)
 8000ff4:	4b75      	ldr	r3, [pc, #468]	; (80011cc <SystemCoreClockSetup+0x1dc>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f003 0301 	and.w	r3, r3, #1
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d10c      	bne.n	800101a <SystemCoreClockSetup+0x2a>
  {
    SCU_POWER->PWRSET |= SCU_POWER_PWRSET_HIB_Msk;
 8001000:	4b72      	ldr	r3, [pc, #456]	; (80011cc <SystemCoreClockSetup+0x1dc>)
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	4a71      	ldr	r2, [pc, #452]	; (80011cc <SystemCoreClockSetup+0x1dc>)
 8001006:	f043 0301 	orr.w	r3, r3, #1
 800100a:	6053      	str	r3, [r2, #4]

    while((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0)
 800100c:	bf00      	nop
 800100e:	4b6f      	ldr	r3, [pc, #444]	; (80011cc <SystemCoreClockSetup+0x1dc>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f003 0301 	and.w	r3, r3, #1
 8001016:	2b00      	cmp	r3, #0
 8001018:	d0f9      	beq.n	800100e <SystemCoreClockSetup+0x1e>
      /* wait until HIB domain is enabled */
    }
  }

  /* Remove the reset only if HIB domain were in a state of reset */
  if((SCU_RESET->RSTSTAT) & SCU_RESET_RSTSTAT_HIBRS_Msk)
 800101a:	4b6d      	ldr	r3, [pc, #436]	; (80011d0 <SystemCoreClockSetup+0x1e0>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001022:	2b00      	cmp	r3, #0
 8001024:	d009      	beq.n	800103a <SystemCoreClockSetup+0x4a>
  {
    SCU_RESET->RSTCLR |= SCU_RESET_RSTCLR_HIBRS_Msk;
 8001026:	4b6a      	ldr	r3, [pc, #424]	; (80011d0 <SystemCoreClockSetup+0x1e0>)
 8001028:	689b      	ldr	r3, [r3, #8]
 800102a:	4a69      	ldr	r2, [pc, #420]	; (80011d0 <SystemCoreClockSetup+0x1e0>)
 800102c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001030:	6093      	str	r3, [r2, #8]
    delay(DELAY_CNT_150US_50MHZ);
 8001032:	f641 504c 	movw	r0, #7500	; 0x1d4c
 8001036:	f7ff ff79 	bl	8000f2c <delay>
  SCU_HIBERNATE->HDCR |= SCU_HIBERNATE_HDCR_RCS_Msk | SCU_HIBERNATE_HDCR_STDBYSEL_Msk;

#endif /* STDBY_CLOCK_SRC == STDBY_CLOCK_SRC_OSCULP */

  /* Enable automatic calibration of internal fast oscillator */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_AOTREN_Msk;
 800103a:	4b66      	ldr	r3, [pc, #408]	; (80011d4 <SystemCoreClockSetup+0x1e4>)
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	4a65      	ldr	r2, [pc, #404]	; (80011d4 <SystemCoreClockSetup+0x1e4>)
 8001040:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001044:	6053      	str	r3, [r2, #4]
#endif /* FOFI_CALIBRATION_MODE == FOFI_CALIBRATION_MODE_AUTOMATIC */

  delay(DELAY_CNT_50US_50MHZ);
 8001046:	f640 10c4 	movw	r0, #2500	; 0x9c4
 800104a:	f7ff ff6f 	bl	8000f2c <delay>

#if ENABLE_PLL

  /* enable PLL */
  SCU_PLL->PLLCON0 &= ~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 800104e:	4b61      	ldr	r3, [pc, #388]	; (80011d4 <SystemCoreClockSetup+0x1e4>)
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	4a60      	ldr	r2, [pc, #384]	; (80011d4 <SystemCoreClockSetup+0x1e4>)
 8001054:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001058:	f023 0302 	bic.w	r3, r3, #2
 800105c:	6053      	str	r3, [r2, #4]

#if PLL_CLOCK_SRC != PLL_CLOCK_SRC_OFI
  /* enable OSC_HP */
  if ((SCU_OSC->OSCHPCTRL & SCU_OSC_OSCHPCTRL_MODE_Msk) != 0U)
 800105e:	4b5e      	ldr	r3, [pc, #376]	; (80011d8 <SystemCoreClockSetup+0x1e8>)
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001066:	2b00      	cmp	r3, #0
 8001068:	d029      	beq.n	80010be <SystemCoreClockSetup+0xce>
  {
    SCU_OSC->OSCHPCTRL &= ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk);
 800106a:	4b5b      	ldr	r3, [pc, #364]	; (80011d8 <SystemCoreClockSetup+0x1e8>)
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	4a5a      	ldr	r2, [pc, #360]	; (80011d8 <SystemCoreClockSetup+0x1e8>)
 8001070:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8001074:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001078:	6053      	str	r3, [r2, #4]
    SCU_OSC->OSCHPCTRL |= ((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos;
 800107a:	f000 f927 	bl	80012cc <OSCHP_GetFrequency>
 800107e:	4603      	mov	r3, r0
 8001080:	4a56      	ldr	r2, [pc, #344]	; (80011dc <SystemCoreClockSetup+0x1ec>)
 8001082:	fba2 2303 	umull	r2, r3, r2, r3
 8001086:	0d1b      	lsrs	r3, r3, #20
 8001088:	3b01      	subs	r3, #1
 800108a:	041a      	lsls	r2, r3, #16
 800108c:	4b52      	ldr	r3, [pc, #328]	; (80011d8 <SystemCoreClockSetup+0x1e8>)
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	4951      	ldr	r1, [pc, #324]	; (80011d8 <SystemCoreClockSetup+0x1e8>)
 8001092:	4313      	orrs	r3, r2
 8001094:	604b      	str	r3, [r1, #4]

    /* select OSC_HP clock as PLL input */
    SCU_PLL->PLLCON2 &= ~SCU_PLL_PLLCON2_PINSEL_Msk;
 8001096:	4b4f      	ldr	r3, [pc, #316]	; (80011d4 <SystemCoreClockSetup+0x1e4>)
 8001098:	68db      	ldr	r3, [r3, #12]
 800109a:	4a4e      	ldr	r2, [pc, #312]	; (80011d4 <SystemCoreClockSetup+0x1e4>)
 800109c:	f023 0301 	bic.w	r3, r3, #1
 80010a0:	60d3      	str	r3, [r2, #12]

    /* restart OSC Watchdog */
    SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_OSCRES_Msk;
 80010a2:	4b4c      	ldr	r3, [pc, #304]	; (80011d4 <SystemCoreClockSetup+0x1e4>)
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	4a4b      	ldr	r2, [pc, #300]	; (80011d4 <SystemCoreClockSetup+0x1e4>)
 80010a8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80010ac:	6053      	str	r3, [r2, #4]

    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_OSC_USABLE) != SCU_PLL_PLLSTAT_OSC_USABLE)
 80010ae:	bf00      	nop
 80010b0:	4b48      	ldr	r3, [pc, #288]	; (80011d4 <SystemCoreClockSetup+0x1e4>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f403 7360 	and.w	r3, r3, #896	; 0x380
 80010b8:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 80010bc:	d1f8      	bne.n	80010b0 <SystemCoreClockSetup+0xc0>
  /* select backup clock as PLL input */
  SCU_PLL->PLLCON2 |= SCU_PLL_PLLCON2_PINSEL_Msk;
#endif

  /* Go to bypass the Main PLL */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_VCOBYP_Msk;
 80010be:	4b45      	ldr	r3, [pc, #276]	; (80011d4 <SystemCoreClockSetup+0x1e4>)
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	4a44      	ldr	r2, [pc, #272]	; (80011d4 <SystemCoreClockSetup+0x1e4>)
 80010c4:	f043 0301 	orr.w	r3, r3, #1
 80010c8:	6053      	str	r3, [r2, #4]

  /* disconnect Oscillator from PLL */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_FINDIS_Msk;
 80010ca:	4b42      	ldr	r3, [pc, #264]	; (80011d4 <SystemCoreClockSetup+0x1e4>)
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	4a41      	ldr	r2, [pc, #260]	; (80011d4 <SystemCoreClockSetup+0x1e4>)
 80010d0:	f043 0310 	orr.w	r3, r3, #16
 80010d4:	6053      	str	r3, [r2, #4]

  /* Setup divider settings for main PLL */
  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 80010d6:	4b3f      	ldr	r3, [pc, #252]	; (80011d4 <SystemCoreClockSetup+0x1e4>)
 80010d8:	4a41      	ldr	r2, [pc, #260]	; (80011e0 <SystemCoreClockSetup+0x1f0>)
 80010da:	609a      	str	r2, [r3, #8]
                      (PLL_K2DIV_0 << SCU_PLL_PLLCON1_K2DIV_Pos) |
                      (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));

  /* Set OSCDISCDIS */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 80010dc:	4b3d      	ldr	r3, [pc, #244]	; (80011d4 <SystemCoreClockSetup+0x1e4>)
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	4a3c      	ldr	r2, [pc, #240]	; (80011d4 <SystemCoreClockSetup+0x1e4>)
 80010e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010e6:	6053      	str	r3, [r2, #4]

  /* connect Oscillator to PLL */
  SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_FINDIS_Msk;
 80010e8:	4b3a      	ldr	r3, [pc, #232]	; (80011d4 <SystemCoreClockSetup+0x1e4>)
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	4a39      	ldr	r2, [pc, #228]	; (80011d4 <SystemCoreClockSetup+0x1e4>)
 80010ee:	f023 0310 	bic.w	r3, r3, #16
 80010f2:	6053      	str	r3, [r2, #4]

  /* restart PLL Lock detection */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_RESLD_Msk;
 80010f4:	4b37      	ldr	r3, [pc, #220]	; (80011d4 <SystemCoreClockSetup+0x1e4>)
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	4a36      	ldr	r2, [pc, #216]	; (80011d4 <SystemCoreClockSetup+0x1e4>)
 80010fa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010fe:	6053      	str	r3, [r2, #4]

  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8001100:	bf00      	nop
 8001102:	4b34      	ldr	r3, [pc, #208]	; (80011d4 <SystemCoreClockSetup+0x1e4>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f003 0304 	and.w	r3, r3, #4
 800110a:	2b00      	cmp	r3, #0
 800110c:	d0f9      	beq.n	8001102 <SystemCoreClockSetup+0x112>
  {
    /* wait for PLL Lock */
  }

  /* Disable bypass- put PLL clock back */
  SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_VCOBYP_Msk;
 800110e:	4b31      	ldr	r3, [pc, #196]	; (80011d4 <SystemCoreClockSetup+0x1e4>)
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	4a30      	ldr	r2, [pc, #192]	; (80011d4 <SystemCoreClockSetup+0x1e4>)
 8001114:	f023 0301 	bic.w	r3, r3, #1
 8001118:	6053      	str	r3, [r2, #4]
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) != 0U)
 800111a:	bf00      	nop
 800111c:	4b2d      	ldr	r3, [pc, #180]	; (80011d4 <SystemCoreClockSetup+0x1e4>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f003 0301 	and.w	r3, r3, #1
 8001124:	2b00      	cmp	r3, #0
 8001126:	d1f9      	bne.n	800111c <SystemCoreClockSetup+0x12c>
  }
#endif /* ENABLE_PLL */

#if (SYS_CLOCK_SRC == SYS_CLOCK_SRC_PLL)
  /* Switch system clock to PLL */
  SCU_CLK->SYSCLKCR |= SCU_CLK_SYSCLKCR_SYSSEL_Msk;
 8001128:	4b2e      	ldr	r3, [pc, #184]	; (80011e4 <SystemCoreClockSetup+0x1f4>)
 800112a:	68db      	ldr	r3, [r3, #12]
 800112c:	4a2d      	ldr	r2, [pc, #180]	; (80011e4 <SystemCoreClockSetup+0x1f4>)
 800112e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001132:	60d3      	str	r3, [r2, #12]
  /* Switch system clock to backup clock */
  SCU_CLK->SYSCLKCR &= ~SCU_CLK_SYSCLKCR_SYSSEL_Msk;
#endif

  /* Before scaling to final frequency we need to setup the clock dividers */
  SCU_CLK->PBCLKCR = PBCLKDIV;
 8001134:	4b2b      	ldr	r3, [pc, #172]	; (80011e4 <SystemCoreClockSetup+0x1f4>)
 8001136:	2200      	movs	r2, #0
 8001138:	615a      	str	r2, [r3, #20]
  SCU_CLK->CPUCLKCR = CPUCLKDIV;
 800113a:	4b2a      	ldr	r3, [pc, #168]	; (80011e4 <SystemCoreClockSetup+0x1f4>)
 800113c:	2200      	movs	r2, #0
 800113e:	611a      	str	r2, [r3, #16]
  SCU_CLK->CCUCLKCR = CCUCLKDIV;
 8001140:	4b28      	ldr	r3, [pc, #160]	; (80011e4 <SystemCoreClockSetup+0x1f4>)
 8001142:	2200      	movs	r2, #0
 8001144:	621a      	str	r2, [r3, #32]
  SCU_CLK->WDTCLKCR = WDTCLKDIV;
 8001146:	4b27      	ldr	r3, [pc, #156]	; (80011e4 <SystemCoreClockSetup+0x1f4>)
 8001148:	2200      	movs	r2, #0
 800114a:	625a      	str	r2, [r3, #36]	; 0x24
  SCU_CLK->EBUCLKCR = EBUCLKDIV;
 800114c:	4b25      	ldr	r3, [pc, #148]	; (80011e4 <SystemCoreClockSetup+0x1f4>)
 800114e:	2200      	movs	r2, #0
 8001150:	61da      	str	r2, [r3, #28]
  SCU_CLK->USBCLKCR = USBCLKDIV;
 8001152:	4b24      	ldr	r3, [pc, #144]	; (80011e4 <SystemCoreClockSetup+0x1f4>)
 8001154:	2203      	movs	r2, #3
 8001156:	619a      	str	r2, [r3, #24]

#if ENABLE_PLL
  /* PLL frequency stepping...*/
  /* Reset OSCDISCDIS */
  SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 8001158:	4b1e      	ldr	r3, [pc, #120]	; (80011d4 <SystemCoreClockSetup+0x1e4>)
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	4a1d      	ldr	r2, [pc, #116]	; (80011d4 <SystemCoreClockSetup+0x1e4>)
 800115e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001162:	6053      	str	r3, [r2, #4]

  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 8001164:	4b1b      	ldr	r3, [pc, #108]	; (80011d4 <SystemCoreClockSetup+0x1e4>)
 8001166:	4a20      	ldr	r2, [pc, #128]	; (80011e8 <SystemCoreClockSetup+0x1f8>)
 8001168:	609a      	str	r2, [r3, #8]
	                    (PLL_K2DIV_1 << SCU_PLL_PLLCON1_K2DIV_Pos) |
	                    (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));


  delay(DELAY_CNT_50US_60MHZ);
 800116a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800116e:	f7ff fedd 	bl	8000f2c <delay>
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8001172:	bf00      	nop
 8001174:	4b17      	ldr	r3, [pc, #92]	; (80011d4 <SystemCoreClockSetup+0x1e4>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f003 0304 	and.w	r3, r3, #4
 800117c:	2b00      	cmp	r3, #0
 800117e:	d0f9      	beq.n	8001174 <SystemCoreClockSetup+0x184>
  {
    /* wait for PLL Lock */
  }

  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 8001180:	4b14      	ldr	r3, [pc, #80]	; (80011d4 <SystemCoreClockSetup+0x1e4>)
 8001182:	4a1a      	ldr	r2, [pc, #104]	; (80011ec <SystemCoreClockSetup+0x1fc>)
 8001184:	609a      	str	r2, [r3, #8]
	                    (PLL_K2DIV_2 << SCU_PLL_PLLCON1_K2DIV_Pos) |
	                    (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));


  delay(DELAY_CNT_50US_90MHZ);
 8001186:	f241 1094 	movw	r0, #4500	; 0x1194
 800118a:	f7ff fecf 	bl	8000f2c <delay>
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 800118e:	bf00      	nop
 8001190:	4b10      	ldr	r3, [pc, #64]	; (80011d4 <SystemCoreClockSetup+0x1e4>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f003 0304 	and.w	r3, r3, #4
 8001198:	2b00      	cmp	r3, #0
 800119a:	d0f9      	beq.n	8001190 <SystemCoreClockSetup+0x1a0>
  {
    /* wait for PLL Lock */
  }

  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 800119c:	4b0d      	ldr	r3, [pc, #52]	; (80011d4 <SystemCoreClockSetup+0x1e4>)
 800119e:	4a14      	ldr	r2, [pc, #80]	; (80011f0 <SystemCoreClockSetup+0x200>)
 80011a0:	609a      	str	r2, [r3, #8]
	                    (PLL_K2DIV << SCU_PLL_PLLCON1_K2DIV_Pos) |
	                    (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));


  delay(DELAY_CNT_50US_120MHZ);
 80011a2:	f241 7070 	movw	r0, #6000	; 0x1770
 80011a6:	f7ff fec1 	bl	8000f2c <delay>
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 80011aa:	bf00      	nop
 80011ac:	4b09      	ldr	r3, [pc, #36]	; (80011d4 <SystemCoreClockSetup+0x1e4>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f003 0304 	and.w	r3, r3, #4
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d0f9      	beq.n	80011ac <SystemCoreClockSetup+0x1bc>
  {
    /* wait for PLL Lock */
  }

  SCU_TRAP->TRAPCLR = SCU_TRAP_TRAPCLR_SOSCWDGT_Msk | SCU_TRAP_TRAPCLR_SVCOLCKT_Msk;
 80011b8:	4b0e      	ldr	r3, [pc, #56]	; (80011f4 <SystemCoreClockSetup+0x204>)
 80011ba:	2205      	movs	r2, #5
 80011bc:	60da      	str	r2, [r3, #12]
    /* wait for PLL Lock */
  }
#endif /* (USBCLKDIV & SCU_CLK_USBCLKCR_USBSEL_Msk) */

  /* Enable selected clocks */
  SCU_CLK->CLKSET = ENABLE_SCUCLK;
 80011be:	4b09      	ldr	r3, [pc, #36]	; (80011e4 <SystemCoreClockSetup+0x1f4>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	605a      	str	r2, [r3, #4]
  PORT0->IOCR8 = (PORT0->IOCR8 & ~PORT0_IOCR8_PC8_Msk) | (0x11U << PORT0_IOCR8_PC8_Pos);
#endif

#endif  /* ENABLE_EXTCLK == 1  */

  SystemCoreClockUpdate();
 80011c4:	f000 f818 	bl	80011f8 <SystemCoreClockUpdate>
}
 80011c8:	bf00      	nop
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	50004200 	.word	0x50004200
 80011d0:	50004400 	.word	0x50004400
 80011d4:	50004710 	.word	0x50004710
 80011d8:	50004700 	.word	0x50004700
 80011dc:	6b5fca6b 	.word	0x6b5fca6b
 80011e0:	01134f00 	.word	0x01134f00
 80011e4:	50004600 	.word	0x50004600
 80011e8:	01074f00 	.word	0x01074f00
 80011ec:	01044f00 	.word	0x01044f00
 80011f0:	01034f00 	.word	0x01034f00
 80011f4:	50004160 	.word	0x50004160

080011f8 <SystemCoreClockUpdate>:

__WEAK void SystemCoreClockUpdate(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b084      	sub	sp, #16
 80011fc:	af00      	add	r7, sp, #0
  uint32_t pdiv;
  uint32_t ndiv;
  uint32_t kdiv;
  uint32_t temp;

  if (SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSSEL_Msk)
 80011fe:	4b2f      	ldr	r3, [pc, #188]	; (80012bc <SystemCoreClockUpdate+0xc4>)
 8001200:	68db      	ldr	r3, [r3, #12]
 8001202:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001206:	2b00      	cmp	r3, #0
 8001208:	d03e      	beq.n	8001288 <SystemCoreClockUpdate+0x90>
  {
    /* fPLL is clock source for fSYS */
    if(SCU_PLL->PLLCON2 & SCU_PLL_PLLCON2_PINSEL_Msk)
 800120a:	4b2d      	ldr	r3, [pc, #180]	; (80012c0 <SystemCoreClockUpdate+0xc8>)
 800120c:	68db      	ldr	r3, [r3, #12]
 800120e:	f003 0301 	and.w	r3, r3, #1
 8001212:	2b00      	cmp	r3, #0
 8001214:	d002      	beq.n	800121c <SystemCoreClockUpdate+0x24>
    {
      /* PLL input clock is the backup clock (fOFI) */
      temp = OFI_FREQUENCY;
 8001216:	4b2b      	ldr	r3, [pc, #172]	; (80012c4 <SystemCoreClockUpdate+0xcc>)
 8001218:	60fb      	str	r3, [r7, #12]
 800121a:	e002      	b.n	8001222 <SystemCoreClockUpdate+0x2a>
    }
    else
    {
      /* PLL input clock is the high performance osicllator (fOSCHP) */
      temp = OSCHP_GetFrequency();
 800121c:	f000 f856 	bl	80012cc <OSCHP_GetFrequency>
 8001220:	60f8      	str	r0, [r7, #12]
    }

    /* check if PLL is locked */
    if (SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk)
 8001222:	4b27      	ldr	r3, [pc, #156]	; (80012c0 <SystemCoreClockUpdate+0xc8>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f003 0304 	and.w	r3, r3, #4
 800122a:	2b00      	cmp	r3, #0
 800122c:	d020      	beq.n	8001270 <SystemCoreClockUpdate+0x78>
    {
      /* PLL normal mode */
      /* read back divider settings */
      pdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1;
 800122e:	4b24      	ldr	r3, [pc, #144]	; (80012c0 <SystemCoreClockUpdate+0xc8>)
 8001230:	689b      	ldr	r3, [r3, #8]
 8001232:	0e1b      	lsrs	r3, r3, #24
 8001234:	f003 030f 	and.w	r3, r3, #15
 8001238:	3301      	adds	r3, #1
 800123a:	607b      	str	r3, [r7, #4]
      ndiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1;
 800123c:	4b20      	ldr	r3, [pc, #128]	; (80012c0 <SystemCoreClockUpdate+0xc8>)
 800123e:	689b      	ldr	r3, [r3, #8]
 8001240:	0a1b      	lsrs	r3, r3, #8
 8001242:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001246:	3301      	adds	r3, #1
 8001248:	603b      	str	r3, [r7, #0]
      kdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1;
 800124a:	4b1d      	ldr	r3, [pc, #116]	; (80012c0 <SystemCoreClockUpdate+0xc8>)
 800124c:	689b      	ldr	r3, [r3, #8]
 800124e:	0c1b      	lsrs	r3, r3, #16
 8001250:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001254:	3301      	adds	r3, #1
 8001256:	60bb      	str	r3, [r7, #8]

      temp = (temp / (pdiv * kdiv)) * ndiv;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	68ba      	ldr	r2, [r7, #8]
 800125c:	fb02 f303 	mul.w	r3, r2, r3
 8001260:	68fa      	ldr	r2, [r7, #12]
 8001262:	fbb2 f2f3 	udiv	r2, r2, r3
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	fb02 f303 	mul.w	r3, r2, r3
 800126c:	60fb      	str	r3, [r7, #12]
 800126e:	e00d      	b.n	800128c <SystemCoreClockUpdate+0x94>
    }
    else
    {
      /* PLL prescalar mode */
      /* read back divider settings */
      kdiv  = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K1DIV_Msk) >> SCU_PLL_PLLCON1_K1DIV_Pos) + 1;
 8001270:	4b13      	ldr	r3, [pc, #76]	; (80012c0 <SystemCoreClockUpdate+0xc8>)
 8001272:	689b      	ldr	r3, [r3, #8]
 8001274:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001278:	3301      	adds	r3, #1
 800127a:	60bb      	str	r3, [r7, #8]
      
      temp = (temp / kdiv);
 800127c:	68fa      	ldr	r2, [r7, #12]
 800127e:	68bb      	ldr	r3, [r7, #8]
 8001280:	fbb2 f3f3 	udiv	r3, r2, r3
 8001284:	60fb      	str	r3, [r7, #12]
 8001286:	e001      	b.n	800128c <SystemCoreClockUpdate+0x94>
    }
  }
  else
  {
    /* fOFI is clock source for fSYS */    
    temp = OFI_FREQUENCY;
 8001288:	4b0e      	ldr	r3, [pc, #56]	; (80012c4 <SystemCoreClockUpdate+0xcc>)
 800128a:	60fb      	str	r3, [r7, #12]
  }

  temp = temp / ((SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSDIV_Msk) + 1);
 800128c:	4b0b      	ldr	r3, [pc, #44]	; (80012bc <SystemCoreClockUpdate+0xc4>)
 800128e:	68db      	ldr	r3, [r3, #12]
 8001290:	b2db      	uxtb	r3, r3
 8001292:	3301      	adds	r3, #1
 8001294:	68fa      	ldr	r2, [r7, #12]
 8001296:	fbb2 f3f3 	udiv	r3, r2, r3
 800129a:	60fb      	str	r3, [r7, #12]
  temp = temp / ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) + 1);
 800129c:	4b07      	ldr	r3, [pc, #28]	; (80012bc <SystemCoreClockUpdate+0xc4>)
 800129e:	691b      	ldr	r3, [r3, #16]
 80012a0:	f003 0301 	and.w	r3, r3, #1
 80012a4:	3301      	adds	r3, #1
 80012a6:	68fa      	ldr	r2, [r7, #12]
 80012a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80012ac:	60fb      	str	r3, [r7, #12]

  SystemCoreClock = temp;
 80012ae:	4a06      	ldr	r2, [pc, #24]	; (80012c8 <SystemCoreClockUpdate+0xd0>)
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	6013      	str	r3, [r2, #0]
}
 80012b4:	bf00      	nop
 80012b6:	3710      	adds	r7, #16
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	50004600 	.word	0x50004600
 80012c0:	50004710 	.word	0x50004710
 80012c4:	016e3600 	.word	0x016e3600
 80012c8:	2000ffc0 	.word	0x2000ffc0

080012cc <OSCHP_GetFrequency>:

__WEAK uint32_t OSCHP_GetFrequency(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  return OSCHP_FREQUENCY;
 80012d0:	4b02      	ldr	r3, [pc, #8]	; (80012dc <OSCHP_GetFrequency+0x10>)
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr
 80012dc:	00b71b00 	.word	0x00b71b00

080012e0 <_sbrk>:

// defined in linker script
extern caddr_t Heap_Bank1_Start;
extern caddr_t Heap_Bank1_End;
caddr_t _sbrk(int nbytes)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b084      	sub	sp, #16
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  static caddr_t heap_ptr = NULL;
  caddr_t base;

  if (heap_ptr == NULL) {
 80012e8:	4b14      	ldr	r3, [pc, #80]	; (800133c <_sbrk+0x5c>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d102      	bne.n	80012f6 <_sbrk+0x16>
    heap_ptr = (caddr_t)&Heap_Bank1_Start;
 80012f0:	4b12      	ldr	r3, [pc, #72]	; (800133c <_sbrk+0x5c>)
 80012f2:	4a13      	ldr	r2, [pc, #76]	; (8001340 <_sbrk+0x60>)
 80012f4:	601a      	str	r2, [r3, #0]
  }

  base = heap_ptr;
 80012f6:	4b11      	ldr	r3, [pc, #68]	; (800133c <_sbrk+0x5c>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	60fb      	str	r3, [r7, #12]

  /* heap word alignment */
  nbytes = (nbytes + 3) & ~0x3U;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	3303      	adds	r3, #3
 8001300:	f023 0303 	bic.w	r3, r3, #3
 8001304:	607b      	str	r3, [r7, #4]
  if ((caddr_t)&Heap_Bank1_End > (heap_ptr + nbytes))
 8001306:	4b0d      	ldr	r3, [pc, #52]	; (800133c <_sbrk+0x5c>)
 8001308:	681a      	ldr	r2, [r3, #0]
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	4413      	add	r3, r2
 800130e:	4a0d      	ldr	r2, [pc, #52]	; (8001344 <_sbrk+0x64>)
 8001310:	4293      	cmp	r3, r2
 8001312:	d207      	bcs.n	8001324 <_sbrk+0x44>
  {
    heap_ptr += nbytes;
 8001314:	4b09      	ldr	r3, [pc, #36]	; (800133c <_sbrk+0x5c>)
 8001316:	681a      	ldr	r2, [r3, #0]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	4413      	add	r3, r2
 800131c:	4a07      	ldr	r2, [pc, #28]	; (800133c <_sbrk+0x5c>)
 800131e:	6013      	str	r3, [r2, #0]
    return (base);
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	e006      	b.n	8001332 <_sbrk+0x52>
  }
  else
  {
    /* Heap overflow */
    errno = ENOMEM;
 8001324:	f002 f886 	bl	8003434 <__errno>
 8001328:	4603      	mov	r3, r0
 800132a:	220c      	movs	r2, #12
 800132c:	601a      	str	r2, [r3, #0]
    return ((caddr_t)-1);
 800132e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  }
}
 8001332:	4618      	mov	r0, r3
 8001334:	3710      	adds	r7, #16
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	20000444 	.word	0x20000444
 8001340:	20000448 	.word	0x20000448
 8001344:	2000ffc0 	.word	0x2000ffc0

08001348 <_init>:

/* Init */
void _init(void)
{}
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
 800134c:	bf00      	nop
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr
	...

08001358 <log10>:
 8001358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800135a:	4604      	mov	r4, r0
 800135c:	460d      	mov	r5, r1
 800135e:	f000 f89f 	bl	80014a0 <__ieee754_log10>
 8001362:	4622      	mov	r2, r4
 8001364:	4606      	mov	r6, r0
 8001366:	460f      	mov	r7, r1
 8001368:	462b      	mov	r3, r5
 800136a:	4620      	mov	r0, r4
 800136c:	4629      	mov	r1, r5
 800136e:	f002 f803 	bl	8003378 <__aeabi_dcmpun>
 8001372:	b998      	cbnz	r0, 800139c <log10+0x44>
 8001374:	2200      	movs	r2, #0
 8001376:	2300      	movs	r3, #0
 8001378:	4620      	mov	r0, r4
 800137a:	4629      	mov	r1, r5
 800137c:	f001 ffde 	bl	800333c <__aeabi_dcmple>
 8001380:	b160      	cbz	r0, 800139c <log10+0x44>
 8001382:	2200      	movs	r2, #0
 8001384:	2300      	movs	r3, #0
 8001386:	4620      	mov	r0, r4
 8001388:	4629      	mov	r1, r5
 800138a:	f001 ffc3 	bl	8003314 <__aeabi_dcmpeq>
 800138e:	b140      	cbz	r0, 80013a2 <log10+0x4a>
 8001390:	f002 f850 	bl	8003434 <__errno>
 8001394:	4f08      	ldr	r7, [pc, #32]	; (80013b8 <log10+0x60>)
 8001396:	2322      	movs	r3, #34	; 0x22
 8001398:	6003      	str	r3, [r0, #0]
 800139a:	2600      	movs	r6, #0
 800139c:	4630      	mov	r0, r6
 800139e:	4639      	mov	r1, r7
 80013a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80013a2:	f002 f847 	bl	8003434 <__errno>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2221      	movs	r2, #33	; 0x21
 80013aa:	601a      	str	r2, [r3, #0]
 80013ac:	4803      	ldr	r0, [pc, #12]	; (80013bc <log10+0x64>)
 80013ae:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80013b2:	f000 bfdf 	b.w	8002374 <nan>
 80013b6:	bf00      	nop
 80013b8:	fff00000 	.word	0xfff00000
 80013bc:	080034ac 	.word	0x080034ac

080013c0 <pow>:
 80013c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80013c4:	4614      	mov	r4, r2
 80013c6:	461d      	mov	r5, r3
 80013c8:	4680      	mov	r8, r0
 80013ca:	4689      	mov	r9, r1
 80013cc:	f000 f8f4 	bl	80015b8 <__ieee754_pow>
 80013d0:	4622      	mov	r2, r4
 80013d2:	4606      	mov	r6, r0
 80013d4:	460f      	mov	r7, r1
 80013d6:	462b      	mov	r3, r5
 80013d8:	4620      	mov	r0, r4
 80013da:	4629      	mov	r1, r5
 80013dc:	f001 ffcc 	bl	8003378 <__aeabi_dcmpun>
 80013e0:	b978      	cbnz	r0, 8001402 <pow+0x42>
 80013e2:	2200      	movs	r2, #0
 80013e4:	2300      	movs	r3, #0
 80013e6:	4640      	mov	r0, r8
 80013e8:	4649      	mov	r1, r9
 80013ea:	f001 ff93 	bl	8003314 <__aeabi_dcmpeq>
 80013ee:	b1d8      	cbz	r0, 8001428 <pow+0x68>
 80013f0:	2200      	movs	r2, #0
 80013f2:	2300      	movs	r3, #0
 80013f4:	4620      	mov	r0, r4
 80013f6:	4629      	mov	r1, r5
 80013f8:	f001 ff8c 	bl	8003314 <__aeabi_dcmpeq>
 80013fc:	b128      	cbz	r0, 800140a <pow+0x4a>
 80013fe:	4f26      	ldr	r7, [pc, #152]	; (8001498 <pow+0xd8>)
 8001400:	2600      	movs	r6, #0
 8001402:	4630      	mov	r0, r6
 8001404:	4639      	mov	r1, r7
 8001406:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800140a:	4620      	mov	r0, r4
 800140c:	4629      	mov	r1, r5
 800140e:	f000 ffab 	bl	8002368 <finite>
 8001412:	2800      	cmp	r0, #0
 8001414:	d0f5      	beq.n	8001402 <pow+0x42>
 8001416:	4620      	mov	r0, r4
 8001418:	4629      	mov	r1, r5
 800141a:	2200      	movs	r2, #0
 800141c:	2300      	movs	r3, #0
 800141e:	f001 ff83 	bl	8003328 <__aeabi_dcmplt>
 8001422:	2800      	cmp	r0, #0
 8001424:	d0ed      	beq.n	8001402 <pow+0x42>
 8001426:	e02c      	b.n	8001482 <pow+0xc2>
 8001428:	4630      	mov	r0, r6
 800142a:	4639      	mov	r1, r7
 800142c:	f000 ff9c 	bl	8002368 <finite>
 8001430:	b1a0      	cbz	r0, 800145c <pow+0x9c>
 8001432:	2200      	movs	r2, #0
 8001434:	2300      	movs	r3, #0
 8001436:	4630      	mov	r0, r6
 8001438:	4639      	mov	r1, r7
 800143a:	f001 ff6b 	bl	8003314 <__aeabi_dcmpeq>
 800143e:	2800      	cmp	r0, #0
 8001440:	d0df      	beq.n	8001402 <pow+0x42>
 8001442:	4640      	mov	r0, r8
 8001444:	4649      	mov	r1, r9
 8001446:	f000 ff8f 	bl	8002368 <finite>
 800144a:	2800      	cmp	r0, #0
 800144c:	d0d9      	beq.n	8001402 <pow+0x42>
 800144e:	4620      	mov	r0, r4
 8001450:	4629      	mov	r1, r5
 8001452:	f000 ff89 	bl	8002368 <finite>
 8001456:	2800      	cmp	r0, #0
 8001458:	d0d3      	beq.n	8001402 <pow+0x42>
 800145a:	e012      	b.n	8001482 <pow+0xc2>
 800145c:	4640      	mov	r0, r8
 800145e:	4649      	mov	r1, r9
 8001460:	f000 ff82 	bl	8002368 <finite>
 8001464:	2800      	cmp	r0, #0
 8001466:	d0e4      	beq.n	8001432 <pow+0x72>
 8001468:	4620      	mov	r0, r4
 800146a:	4629      	mov	r1, r5
 800146c:	f000 ff7c 	bl	8002368 <finite>
 8001470:	2800      	cmp	r0, #0
 8001472:	d0de      	beq.n	8001432 <pow+0x72>
 8001474:	4632      	mov	r2, r6
 8001476:	463b      	mov	r3, r7
 8001478:	4630      	mov	r0, r6
 800147a:	4639      	mov	r1, r7
 800147c:	f001 ff7c 	bl	8003378 <__aeabi_dcmpun>
 8001480:	b920      	cbnz	r0, 800148c <pow+0xcc>
 8001482:	f001 ffd7 	bl	8003434 <__errno>
 8001486:	2322      	movs	r3, #34	; 0x22
 8001488:	6003      	str	r3, [r0, #0]
 800148a:	e7ba      	b.n	8001402 <pow+0x42>
 800148c:	f001 ffd2 	bl	8003434 <__errno>
 8001490:	2321      	movs	r3, #33	; 0x21
 8001492:	6003      	str	r3, [r0, #0]
 8001494:	e7b5      	b.n	8001402 <pow+0x42>
 8001496:	bf00      	nop
 8001498:	3ff00000 	.word	0x3ff00000
 800149c:	00000000 	.word	0x00000000

080014a0 <__ieee754_log10>:
 80014a0:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80014a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80014a8:	4604      	mov	r4, r0
 80014aa:	460d      	mov	r5, r1
 80014ac:	460b      	mov	r3, r1
 80014ae:	da19      	bge.n	80014e4 <__ieee754_log10+0x44>
 80014b0:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80014b4:	4302      	orrs	r2, r0
 80014b6:	d059      	beq.n	800156c <__ieee754_log10+0xcc>
 80014b8:	2900      	cmp	r1, #0
 80014ba:	db5f      	blt.n	800157c <__ieee754_log10+0xdc>
 80014bc:	4b3a      	ldr	r3, [pc, #232]	; (80015a8 <__ieee754_log10+0x108>)
 80014be:	2200      	movs	r2, #0
 80014c0:	f001 fcc0 	bl	8002e44 <__aeabi_dmul>
 80014c4:	4a39      	ldr	r2, [pc, #228]	; (80015ac <__ieee754_log10+0x10c>)
 80014c6:	460b      	mov	r3, r1
 80014c8:	4293      	cmp	r3, r2
 80014ca:	460d      	mov	r5, r1
 80014cc:	4604      	mov	r4, r0
 80014ce:	f06f 0135 	mvn.w	r1, #53	; 0x35
 80014d2:	dd0c      	ble.n	80014ee <__ieee754_log10+0x4e>
 80014d4:	4622      	mov	r2, r4
 80014d6:	462b      	mov	r3, r5
 80014d8:	4620      	mov	r0, r4
 80014da:	4629      	mov	r1, r5
 80014dc:	f001 fafc 	bl	8002ad8 <__adddf3>
 80014e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80014e4:	4a31      	ldr	r2, [pc, #196]	; (80015ac <__ieee754_log10+0x10c>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	f04f 0100 	mov.w	r1, #0
 80014ec:	dcf2      	bgt.n	80014d4 <__ieee754_log10+0x34>
 80014ee:	1518      	asrs	r0, r3, #20
 80014f0:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 80014f4:	4408      	add	r0, r1
 80014f6:	0fc7      	lsrs	r7, r0, #31
 80014f8:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 80014fc:	f3c3 0613 	ubfx	r6, r3, #0, #20
 8001500:	f001 fc36 	bl	8002d70 <__aeabi_i2d>
 8001504:	f5c7 737f 	rsb	r3, r7, #1020	; 0x3fc
 8001508:	3303      	adds	r3, #3
 800150a:	ea46 5503 	orr.w	r5, r6, r3, lsl #20
 800150e:	460f      	mov	r7, r1
 8001510:	4606      	mov	r6, r0
 8001512:	4629      	mov	r1, r5
 8001514:	4620      	mov	r0, r4
 8001516:	f000 ffaf 	bl	8002478 <__ieee754_log>
 800151a:	a31d      	add	r3, pc, #116	; (adr r3, 8001590 <__ieee754_log10+0xf0>)
 800151c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001520:	4680      	mov	r8, r0
 8001522:	4689      	mov	r9, r1
 8001524:	4630      	mov	r0, r6
 8001526:	4639      	mov	r1, r7
 8001528:	f001 fc8c 	bl	8002e44 <__aeabi_dmul>
 800152c:	a31a      	add	r3, pc, #104	; (adr r3, 8001598 <__ieee754_log10+0xf8>)
 800152e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001532:	4604      	mov	r4, r0
 8001534:	460d      	mov	r5, r1
 8001536:	4640      	mov	r0, r8
 8001538:	4649      	mov	r1, r9
 800153a:	f001 fc83 	bl	8002e44 <__aeabi_dmul>
 800153e:	4602      	mov	r2, r0
 8001540:	460b      	mov	r3, r1
 8001542:	4620      	mov	r0, r4
 8001544:	4629      	mov	r1, r5
 8001546:	f001 fac7 	bl	8002ad8 <__adddf3>
 800154a:	a315      	add	r3, pc, #84	; (adr r3, 80015a0 <__ieee754_log10+0x100>)
 800154c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001550:	4604      	mov	r4, r0
 8001552:	460d      	mov	r5, r1
 8001554:	4630      	mov	r0, r6
 8001556:	4639      	mov	r1, r7
 8001558:	f001 fc74 	bl	8002e44 <__aeabi_dmul>
 800155c:	4602      	mov	r2, r0
 800155e:	460b      	mov	r3, r1
 8001560:	4620      	mov	r0, r4
 8001562:	4629      	mov	r1, r5
 8001564:	f001 fab8 	bl	8002ad8 <__adddf3>
 8001568:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800156c:	2200      	movs	r2, #0
 800156e:	2300      	movs	r3, #0
 8001570:	490f      	ldr	r1, [pc, #60]	; (80015b0 <__ieee754_log10+0x110>)
 8001572:	2000      	movs	r0, #0
 8001574:	f001 fd90 	bl	8003098 <__aeabi_ddiv>
 8001578:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800157c:	4602      	mov	r2, r0
 800157e:	f001 faa9 	bl	8002ad4 <__aeabi_dsub>
 8001582:	2200      	movs	r2, #0
 8001584:	2300      	movs	r3, #0
 8001586:	f001 fd87 	bl	8003098 <__aeabi_ddiv>
 800158a:	e7a9      	b.n	80014e0 <__ieee754_log10+0x40>
 800158c:	f3af 8000 	nop.w
 8001590:	11f12b36 	.word	0x11f12b36
 8001594:	3d59fef3 	.word	0x3d59fef3
 8001598:	1526e50e 	.word	0x1526e50e
 800159c:	3fdbcb7b 	.word	0x3fdbcb7b
 80015a0:	509f6000 	.word	0x509f6000
 80015a4:	3fd34413 	.word	0x3fd34413
 80015a8:	43500000 	.word	0x43500000
 80015ac:	7fefffff 	.word	0x7fefffff
 80015b0:	c3500000 	.word	0xc3500000
 80015b4:	00000000 	.word	0x00000000

080015b8 <__ieee754_pow>:
 80015b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80015bc:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
 80015c0:	4688      	mov	r8, r1
 80015c2:	ea5b 0102 	orrs.w	r1, fp, r2
 80015c6:	b093      	sub	sp, #76	; 0x4c
 80015c8:	4614      	mov	r4, r2
 80015ca:	461d      	mov	r5, r3
 80015cc:	4607      	mov	r7, r0
 80015ce:	d111      	bne.n	80015f4 <__ieee754_pow+0x3c>
 80015d0:	1803      	adds	r3, r0, r0
 80015d2:	f488 2200 	eor.w	r2, r8, #524288	; 0x80000
 80015d6:	4875      	ldr	r0, [pc, #468]	; (80017ac <__ieee754_pow+0x1f4>)
 80015d8:	4152      	adcs	r2, r2
 80015da:	4299      	cmp	r1, r3
 80015dc:	eb70 0302 	sbcs.w	r3, r0, r2
 80015e0:	d220      	bcs.n	8001624 <__ieee754_pow+0x6c>
 80015e2:	4638      	mov	r0, r7
 80015e4:	4641      	mov	r1, r8
 80015e6:	4622      	mov	r2, r4
 80015e8:	462b      	mov	r3, r5
 80015ea:	f001 fa75 	bl	8002ad8 <__adddf3>
 80015ee:	b013      	add	sp, #76	; 0x4c
 80015f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80015f4:	4610      	mov	r0, r2
 80015f6:	4a6e      	ldr	r2, [pc, #440]	; (80017b0 <__ieee754_pow+0x1f8>)
 80015f8:	f028 4900 	bic.w	r9, r8, #2147483648	; 0x80000000
 80015fc:	4591      	cmp	r9, r2
 80015fe:	469a      	mov	sl, r3
 8001600:	4646      	mov	r6, r8
 8001602:	463b      	mov	r3, r7
 8001604:	dd15      	ble.n	8001632 <__ieee754_pow+0x7a>
 8001606:	f106 4640 	add.w	r6, r6, #3221225472	; 0xc0000000
 800160a:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 800160e:	431e      	orrs	r6, r3
 8001610:	d1e7      	bne.n	80015e2 <__ieee754_pow+0x2a>
 8001612:	1923      	adds	r3, r4, r4
 8001614:	4965      	ldr	r1, [pc, #404]	; (80017ac <__ieee754_pow+0x1f4>)
 8001616:	f485 2200 	eor.w	r2, r5, #524288	; 0x80000
 800161a:	4152      	adcs	r2, r2
 800161c:	429e      	cmp	r6, r3
 800161e:	eb71 0302 	sbcs.w	r3, r1, r2
 8001622:	d3de      	bcc.n	80015e2 <__ieee754_pow+0x2a>
 8001624:	4c63      	ldr	r4, [pc, #396]	; (80017b4 <__ieee754_pow+0x1fc>)
 8001626:	2300      	movs	r3, #0
 8001628:	4618      	mov	r0, r3
 800162a:	4621      	mov	r1, r4
 800162c:	b013      	add	sp, #76	; 0x4c
 800162e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001632:	d03e      	beq.n	80016b2 <__ieee754_pow+0xfa>
 8001634:	4a5e      	ldr	r2, [pc, #376]	; (80017b0 <__ieee754_pow+0x1f8>)
 8001636:	4593      	cmp	fp, r2
 8001638:	dce5      	bgt.n	8001606 <__ieee754_pow+0x4e>
 800163a:	f000 8088 	beq.w	800174e <__ieee754_pow+0x196>
 800163e:	2e00      	cmp	r6, #0
 8001640:	db69      	blt.n	8001716 <__ieee754_pow+0x15e>
 8001642:	2200      	movs	r2, #0
 8001644:	9200      	str	r2, [sp, #0]
 8001646:	b978      	cbnz	r0, 8001668 <__ieee754_pow+0xb0>
 8001648:	4a59      	ldr	r2, [pc, #356]	; (80017b0 <__ieee754_pow+0x1f8>)
 800164a:	4593      	cmp	fp, r2
 800164c:	f000 8083 	beq.w	8001756 <__ieee754_pow+0x19e>
 8001650:	4a58      	ldr	r2, [pc, #352]	; (80017b4 <__ieee754_pow+0x1fc>)
 8001652:	4593      	cmp	fp, r2
 8001654:	f000 8097 	beq.w	8001786 <__ieee754_pow+0x1ce>
 8001658:	f1ba 4f80 	cmp.w	sl, #1073741824	; 0x40000000
 800165c:	f000 8495 	beq.w	8001f8a <__ieee754_pow+0x9d2>
 8001660:	4a55      	ldr	r2, [pc, #340]	; (80017b8 <__ieee754_pow+0x200>)
 8001662:	4592      	cmp	sl, r2
 8001664:	f000 83b5 	beq.w	8001dd2 <__ieee754_pow+0x81a>
 8001668:	4638      	mov	r0, r7
 800166a:	4641      	mov	r1, r8
 800166c:	9302      	str	r3, [sp, #8]
 800166e:	f000 fe77 	bl	8002360 <fabs>
 8001672:	9b02      	ldr	r3, [sp, #8]
 8001674:	b34b      	cbz	r3, 80016ca <__ieee754_pow+0x112>
 8001676:	9a00      	ldr	r2, [sp, #0]
 8001678:	0ff3      	lsrs	r3, r6, #31
 800167a:	3b01      	subs	r3, #1
 800167c:	930a      	str	r3, [sp, #40]	; 0x28
 800167e:	4313      	orrs	r3, r2
 8001680:	f000 8088 	beq.w	8001794 <__ieee754_pow+0x1dc>
 8001684:	4b4d      	ldr	r3, [pc, #308]	; (80017bc <__ieee754_pow+0x204>)
 8001686:	459b      	cmp	fp, r3
 8001688:	f340 809e 	ble.w	80017c8 <__ieee754_pow+0x210>
 800168c:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8001690:	459b      	cmp	fp, r3
 8001692:	4b4b      	ldr	r3, [pc, #300]	; (80017c0 <__ieee754_pow+0x208>)
 8001694:	f340 840c 	ble.w	8001eb0 <__ieee754_pow+0x8f8>
 8001698:	4599      	cmp	r9, r3
 800169a:	f340 8486 	ble.w	8001faa <__ieee754_pow+0x9f2>
 800169e:	f1ba 0f00 	cmp.w	sl, #0
 80016a2:	f340 8486 	ble.w	8001fb2 <__ieee754_pow+0x9fa>
 80016a6:	2000      	movs	r0, #0
 80016a8:	b013      	add	sp, #76	; 0x4c
 80016aa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80016ae:	f000 bde5 	b.w	800227c <__math_oflow>
 80016b2:	2f00      	cmp	r7, #0
 80016b4:	d195      	bne.n	80015e2 <__ieee754_pow+0x2a>
 80016b6:	e7bd      	b.n	8001634 <__ieee754_pow+0x7c>
 80016b8:	4638      	mov	r0, r7
 80016ba:	4641      	mov	r1, r8
 80016bc:	9300      	str	r3, [sp, #0]
 80016be:	f000 fe4f 	bl	8002360 <fabs>
 80016c2:	9b00      	ldr	r3, [sp, #0]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d165      	bne.n	8001794 <__ieee754_pow+0x1dc>
 80016c8:	9300      	str	r3, [sp, #0]
 80016ca:	f1b9 0f00 	cmp.w	r9, #0
 80016ce:	d004      	beq.n	80016da <__ieee754_pow+0x122>
 80016d0:	4b38      	ldr	r3, [pc, #224]	; (80017b4 <__ieee754_pow+0x1fc>)
 80016d2:	f026 4240 	bic.w	r2, r6, #3221225472	; 0xc0000000
 80016d6:	429a      	cmp	r2, r3
 80016d8:	d1cd      	bne.n	8001676 <__ieee754_pow+0xbe>
 80016da:	f1ba 0f00 	cmp.w	sl, #0
 80016de:	da05      	bge.n	80016ec <__ieee754_pow+0x134>
 80016e0:	4602      	mov	r2, r0
 80016e2:	460b      	mov	r3, r1
 80016e4:	2000      	movs	r0, #0
 80016e6:	4933      	ldr	r1, [pc, #204]	; (80017b4 <__ieee754_pow+0x1fc>)
 80016e8:	f001 fcd6 	bl	8003098 <__aeabi_ddiv>
 80016ec:	2e00      	cmp	r6, #0
 80016ee:	f6bf af7e 	bge.w	80015ee <__ieee754_pow+0x36>
 80016f2:	9b00      	ldr	r3, [sp, #0]
 80016f4:	f109 4940 	add.w	r9, r9, #3221225472	; 0xc0000000
 80016f8:	f509 1980 	add.w	r9, r9, #1048576	; 0x100000
 80016fc:	ea59 0303 	orrs.w	r3, r9, r3
 8001700:	f040 8467 	bne.w	8001fd2 <__ieee754_pow+0xa1a>
 8001704:	4602      	mov	r2, r0
 8001706:	460b      	mov	r3, r1
 8001708:	f001 f9e4 	bl	8002ad4 <__aeabi_dsub>
 800170c:	4602      	mov	r2, r0
 800170e:	460b      	mov	r3, r1
 8001710:	f001 fcc2 	bl	8003098 <__aeabi_ddiv>
 8001714:	e76b      	b.n	80015ee <__ieee754_pow+0x36>
 8001716:	4a2b      	ldr	r2, [pc, #172]	; (80017c4 <__ieee754_pow+0x20c>)
 8001718:	4593      	cmp	fp, r2
 800171a:	dc2e      	bgt.n	800177a <__ieee754_pow+0x1c2>
 800171c:	f1a2 7254 	sub.w	r2, r2, #55574528	; 0x3500000
 8001720:	4593      	cmp	fp, r2
 8001722:	dd0f      	ble.n	8001744 <__ieee754_pow+0x18c>
 8001724:	ea4f 522b 	mov.w	r2, fp, asr #20
 8001728:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800172c:	2a14      	cmp	r2, #20
 800172e:	f340 8442 	ble.w	8001fb6 <__ieee754_pow+0x9fe>
 8001732:	f1c2 0234 	rsb	r2, r2, #52	; 0x34
 8001736:	fa20 f102 	lsr.w	r1, r0, r2
 800173a:	fa01 f202 	lsl.w	r2, r1, r2
 800173e:	4282      	cmp	r2, r0
 8001740:	f000 8470 	beq.w	8002024 <__ieee754_pow+0xa6c>
 8001744:	2200      	movs	r2, #0
 8001746:	9200      	str	r2, [sp, #0]
 8001748:	2800      	cmp	r0, #0
 800174a:	d081      	beq.n	8001650 <__ieee754_pow+0x98>
 800174c:	e78c      	b.n	8001668 <__ieee754_pow+0xb0>
 800174e:	2800      	cmp	r0, #0
 8001750:	f43f af75 	beq.w	800163e <__ieee754_pow+0x86>
 8001754:	e757      	b.n	8001606 <__ieee754_pow+0x4e>
 8001756:	f109 4240 	add.w	r2, r9, #3221225472	; 0xc0000000
 800175a:	f502 1280 	add.w	r2, r2, #1048576	; 0x100000
 800175e:	4313      	orrs	r3, r2
 8001760:	f43f af60 	beq.w	8001624 <__ieee754_pow+0x6c>
 8001764:	4b16      	ldr	r3, [pc, #88]	; (80017c0 <__ieee754_pow+0x208>)
 8001766:	4599      	cmp	r9, r3
 8001768:	f340 8367 	ble.w	8001e3a <__ieee754_pow+0x882>
 800176c:	f1ba 0f00 	cmp.w	sl, #0
 8001770:	f2c0 835d 	blt.w	8001e2e <__ieee754_pow+0x876>
 8001774:	4620      	mov	r0, r4
 8001776:	4629      	mov	r1, r5
 8001778:	e739      	b.n	80015ee <__ieee754_pow+0x36>
 800177a:	2202      	movs	r2, #2
 800177c:	9200      	str	r2, [sp, #0]
 800177e:	2800      	cmp	r0, #0
 8001780:	f43f af62 	beq.w	8001648 <__ieee754_pow+0x90>
 8001784:	e770      	b.n	8001668 <__ieee754_pow+0xb0>
 8001786:	f1ba 0f00 	cmp.w	sl, #0
 800178a:	f2c0 83f6 	blt.w	8001f7a <__ieee754_pow+0x9c2>
 800178e:	4638      	mov	r0, r7
 8001790:	4641      	mov	r1, r8
 8001792:	e72c      	b.n	80015ee <__ieee754_pow+0x36>
 8001794:	463a      	mov	r2, r7
 8001796:	4643      	mov	r3, r8
 8001798:	4638      	mov	r0, r7
 800179a:	4641      	mov	r1, r8
 800179c:	f001 f99a 	bl	8002ad4 <__aeabi_dsub>
 80017a0:	4602      	mov	r2, r0
 80017a2:	460b      	mov	r3, r1
 80017a4:	f001 fc78 	bl	8003098 <__aeabi_ddiv>
 80017a8:	e721      	b.n	80015ee <__ieee754_pow+0x36>
 80017aa:	bf00      	nop
 80017ac:	fff00000 	.word	0xfff00000
 80017b0:	7ff00000 	.word	0x7ff00000
 80017b4:	3ff00000 	.word	0x3ff00000
 80017b8:	3fe00000 	.word	0x3fe00000
 80017bc:	41e00000 	.word	0x41e00000
 80017c0:	3fefffff 	.word	0x3fefffff
 80017c4:	433fffff 	.word	0x433fffff
 80017c8:	4bd5      	ldr	r3, [pc, #852]	; (8001b20 <__ieee754_pow+0x568>)
 80017ca:	4033      	ands	r3, r6
 80017cc:	2200      	movs	r2, #0
 80017ce:	b92b      	cbnz	r3, 80017dc <__ieee754_pow+0x224>
 80017d0:	4bd4      	ldr	r3, [pc, #848]	; (8001b24 <__ieee754_pow+0x56c>)
 80017d2:	f001 fb37 	bl	8002e44 <__aeabi_dmul>
 80017d6:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80017da:	4689      	mov	r9, r1
 80017dc:	ea4f 5329 	mov.w	r3, r9, asr #20
 80017e0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80017e4:	189a      	adds	r2, r3, r2
 80017e6:	4bd0      	ldr	r3, [pc, #832]	; (8001b28 <__ieee754_pow+0x570>)
 80017e8:	920b      	str	r2, [sp, #44]	; 0x2c
 80017ea:	f3c9 0913 	ubfx	r9, r9, #0, #20
 80017ee:	f049 567f 	orr.w	r6, r9, #1069547520	; 0x3fc00000
 80017f2:	4599      	cmp	r9, r3
 80017f4:	f446 1640 	orr.w	r6, r6, #3145728	; 0x300000
 80017f8:	dd07      	ble.n	800180a <__ieee754_pow+0x252>
 80017fa:	4bcc      	ldr	r3, [pc, #816]	; (8001b2c <__ieee754_pow+0x574>)
 80017fc:	4599      	cmp	r9, r3
 80017fe:	f340 83f1 	ble.w	8001fe4 <__ieee754_pow+0xa2c>
 8001802:	3201      	adds	r2, #1
 8001804:	920b      	str	r2, [sp, #44]	; 0x2c
 8001806:	f5a6 1680 	sub.w	r6, r6, #1048576	; 0x100000
 800180a:	2200      	movs	r2, #0
 800180c:	2300      	movs	r3, #0
 800180e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8001812:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8001816:	4bc6      	ldr	r3, [pc, #792]	; (8001b30 <__ieee754_pow+0x578>)
 8001818:	2200      	movs	r2, #0
 800181a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800181e:	2700      	movs	r7, #0
 8001820:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8001824:	4631      	mov	r1, r6
 8001826:	4682      	mov	sl, r0
 8001828:	f001 f954 	bl	8002ad4 <__aeabi_dsub>
 800182c:	46b3      	mov	fp, r6
 800182e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8001832:	4680      	mov	r8, r0
 8001834:	4689      	mov	r9, r1
 8001836:	4650      	mov	r0, sl
 8001838:	4631      	mov	r1, r6
 800183a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	; 0x30
 800183e:	f001 f94b 	bl	8002ad8 <__adddf3>
 8001842:	4602      	mov	r2, r0
 8001844:	460b      	mov	r3, r1
 8001846:	2000      	movs	r0, #0
 8001848:	49b9      	ldr	r1, [pc, #740]	; (8001b30 <__ieee754_pow+0x578>)
 800184a:	f001 fc25 	bl	8003098 <__aeabi_ddiv>
 800184e:	460a      	mov	r2, r1
 8001850:	4601      	mov	r1, r0
 8001852:	e9cd 120e 	strd	r1, r2, [sp, #56]	; 0x38
 8001856:	4613      	mov	r3, r2
 8001858:	4649      	mov	r1, r9
 800185a:	4602      	mov	r2, r0
 800185c:	4640      	mov	r0, r8
 800185e:	f001 faf1 	bl	8002e44 <__aeabi_dmul>
 8001862:	460a      	mov	r2, r1
 8001864:	4683      	mov	fp, r0
 8001866:	4694      	mov	ip, r2
 8001868:	e9cd bc02 	strd	fp, ip, [sp, #8]
 800186c:	f04f 0c00 	mov.w	ip, #0
 8001870:	f8cd c008 	str.w	ip, [sp, #8]
 8001874:	1076      	asrs	r6, r6, #1
 8001876:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
 800187a:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
 800187e:	4601      	mov	r1, r0
 8001880:	f506 2300 	add.w	r3, r6, #524288	; 0x80000
 8001884:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8001888:	2000      	movs	r0, #0
 800188a:	19d9      	adds	r1, r3, r7
 800188c:	4606      	mov	r6, r0
 800188e:	460f      	mov	r7, r1
 8001890:	4602      	mov	r2, r0
 8001892:	460b      	mov	r3, r1
 8001894:	4650      	mov	r0, sl
 8001896:	4659      	mov	r1, fp
 8001898:	f001 fad4 	bl	8002e44 <__aeabi_dmul>
 800189c:	4602      	mov	r2, r0
 800189e:	460b      	mov	r3, r1
 80018a0:	4640      	mov	r0, r8
 80018a2:	4649      	mov	r1, r9
 80018a4:	f001 f916 	bl	8002ad4 <__aeabi_dsub>
 80018a8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80018ac:	4680      	mov	r8, r0
 80018ae:	4689      	mov	r9, r1
 80018b0:	4630      	mov	r0, r6
 80018b2:	4639      	mov	r1, r7
 80018b4:	f001 f90e 	bl	8002ad4 <__aeabi_dsub>
 80018b8:	4602      	mov	r2, r0
 80018ba:	460b      	mov	r3, r1
 80018bc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80018c0:	f001 f908 	bl	8002ad4 <__aeabi_dsub>
 80018c4:	4652      	mov	r2, sl
 80018c6:	465b      	mov	r3, fp
 80018c8:	f001 fabc 	bl	8002e44 <__aeabi_dmul>
 80018cc:	4602      	mov	r2, r0
 80018ce:	460b      	mov	r3, r1
 80018d0:	4640      	mov	r0, r8
 80018d2:	4649      	mov	r1, r9
 80018d4:	f001 f8fe 	bl	8002ad4 <__aeabi_dsub>
 80018d8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80018dc:	f001 fab2 	bl	8002e44 <__aeabi_dmul>
 80018e0:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 80018e4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80018e8:	4632      	mov	r2, r6
 80018ea:	463b      	mov	r3, r7
 80018ec:	4630      	mov	r0, r6
 80018ee:	4639      	mov	r1, r7
 80018f0:	f001 faa8 	bl	8002e44 <__aeabi_dmul>
 80018f4:	a378      	add	r3, pc, #480	; (adr r3, 8001ad8 <__ieee754_pow+0x520>)
 80018f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018fa:	4606      	mov	r6, r0
 80018fc:	460f      	mov	r7, r1
 80018fe:	f001 faa1 	bl	8002e44 <__aeabi_dmul>
 8001902:	a377      	add	r3, pc, #476	; (adr r3, 8001ae0 <__ieee754_pow+0x528>)
 8001904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001908:	f001 f8e6 	bl	8002ad8 <__adddf3>
 800190c:	4632      	mov	r2, r6
 800190e:	463b      	mov	r3, r7
 8001910:	f001 fa98 	bl	8002e44 <__aeabi_dmul>
 8001914:	a374      	add	r3, pc, #464	; (adr r3, 8001ae8 <__ieee754_pow+0x530>)
 8001916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800191a:	f001 f8dd 	bl	8002ad8 <__adddf3>
 800191e:	4632      	mov	r2, r6
 8001920:	463b      	mov	r3, r7
 8001922:	f001 fa8f 	bl	8002e44 <__aeabi_dmul>
 8001926:	a372      	add	r3, pc, #456	; (adr r3, 8001af0 <__ieee754_pow+0x538>)
 8001928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800192c:	f001 f8d4 	bl	8002ad8 <__adddf3>
 8001930:	4632      	mov	r2, r6
 8001932:	463b      	mov	r3, r7
 8001934:	f001 fa86 	bl	8002e44 <__aeabi_dmul>
 8001938:	a36f      	add	r3, pc, #444	; (adr r3, 8001af8 <__ieee754_pow+0x540>)
 800193a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800193e:	f001 f8cb 	bl	8002ad8 <__adddf3>
 8001942:	4632      	mov	r2, r6
 8001944:	463b      	mov	r3, r7
 8001946:	f001 fa7d 	bl	8002e44 <__aeabi_dmul>
 800194a:	a36d      	add	r3, pc, #436	; (adr r3, 8001b00 <__ieee754_pow+0x548>)
 800194c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001950:	f001 f8c2 	bl	8002ad8 <__adddf3>
 8001954:	4632      	mov	r2, r6
 8001956:	4680      	mov	r8, r0
 8001958:	4689      	mov	r9, r1
 800195a:	463b      	mov	r3, r7
 800195c:	4630      	mov	r0, r6
 800195e:	4639      	mov	r1, r7
 8001960:	f001 fa70 	bl	8002e44 <__aeabi_dmul>
 8001964:	4602      	mov	r2, r0
 8001966:	460b      	mov	r3, r1
 8001968:	4640      	mov	r0, r8
 800196a:	4649      	mov	r1, r9
 800196c:	f001 fa6a 	bl	8002e44 <__aeabi_dmul>
 8001970:	4652      	mov	r2, sl
 8001972:	4606      	mov	r6, r0
 8001974:	460f      	mov	r7, r1
 8001976:	465b      	mov	r3, fp
 8001978:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800197c:	f001 f8ac 	bl	8002ad8 <__adddf3>
 8001980:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8001984:	f001 fa5e 	bl	8002e44 <__aeabi_dmul>
 8001988:	4632      	mov	r2, r6
 800198a:	463b      	mov	r3, r7
 800198c:	f001 f8a4 	bl	8002ad8 <__adddf3>
 8001990:	4652      	mov	r2, sl
 8001992:	4680      	mov	r8, r0
 8001994:	4689      	mov	r9, r1
 8001996:	465b      	mov	r3, fp
 8001998:	4650      	mov	r0, sl
 800199a:	4659      	mov	r1, fp
 800199c:	f001 fa52 	bl	8002e44 <__aeabi_dmul>
 80019a0:	4602      	mov	r2, r0
 80019a2:	460b      	mov	r3, r1
 80019a4:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80019a8:	4b62      	ldr	r3, [pc, #392]	; (8001b34 <__ieee754_pow+0x57c>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	f001 f894 	bl	8002ad8 <__adddf3>
 80019b0:	4642      	mov	r2, r8
 80019b2:	464b      	mov	r3, r9
 80019b4:	f001 f890 	bl	8002ad8 <__adddf3>
 80019b8:	2600      	movs	r6, #0
 80019ba:	460f      	mov	r7, r1
 80019bc:	4632      	mov	r2, r6
 80019be:	463b      	mov	r3, r7
 80019c0:	4650      	mov	r0, sl
 80019c2:	4659      	mov	r1, fp
 80019c4:	f001 fa3e 	bl	8002e44 <__aeabi_dmul>
 80019c8:	4b5a      	ldr	r3, [pc, #360]	; (8001b34 <__ieee754_pow+0x57c>)
 80019ca:	4682      	mov	sl, r0
 80019cc:	468b      	mov	fp, r1
 80019ce:	2200      	movs	r2, #0
 80019d0:	4630      	mov	r0, r6
 80019d2:	4639      	mov	r1, r7
 80019d4:	f001 f87e 	bl	8002ad4 <__aeabi_dsub>
 80019d8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80019dc:	f001 f87a 	bl	8002ad4 <__aeabi_dsub>
 80019e0:	4602      	mov	r2, r0
 80019e2:	460b      	mov	r3, r1
 80019e4:	4640      	mov	r0, r8
 80019e6:	4649      	mov	r1, r9
 80019e8:	f001 f874 	bl	8002ad4 <__aeabi_dsub>
 80019ec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80019f0:	f001 fa28 	bl	8002e44 <__aeabi_dmul>
 80019f4:	4632      	mov	r2, r6
 80019f6:	4680      	mov	r8, r0
 80019f8:	4689      	mov	r9, r1
 80019fa:	463b      	mov	r3, r7
 80019fc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8001a00:	f001 fa20 	bl	8002e44 <__aeabi_dmul>
 8001a04:	4602      	mov	r2, r0
 8001a06:	460b      	mov	r3, r1
 8001a08:	4640      	mov	r0, r8
 8001a0a:	4649      	mov	r1, r9
 8001a0c:	f001 f864 	bl	8002ad8 <__adddf3>
 8001a10:	4680      	mov	r8, r0
 8001a12:	4689      	mov	r9, r1
 8001a14:	4602      	mov	r2, r0
 8001a16:	460b      	mov	r3, r1
 8001a18:	4650      	mov	r0, sl
 8001a1a:	4659      	mov	r1, fp
 8001a1c:	f001 f85c 	bl	8002ad8 <__adddf3>
 8001a20:	2600      	movs	r6, #0
 8001a22:	a339      	add	r3, pc, #228	; (adr r3, 8001b08 <__ieee754_pow+0x550>)
 8001a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a28:	4630      	mov	r0, r6
 8001a2a:	460f      	mov	r7, r1
 8001a2c:	f001 fa0a 	bl	8002e44 <__aeabi_dmul>
 8001a30:	4652      	mov	r2, sl
 8001a32:	465b      	mov	r3, fp
 8001a34:	4682      	mov	sl, r0
 8001a36:	468b      	mov	fp, r1
 8001a38:	4630      	mov	r0, r6
 8001a3a:	4639      	mov	r1, r7
 8001a3c:	f001 f84a 	bl	8002ad4 <__aeabi_dsub>
 8001a40:	4602      	mov	r2, r0
 8001a42:	460b      	mov	r3, r1
 8001a44:	4640      	mov	r0, r8
 8001a46:	4649      	mov	r1, r9
 8001a48:	f001 f844 	bl	8002ad4 <__aeabi_dsub>
 8001a4c:	a330      	add	r3, pc, #192	; (adr r3, 8001b10 <__ieee754_pow+0x558>)
 8001a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a52:	f001 f9f7 	bl	8002e44 <__aeabi_dmul>
 8001a56:	a330      	add	r3, pc, #192	; (adr r3, 8001b18 <__ieee754_pow+0x560>)
 8001a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a5c:	4680      	mov	r8, r0
 8001a5e:	4689      	mov	r9, r1
 8001a60:	4630      	mov	r0, r6
 8001a62:	4639      	mov	r1, r7
 8001a64:	f001 f9ee 	bl	8002e44 <__aeabi_dmul>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	460b      	mov	r3, r1
 8001a6c:	4640      	mov	r0, r8
 8001a6e:	4649      	mov	r1, r9
 8001a70:	f001 f832 	bl	8002ad8 <__adddf3>
 8001a74:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8001a78:	f001 f82e 	bl	8002ad8 <__adddf3>
 8001a7c:	4680      	mov	r8, r0
 8001a7e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8001a80:	4689      	mov	r9, r1
 8001a82:	f001 f975 	bl	8002d70 <__aeabi_i2d>
 8001a86:	4642      	mov	r2, r8
 8001a88:	4606      	mov	r6, r0
 8001a8a:	460f      	mov	r7, r1
 8001a8c:	464b      	mov	r3, r9
 8001a8e:	4650      	mov	r0, sl
 8001a90:	4659      	mov	r1, fp
 8001a92:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8001a96:	f001 f81f 	bl	8002ad8 <__adddf3>
 8001a9a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8001a9e:	f001 f81b 	bl	8002ad8 <__adddf3>
 8001aa2:	4632      	mov	r2, r6
 8001aa4:	463b      	mov	r3, r7
 8001aa6:	f001 f817 	bl	8002ad8 <__adddf3>
 8001aaa:	f04f 0a00 	mov.w	sl, #0
 8001aae:	4632      	mov	r2, r6
 8001ab0:	463b      	mov	r3, r7
 8001ab2:	4650      	mov	r0, sl
 8001ab4:	468b      	mov	fp, r1
 8001ab6:	f001 f80d 	bl	8002ad4 <__aeabi_dsub>
 8001aba:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8001abe:	f001 f809 	bl	8002ad4 <__aeabi_dsub>
 8001ac2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8001ac6:	f001 f805 	bl	8002ad4 <__aeabi_dsub>
 8001aca:	4602      	mov	r2, r0
 8001acc:	460b      	mov	r3, r1
 8001ace:	4640      	mov	r0, r8
 8001ad0:	4649      	mov	r1, r9
 8001ad2:	f000 ffff 	bl	8002ad4 <__aeabi_dsub>
 8001ad6:	e02f      	b.n	8001b38 <__ieee754_pow+0x580>
 8001ad8:	4a454eef 	.word	0x4a454eef
 8001adc:	3fca7e28 	.word	0x3fca7e28
 8001ae0:	93c9db65 	.word	0x93c9db65
 8001ae4:	3fcd864a 	.word	0x3fcd864a
 8001ae8:	a91d4101 	.word	0xa91d4101
 8001aec:	3fd17460 	.word	0x3fd17460
 8001af0:	518f264d 	.word	0x518f264d
 8001af4:	3fd55555 	.word	0x3fd55555
 8001af8:	db6fabff 	.word	0xdb6fabff
 8001afc:	3fdb6db6 	.word	0x3fdb6db6
 8001b00:	33333303 	.word	0x33333303
 8001b04:	3fe33333 	.word	0x3fe33333
 8001b08:	e0000000 	.word	0xe0000000
 8001b0c:	3feec709 	.word	0x3feec709
 8001b10:	dc3a03fd 	.word	0xdc3a03fd
 8001b14:	3feec709 	.word	0x3feec709
 8001b18:	145b01f5 	.word	0x145b01f5
 8001b1c:	be3e2fe0 	.word	0xbe3e2fe0
 8001b20:	7ff00000 	.word	0x7ff00000
 8001b24:	43400000 	.word	0x43400000
 8001b28:	0003988e 	.word	0x0003988e
 8001b2c:	000bb679 	.word	0x000bb679
 8001b30:	3ff00000 	.word	0x3ff00000
 8001b34:	40080000 	.word	0x40080000
 8001b38:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001b3c:	9b00      	ldr	r3, [sp, #0]
 8001b3e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001b40:	3b01      	subs	r3, #1
 8001b42:	4313      	orrs	r3, r2
 8001b44:	bf0c      	ite	eq
 8001b46:	4bd4      	ldreq	r3, [pc, #848]	; (8001e98 <__ieee754_pow+0x8e0>)
 8001b48:	4bd4      	ldrne	r3, [pc, #848]	; (8001e9c <__ieee754_pow+0x8e4>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001b50:	2300      	movs	r3, #0
 8001b52:	e9cd 4500 	strd	r4, r5, [sp]
 8001b56:	9300      	str	r3, [sp, #0]
 8001b58:	e9dd 8900 	ldrd	r8, r9, [sp]
 8001b5c:	4620      	mov	r0, r4
 8001b5e:	4642      	mov	r2, r8
 8001b60:	464b      	mov	r3, r9
 8001b62:	4629      	mov	r1, r5
 8001b64:	f000 ffb6 	bl	8002ad4 <__aeabi_dsub>
 8001b68:	4652      	mov	r2, sl
 8001b6a:	465b      	mov	r3, fp
 8001b6c:	f001 f96a 	bl	8002e44 <__aeabi_dmul>
 8001b70:	4622      	mov	r2, r4
 8001b72:	4606      	mov	r6, r0
 8001b74:	460f      	mov	r7, r1
 8001b76:	462b      	mov	r3, r5
 8001b78:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8001b7c:	f001 f962 	bl	8002e44 <__aeabi_dmul>
 8001b80:	4602      	mov	r2, r0
 8001b82:	460b      	mov	r3, r1
 8001b84:	4630      	mov	r0, r6
 8001b86:	4639      	mov	r1, r7
 8001b88:	f000 ffa6 	bl	8002ad8 <__adddf3>
 8001b8c:	4642      	mov	r2, r8
 8001b8e:	464b      	mov	r3, r9
 8001b90:	4606      	mov	r6, r0
 8001b92:	460f      	mov	r7, r1
 8001b94:	4650      	mov	r0, sl
 8001b96:	4659      	mov	r1, fp
 8001b98:	f001 f954 	bl	8002e44 <__aeabi_dmul>
 8001b9c:	460b      	mov	r3, r1
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	4604      	mov	r4, r0
 8001ba2:	460d      	mov	r5, r1
 8001ba4:	4630      	mov	r0, r6
 8001ba6:	4639      	mov	r1, r7
 8001ba8:	f000 ff96 	bl	8002ad8 <__adddf3>
 8001bac:	4bbc      	ldr	r3, [pc, #752]	; (8001ea0 <__ieee754_pow+0x8e8>)
 8001bae:	4299      	cmp	r1, r3
 8001bb0:	4680      	mov	r8, r0
 8001bb2:	4689      	mov	r9, r1
 8001bb4:	468a      	mov	sl, r1
 8001bb6:	f340 8116 	ble.w	8001de6 <__ieee754_pow+0x82e>
 8001bba:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8001bbe:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8001bc2:	4303      	orrs	r3, r0
 8001bc4:	f040 8223 	bne.w	800200e <__ieee754_pow+0xa56>
 8001bc8:	a3a1      	add	r3, pc, #644	; (adr r3, 8001e50 <__ieee754_pow+0x898>)
 8001bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bce:	4630      	mov	r0, r6
 8001bd0:	4639      	mov	r1, r7
 8001bd2:	f000 ff81 	bl	8002ad8 <__adddf3>
 8001bd6:	4622      	mov	r2, r4
 8001bd8:	e9cd 0100 	strd	r0, r1, [sp]
 8001bdc:	462b      	mov	r3, r5
 8001bde:	4640      	mov	r0, r8
 8001be0:	4649      	mov	r1, r9
 8001be2:	f000 ff77 	bl	8002ad4 <__aeabi_dsub>
 8001be6:	4602      	mov	r2, r0
 8001be8:	460b      	mov	r3, r1
 8001bea:	e9dd 0100 	ldrd	r0, r1, [sp]
 8001bee:	f001 fbb9 	bl	8003364 <__aeabi_dcmpgt>
 8001bf2:	2800      	cmp	r0, #0
 8001bf4:	f040 820b 	bne.w	800200e <__ieee754_pow+0xa56>
 8001bf8:	f3ca 530a 	ubfx	r3, sl, #20, #11
 8001bfc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001c00:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8001c04:	fa42 f303 	asr.w	r3, r2, r3
 8001c08:	4453      	add	r3, sl
 8001c0a:	49a6      	ldr	r1, [pc, #664]	; (8001ea4 <__ieee754_pow+0x8ec>)
 8001c0c:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8001c10:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8001c14:	fa41 fc02 	asr.w	ip, r1, r2
 8001c18:	f3c3 0113 	ubfx	r1, r3, #0, #20
 8001c1c:	f1c2 0214 	rsb	r2, r2, #20
 8001c20:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8001c24:	fa41 fe02 	asr.w	lr, r1, r2
 8001c28:	2000      	movs	r0, #0
 8001c2a:	ea23 010c 	bic.w	r1, r3, ip
 8001c2e:	f1ba 0f00 	cmp.w	sl, #0
 8001c32:	f8cd e008 	str.w	lr, [sp, #8]
 8001c36:	4602      	mov	r2, r0
 8001c38:	460b      	mov	r3, r1
 8001c3a:	da02      	bge.n	8001c42 <__ieee754_pow+0x68a>
 8001c3c:	4671      	mov	r1, lr
 8001c3e:	4249      	negs	r1, r1
 8001c40:	9102      	str	r1, [sp, #8]
 8001c42:	4620      	mov	r0, r4
 8001c44:	4629      	mov	r1, r5
 8001c46:	f000 ff45 	bl	8002ad4 <__aeabi_dsub>
 8001c4a:	9b02      	ldr	r3, [sp, #8]
 8001c4c:	051b      	lsls	r3, r3, #20
 8001c4e:	9300      	str	r3, [sp, #0]
 8001c50:	4602      	mov	r2, r0
 8001c52:	460b      	mov	r3, r1
 8001c54:	4604      	mov	r4, r0
 8001c56:	460d      	mov	r5, r1
 8001c58:	4630      	mov	r0, r6
 8001c5a:	4639      	mov	r1, r7
 8001c5c:	f000 ff3c 	bl	8002ad8 <__adddf3>
 8001c60:	4689      	mov	r9, r1
 8001c62:	f04f 0800 	mov.w	r8, #0
 8001c66:	a37c      	add	r3, pc, #496	; (adr r3, 8001e58 <__ieee754_pow+0x8a0>)
 8001c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c6c:	4640      	mov	r0, r8
 8001c6e:	4649      	mov	r1, r9
 8001c70:	f001 f8e8 	bl	8002e44 <__aeabi_dmul>
 8001c74:	4622      	mov	r2, r4
 8001c76:	4682      	mov	sl, r0
 8001c78:	468b      	mov	fp, r1
 8001c7a:	462b      	mov	r3, r5
 8001c7c:	4640      	mov	r0, r8
 8001c7e:	4649      	mov	r1, r9
 8001c80:	f000 ff28 	bl	8002ad4 <__aeabi_dsub>
 8001c84:	4602      	mov	r2, r0
 8001c86:	460b      	mov	r3, r1
 8001c88:	4630      	mov	r0, r6
 8001c8a:	4639      	mov	r1, r7
 8001c8c:	f000 ff22 	bl	8002ad4 <__aeabi_dsub>
 8001c90:	a373      	add	r3, pc, #460	; (adr r3, 8001e60 <__ieee754_pow+0x8a8>)
 8001c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c96:	f001 f8d5 	bl	8002e44 <__aeabi_dmul>
 8001c9a:	a373      	add	r3, pc, #460	; (adr r3, 8001e68 <__ieee754_pow+0x8b0>)
 8001c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ca0:	4604      	mov	r4, r0
 8001ca2:	460d      	mov	r5, r1
 8001ca4:	4640      	mov	r0, r8
 8001ca6:	4649      	mov	r1, r9
 8001ca8:	f001 f8cc 	bl	8002e44 <__aeabi_dmul>
 8001cac:	4602      	mov	r2, r0
 8001cae:	460b      	mov	r3, r1
 8001cb0:	4620      	mov	r0, r4
 8001cb2:	4629      	mov	r1, r5
 8001cb4:	f000 ff10 	bl	8002ad8 <__adddf3>
 8001cb8:	4606      	mov	r6, r0
 8001cba:	460f      	mov	r7, r1
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	460b      	mov	r3, r1
 8001cc0:	4650      	mov	r0, sl
 8001cc2:	4659      	mov	r1, fp
 8001cc4:	f000 ff08 	bl	8002ad8 <__adddf3>
 8001cc8:	4652      	mov	r2, sl
 8001cca:	465b      	mov	r3, fp
 8001ccc:	4604      	mov	r4, r0
 8001cce:	460d      	mov	r5, r1
 8001cd0:	f000 ff00 	bl	8002ad4 <__aeabi_dsub>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	460b      	mov	r3, r1
 8001cd8:	4630      	mov	r0, r6
 8001cda:	4639      	mov	r1, r7
 8001cdc:	f000 fefa 	bl	8002ad4 <__aeabi_dsub>
 8001ce0:	4622      	mov	r2, r4
 8001ce2:	4682      	mov	sl, r0
 8001ce4:	468b      	mov	fp, r1
 8001ce6:	462b      	mov	r3, r5
 8001ce8:	4620      	mov	r0, r4
 8001cea:	4629      	mov	r1, r5
 8001cec:	f001 f8aa 	bl	8002e44 <__aeabi_dmul>
 8001cf0:	a35f      	add	r3, pc, #380	; (adr r3, 8001e70 <__ieee754_pow+0x8b8>)
 8001cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cf6:	4606      	mov	r6, r0
 8001cf8:	460f      	mov	r7, r1
 8001cfa:	f001 f8a3 	bl	8002e44 <__aeabi_dmul>
 8001cfe:	a35e      	add	r3, pc, #376	; (adr r3, 8001e78 <__ieee754_pow+0x8c0>)
 8001d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d04:	f000 fee6 	bl	8002ad4 <__aeabi_dsub>
 8001d08:	4632      	mov	r2, r6
 8001d0a:	463b      	mov	r3, r7
 8001d0c:	f001 f89a 	bl	8002e44 <__aeabi_dmul>
 8001d10:	a35b      	add	r3, pc, #364	; (adr r3, 8001e80 <__ieee754_pow+0x8c8>)
 8001d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d16:	f000 fedf 	bl	8002ad8 <__adddf3>
 8001d1a:	4632      	mov	r2, r6
 8001d1c:	463b      	mov	r3, r7
 8001d1e:	f001 f891 	bl	8002e44 <__aeabi_dmul>
 8001d22:	a359      	add	r3, pc, #356	; (adr r3, 8001e88 <__ieee754_pow+0x8d0>)
 8001d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d28:	f000 fed4 	bl	8002ad4 <__aeabi_dsub>
 8001d2c:	4632      	mov	r2, r6
 8001d2e:	463b      	mov	r3, r7
 8001d30:	f001 f888 	bl	8002e44 <__aeabi_dmul>
 8001d34:	a356      	add	r3, pc, #344	; (adr r3, 8001e90 <__ieee754_pow+0x8d8>)
 8001d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d3a:	f000 fecd 	bl	8002ad8 <__adddf3>
 8001d3e:	4632      	mov	r2, r6
 8001d40:	463b      	mov	r3, r7
 8001d42:	f001 f87f 	bl	8002e44 <__aeabi_dmul>
 8001d46:	4602      	mov	r2, r0
 8001d48:	460b      	mov	r3, r1
 8001d4a:	4620      	mov	r0, r4
 8001d4c:	4629      	mov	r1, r5
 8001d4e:	f000 fec1 	bl	8002ad4 <__aeabi_dsub>
 8001d52:	4606      	mov	r6, r0
 8001d54:	460f      	mov	r7, r1
 8001d56:	4602      	mov	r2, r0
 8001d58:	460b      	mov	r3, r1
 8001d5a:	4620      	mov	r0, r4
 8001d5c:	4629      	mov	r1, r5
 8001d5e:	f001 f871 	bl	8002e44 <__aeabi_dmul>
 8001d62:	2200      	movs	r2, #0
 8001d64:	4680      	mov	r8, r0
 8001d66:	4689      	mov	r9, r1
 8001d68:	4630      	mov	r0, r6
 8001d6a:	4639      	mov	r1, r7
 8001d6c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001d70:	f000 feb0 	bl	8002ad4 <__aeabi_dsub>
 8001d74:	4602      	mov	r2, r0
 8001d76:	460b      	mov	r3, r1
 8001d78:	4640      	mov	r0, r8
 8001d7a:	4649      	mov	r1, r9
 8001d7c:	f001 f98c 	bl	8003098 <__aeabi_ddiv>
 8001d80:	4652      	mov	r2, sl
 8001d82:	4606      	mov	r6, r0
 8001d84:	460f      	mov	r7, r1
 8001d86:	465b      	mov	r3, fp
 8001d88:	4620      	mov	r0, r4
 8001d8a:	4629      	mov	r1, r5
 8001d8c:	f001 f85a 	bl	8002e44 <__aeabi_dmul>
 8001d90:	4652      	mov	r2, sl
 8001d92:	465b      	mov	r3, fp
 8001d94:	f000 fea0 	bl	8002ad8 <__adddf3>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	460b      	mov	r3, r1
 8001d9c:	4630      	mov	r0, r6
 8001d9e:	4639      	mov	r1, r7
 8001da0:	f000 fe98 	bl	8002ad4 <__aeabi_dsub>
 8001da4:	4622      	mov	r2, r4
 8001da6:	462b      	mov	r3, r5
 8001da8:	f000 fe94 	bl	8002ad4 <__aeabi_dsub>
 8001dac:	4602      	mov	r2, r0
 8001dae:	460b      	mov	r3, r1
 8001db0:	2000      	movs	r0, #0
 8001db2:	493a      	ldr	r1, [pc, #232]	; (8001e9c <__ieee754_pow+0x8e4>)
 8001db4:	f000 fe8e 	bl	8002ad4 <__aeabi_dsub>
 8001db8:	9d00      	ldr	r5, [sp, #0]
 8001dba:	460c      	mov	r4, r1
 8001dbc:	442c      	add	r4, r5
 8001dbe:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8001dc2:	f2c0 8120 	blt.w	8002006 <__ieee754_pow+0xa4e>
 8001dc6:	4621      	mov	r1, r4
 8001dc8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8001dcc:	f001 f83a 	bl	8002e44 <__aeabi_dmul>
 8001dd0:	e40d      	b.n	80015ee <__ieee754_pow+0x36>
 8001dd2:	2e00      	cmp	r6, #0
 8001dd4:	f6ff ac48 	blt.w	8001668 <__ieee754_pow+0xb0>
 8001dd8:	4638      	mov	r0, r7
 8001dda:	4641      	mov	r1, r8
 8001ddc:	b013      	add	sp, #76	; 0x4c
 8001dde:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001de2:	f000 b955 	b.w	8002090 <__ieee754_sqrt>
 8001de6:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 8001ea8 <__ieee754_pow+0x8f0>
 8001dea:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8001dee:	4563      	cmp	r3, ip
 8001df0:	f340 80d3 	ble.w	8001f9a <__ieee754_pow+0x9e2>
 8001df4:	4b2d      	ldr	r3, [pc, #180]	; (8001eac <__ieee754_pow+0x8f4>)
 8001df6:	440b      	add	r3, r1
 8001df8:	4303      	orrs	r3, r0
 8001dfa:	d10a      	bne.n	8001e12 <__ieee754_pow+0x85a>
 8001dfc:	4622      	mov	r2, r4
 8001dfe:	462b      	mov	r3, r5
 8001e00:	f000 fe68 	bl	8002ad4 <__aeabi_dsub>
 8001e04:	4632      	mov	r2, r6
 8001e06:	463b      	mov	r3, r7
 8001e08:	f001 faa2 	bl	8003350 <__aeabi_dcmpge>
 8001e0c:	2800      	cmp	r0, #0
 8001e0e:	f43f aef3 	beq.w	8001bf8 <__ieee754_pow+0x640>
 8001e12:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8001e16:	2200      	movs	r2, #0
 8001e18:	2300      	movs	r3, #0
 8001e1a:	f001 fa85 	bl	8003328 <__aeabi_dcmplt>
 8001e1e:	3800      	subs	r0, #0
 8001e20:	bf18      	it	ne
 8001e22:	2001      	movne	r0, #1
 8001e24:	b013      	add	sp, #76	; 0x4c
 8001e26:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001e2a:	f000 ba1b 	b.w	8002264 <__math_uflow>
 8001e2e:	2300      	movs	r3, #0
 8001e30:	2400      	movs	r4, #0
 8001e32:	4618      	mov	r0, r3
 8001e34:	4621      	mov	r1, r4
 8001e36:	f7ff bbda 	b.w	80015ee <__ieee754_pow+0x36>
 8001e3a:	f1ba 0f00 	cmp.w	sl, #0
 8001e3e:	daf6      	bge.n	8001e2e <__ieee754_pow+0x876>
 8001e40:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8001e44:	4620      	mov	r0, r4
 8001e46:	4619      	mov	r1, r3
 8001e48:	f7ff bbd1 	b.w	80015ee <__ieee754_pow+0x36>
 8001e4c:	f3af 8000 	nop.w
 8001e50:	652b82fe 	.word	0x652b82fe
 8001e54:	3c971547 	.word	0x3c971547
 8001e58:	00000000 	.word	0x00000000
 8001e5c:	3fe62e43 	.word	0x3fe62e43
 8001e60:	fefa39ef 	.word	0xfefa39ef
 8001e64:	3fe62e42 	.word	0x3fe62e42
 8001e68:	0ca86c39 	.word	0x0ca86c39
 8001e6c:	be205c61 	.word	0xbe205c61
 8001e70:	72bea4d0 	.word	0x72bea4d0
 8001e74:	3e663769 	.word	0x3e663769
 8001e78:	c5d26bf1 	.word	0xc5d26bf1
 8001e7c:	3ebbbd41 	.word	0x3ebbbd41
 8001e80:	af25de2c 	.word	0xaf25de2c
 8001e84:	3f11566a 	.word	0x3f11566a
 8001e88:	16bebd93 	.word	0x16bebd93
 8001e8c:	3f66c16c 	.word	0x3f66c16c
 8001e90:	5555553e 	.word	0x5555553e
 8001e94:	3fc55555 	.word	0x3fc55555
 8001e98:	bff00000 	.word	0xbff00000
 8001e9c:	3ff00000 	.word	0x3ff00000
 8001ea0:	408fffff 	.word	0x408fffff
 8001ea4:	000fffff 	.word	0x000fffff
 8001ea8:	4090cbff 	.word	0x4090cbff
 8001eac:	3f6f3400 	.word	0x3f6f3400
 8001eb0:	4599      	cmp	r9, r3
 8001eb2:	db7a      	blt.n	8001faa <__ieee754_pow+0x9f2>
 8001eb4:	4b72      	ldr	r3, [pc, #456]	; (8002080 <__ieee754_pow+0xac8>)
 8001eb6:	4599      	cmp	r9, r3
 8001eb8:	f73f abf1 	bgt.w	800169e <__ieee754_pow+0xe6>
 8001ebc:	4b70      	ldr	r3, [pc, #448]	; (8002080 <__ieee754_pow+0xac8>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	f000 fe08 	bl	8002ad4 <__aeabi_dsub>
 8001ec4:	a362      	add	r3, pc, #392	; (adr r3, 8002050 <__ieee754_pow+0xa98>)
 8001ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eca:	4606      	mov	r6, r0
 8001ecc:	460f      	mov	r7, r1
 8001ece:	f000 ffb9 	bl	8002e44 <__aeabi_dmul>
 8001ed2:	a361      	add	r3, pc, #388	; (adr r3, 8002058 <__ieee754_pow+0xaa0>)
 8001ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ed8:	4680      	mov	r8, r0
 8001eda:	4689      	mov	r9, r1
 8001edc:	4630      	mov	r0, r6
 8001ede:	4639      	mov	r1, r7
 8001ee0:	f000 ffb0 	bl	8002e44 <__aeabi_dmul>
 8001ee4:	4b67      	ldr	r3, [pc, #412]	; (8002084 <__ieee754_pow+0xacc>)
 8001ee6:	4682      	mov	sl, r0
 8001ee8:	468b      	mov	fp, r1
 8001eea:	2200      	movs	r2, #0
 8001eec:	4630      	mov	r0, r6
 8001eee:	4639      	mov	r1, r7
 8001ef0:	f000 ffa8 	bl	8002e44 <__aeabi_dmul>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	460b      	mov	r3, r1
 8001ef8:	a159      	add	r1, pc, #356	; (adr r1, 8002060 <__ieee754_pow+0xaa8>)
 8001efa:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001efe:	f000 fde9 	bl	8002ad4 <__aeabi_dsub>
 8001f02:	4632      	mov	r2, r6
 8001f04:	463b      	mov	r3, r7
 8001f06:	f000 ff9d 	bl	8002e44 <__aeabi_dmul>
 8001f0a:	4602      	mov	r2, r0
 8001f0c:	460b      	mov	r3, r1
 8001f0e:	2000      	movs	r0, #0
 8001f10:	495d      	ldr	r1, [pc, #372]	; (8002088 <__ieee754_pow+0xad0>)
 8001f12:	f000 fddf 	bl	8002ad4 <__aeabi_dsub>
 8001f16:	4632      	mov	r2, r6
 8001f18:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001f1c:	463b      	mov	r3, r7
 8001f1e:	4630      	mov	r0, r6
 8001f20:	4639      	mov	r1, r7
 8001f22:	f000 ff8f 	bl	8002e44 <__aeabi_dmul>
 8001f26:	4602      	mov	r2, r0
 8001f28:	460b      	mov	r3, r1
 8001f2a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8001f2e:	f000 ff89 	bl	8002e44 <__aeabi_dmul>
 8001f32:	a34d      	add	r3, pc, #308	; (adr r3, 8002068 <__ieee754_pow+0xab0>)
 8001f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f38:	f000 ff84 	bl	8002e44 <__aeabi_dmul>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	460b      	mov	r3, r1
 8001f40:	4650      	mov	r0, sl
 8001f42:	4659      	mov	r1, fp
 8001f44:	f000 fdc6 	bl	8002ad4 <__aeabi_dsub>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	460b      	mov	r3, r1
 8001f4c:	4606      	mov	r6, r0
 8001f4e:	460f      	mov	r7, r1
 8001f50:	4640      	mov	r0, r8
 8001f52:	4649      	mov	r1, r9
 8001f54:	f000 fdc0 	bl	8002ad8 <__adddf3>
 8001f58:	f04f 0a00 	mov.w	sl, #0
 8001f5c:	4642      	mov	r2, r8
 8001f5e:	464b      	mov	r3, r9
 8001f60:	4650      	mov	r0, sl
 8001f62:	468b      	mov	fp, r1
 8001f64:	f000 fdb6 	bl	8002ad4 <__aeabi_dsub>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	460b      	mov	r3, r1
 8001f6c:	4630      	mov	r0, r6
 8001f6e:	4639      	mov	r1, r7
 8001f70:	f000 fdb0 	bl	8002ad4 <__aeabi_dsub>
 8001f74:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001f78:	e5e0      	b.n	8001b3c <__ieee754_pow+0x584>
 8001f7a:	463a      	mov	r2, r7
 8001f7c:	4643      	mov	r3, r8
 8001f7e:	4940      	ldr	r1, [pc, #256]	; (8002080 <__ieee754_pow+0xac8>)
 8001f80:	2000      	movs	r0, #0
 8001f82:	f001 f889 	bl	8003098 <__aeabi_ddiv>
 8001f86:	f7ff bb32 	b.w	80015ee <__ieee754_pow+0x36>
 8001f8a:	463a      	mov	r2, r7
 8001f8c:	4638      	mov	r0, r7
 8001f8e:	4643      	mov	r3, r8
 8001f90:	4641      	mov	r1, r8
 8001f92:	f000 ff57 	bl	8002e44 <__aeabi_dmul>
 8001f96:	f7ff bb2a 	b.w	80015ee <__ieee754_pow+0x36>
 8001f9a:	4a3b      	ldr	r2, [pc, #236]	; (8002088 <__ieee754_pow+0xad0>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	dc52      	bgt.n	8002046 <__ieee754_pow+0xa8e>
 8001fa0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8001fa4:	9200      	str	r2, [sp, #0]
 8001fa6:	9202      	str	r2, [sp, #8]
 8001fa8:	e65b      	b.n	8001c62 <__ieee754_pow+0x6aa>
 8001faa:	f1ba 0f00 	cmp.w	sl, #0
 8001fae:	f6ff ab7a 	blt.w	80016a6 <__ieee754_pow+0xee>
 8001fb2:	2000      	movs	r0, #0
 8001fb4:	e736      	b.n	8001e24 <__ieee754_pow+0x86c>
 8001fb6:	2800      	cmp	r0, #0
 8001fb8:	f47f ab7e 	bne.w	80016b8 <__ieee754_pow+0x100>
 8001fbc:	f1c2 0214 	rsb	r2, r2, #20
 8001fc0:	fa4b f102 	asr.w	r1, fp, r2
 8001fc4:	fa01 f202 	lsl.w	r2, r1, r2
 8001fc8:	455a      	cmp	r2, fp
 8001fca:	d035      	beq.n	8002038 <__ieee754_pow+0xa80>
 8001fcc:	9000      	str	r0, [sp, #0]
 8001fce:	f7ff bb3f 	b.w	8001650 <__ieee754_pow+0x98>
 8001fd2:	9b00      	ldr	r3, [sp, #0]
 8001fd4:	2b01      	cmp	r3, #1
 8001fd6:	f47f ab0a 	bne.w	80015ee <__ieee754_pow+0x36>
 8001fda:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8001fde:	4619      	mov	r1, r3
 8001fe0:	f7ff bb05 	b.w	80015ee <__ieee754_pow+0x36>
 8001fe4:	a322      	add	r3, pc, #136	; (adr r3, 8002070 <__ieee754_pow+0xab8>)
 8001fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fea:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8001fee:	a322      	add	r3, pc, #136	; (adr r3, 8002078 <__ieee754_pow+0xac0>)
 8001ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ff4:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8001ff8:	4b24      	ldr	r3, [pc, #144]	; (800208c <__ieee754_pow+0xad4>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8002000:	f44f 2780 	mov.w	r7, #262144	; 0x40000
 8002004:	e40c      	b.n	8001820 <__ieee754_pow+0x268>
 8002006:	9a02      	ldr	r2, [sp, #8]
 8002008:	f000 f9ba 	bl	8002380 <scalbn>
 800200c:	e6dc      	b.n	8001dc8 <__ieee754_pow+0x810>
 800200e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8002012:	2200      	movs	r2, #0
 8002014:	2300      	movs	r3, #0
 8002016:	f001 f987 	bl	8003328 <__aeabi_dcmplt>
 800201a:	3800      	subs	r0, #0
 800201c:	bf18      	it	ne
 800201e:	2001      	movne	r0, #1
 8002020:	f7ff bb42 	b.w	80016a8 <__ieee754_pow+0xf0>
 8002024:	f001 0101 	and.w	r1, r1, #1
 8002028:	f1c1 0202 	rsb	r2, r1, #2
 800202c:	9200      	str	r2, [sp, #0]
 800202e:	2800      	cmp	r0, #0
 8002030:	f43f ab0e 	beq.w	8001650 <__ieee754_pow+0x98>
 8002034:	f7ff bb18 	b.w	8001668 <__ieee754_pow+0xb0>
 8002038:	f001 0101 	and.w	r1, r1, #1
 800203c:	f1c1 0202 	rsb	r2, r1, #2
 8002040:	9200      	str	r2, [sp, #0]
 8002042:	f7ff bb05 	b.w	8001650 <__ieee754_pow+0x98>
 8002046:	151b      	asrs	r3, r3, #20
 8002048:	e5d8      	b.n	8001bfc <__ieee754_pow+0x644>
 800204a:	bf00      	nop
 800204c:	f3af 8000 	nop.w
 8002050:	60000000 	.word	0x60000000
 8002054:	3ff71547 	.word	0x3ff71547
 8002058:	f85ddf44 	.word	0xf85ddf44
 800205c:	3e54ae0b 	.word	0x3e54ae0b
 8002060:	55555555 	.word	0x55555555
 8002064:	3fd55555 	.word	0x3fd55555
 8002068:	652b82fe 	.word	0x652b82fe
 800206c:	3ff71547 	.word	0x3ff71547
 8002070:	40000000 	.word	0x40000000
 8002074:	3fe2b803 	.word	0x3fe2b803
 8002078:	43cfd006 	.word	0x43cfd006
 800207c:	3e4cfdeb 	.word	0x3e4cfdeb
 8002080:	3ff00000 	.word	0x3ff00000
 8002084:	3fd00000 	.word	0x3fd00000
 8002088:	3fe00000 	.word	0x3fe00000
 800208c:	3ff80000 	.word	0x3ff80000

08002090 <__ieee754_sqrt>:
 8002090:	4a61      	ldr	r2, [pc, #388]	; (8002218 <__ieee754_sqrt+0x188>)
 8002092:	438a      	bics	r2, r1
 8002094:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002098:	4605      	mov	r5, r0
 800209a:	460c      	mov	r4, r1
 800209c:	f000 809e 	beq.w	80021dc <__ieee754_sqrt+0x14c>
 80020a0:	2900      	cmp	r1, #0
 80020a2:	460b      	mov	r3, r1
 80020a4:	4684      	mov	ip, r0
 80020a6:	dd54      	ble.n	8002152 <__ieee754_sqrt+0xc2>
 80020a8:	1509      	asrs	r1, r1, #20
 80020aa:	d062      	beq.n	8002172 <__ieee754_sqrt+0xe2>
 80020ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80020b0:	07c8      	lsls	r0, r1, #31
 80020b2:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 80020b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80020ba:	d404      	bmi.n	80020c6 <__ieee754_sqrt+0x36>
 80020bc:	005b      	lsls	r3, r3, #1
 80020be:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
 80020c2:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 80020c6:	ea4f 72dc 	mov.w	r2, ip, lsr #31
 80020ca:	2600      	movs	r6, #0
 80020cc:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80020d0:	107f      	asrs	r7, r7, #1
 80020d2:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 80020d6:	f04f 0e16 	mov.w	lr, #22
 80020da:	4634      	mov	r4, r6
 80020dc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80020e0:	18a1      	adds	r1, r4, r2
 80020e2:	4299      	cmp	r1, r3
 80020e4:	dc02      	bgt.n	80020ec <__ieee754_sqrt+0x5c>
 80020e6:	1a5b      	subs	r3, r3, r1
 80020e8:	188c      	adds	r4, r1, r2
 80020ea:	4416      	add	r6, r2
 80020ec:	005b      	lsls	r3, r3, #1
 80020ee:	f1be 0e01 	subs.w	lr, lr, #1
 80020f2:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
 80020f6:	ea4f 0252 	mov.w	r2, r2, lsr #1
 80020fa:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 80020fe:	d1ef      	bne.n	80020e0 <__ieee754_sqrt+0x50>
 8002100:	4675      	mov	r5, lr
 8002102:	2020      	movs	r0, #32
 8002104:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002108:	e00a      	b.n	8002120 <__ieee754_sqrt+0x90>
 800210a:	d043      	beq.n	8002194 <__ieee754_sqrt+0x104>
 800210c:	ea4f 71dc 	mov.w	r1, ip, lsr #31
 8002110:	3801      	subs	r0, #1
 8002112:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8002116:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 800211a:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800211e:	d042      	beq.n	80021a6 <__ieee754_sqrt+0x116>
 8002120:	42a3      	cmp	r3, r4
 8002122:	eb02 010e 	add.w	r1, r2, lr
 8002126:	ddf0      	ble.n	800210a <__ieee754_sqrt+0x7a>
 8002128:	2900      	cmp	r1, #0
 800212a:	eb01 0e02 	add.w	lr, r1, r2
 800212e:	db0a      	blt.n	8002146 <__ieee754_sqrt+0xb6>
 8002130:	46a0      	mov	r8, r4
 8002132:	1b1b      	subs	r3, r3, r4
 8002134:	4561      	cmp	r1, ip
 8002136:	bf88      	it	hi
 8002138:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
 800213c:	ebac 0c01 	sub.w	ip, ip, r1
 8002140:	4415      	add	r5, r2
 8002142:	4644      	mov	r4, r8
 8002144:	e7e2      	b.n	800210c <__ieee754_sqrt+0x7c>
 8002146:	f1be 0f00 	cmp.w	lr, #0
 800214a:	dbf1      	blt.n	8002130 <__ieee754_sqrt+0xa0>
 800214c:	f104 0801 	add.w	r8, r4, #1
 8002150:	e7ef      	b.n	8002132 <__ieee754_sqrt+0xa2>
 8002152:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8002156:	4302      	orrs	r2, r0
 8002158:	d036      	beq.n	80021c8 <__ieee754_sqrt+0x138>
 800215a:	2900      	cmp	r1, #0
 800215c:	d14c      	bne.n	80021f8 <__ieee754_sqrt+0x168>
 800215e:	ea4f 22dc 	mov.w	r2, ip, lsr #11
 8002162:	3915      	subs	r1, #21
 8002164:	4613      	mov	r3, r2
 8002166:	ea4f 5c4c 	mov.w	ip, ip, lsl #21
 800216a:	2a00      	cmp	r2, #0
 800216c:	d0f7      	beq.n	800215e <__ieee754_sqrt+0xce>
 800216e:	02d6      	lsls	r6, r2, #11
 8002170:	d44c      	bmi.n	800220c <__ieee754_sqrt+0x17c>
 8002172:	2000      	movs	r0, #0
 8002174:	005b      	lsls	r3, r3, #1
 8002176:	02dd      	lsls	r5, r3, #11
 8002178:	4604      	mov	r4, r0
 800217a:	f100 0001 	add.w	r0, r0, #1
 800217e:	d5f9      	bpl.n	8002174 <__ieee754_sqrt+0xe4>
 8002180:	461a      	mov	r2, r3
 8002182:	4663      	mov	r3, ip
 8002184:	fa0c fc00 	lsl.w	ip, ip, r0
 8002188:	f1c0 0020 	rsb	r0, r0, #32
 800218c:	40c3      	lsrs	r3, r0
 800218e:	1b09      	subs	r1, r1, r4
 8002190:	4313      	orrs	r3, r2
 8002192:	e78b      	b.n	80020ac <__ieee754_sqrt+0x1c>
 8002194:	4561      	cmp	r1, ip
 8002196:	d8b9      	bhi.n	800210c <__ieee754_sqrt+0x7c>
 8002198:	2900      	cmp	r1, #0
 800219a:	eb01 0e02 	add.w	lr, r1, r2
 800219e:	dbd2      	blt.n	8002146 <__ieee754_sqrt+0xb6>
 80021a0:	4698      	mov	r8, r3
 80021a2:	2300      	movs	r3, #0
 80021a4:	e7ca      	b.n	800213c <__ieee754_sqrt+0xac>
 80021a6:	ea53 030c 	orrs.w	r3, r3, ip
 80021aa:	d111      	bne.n	80021d0 <__ieee754_sqrt+0x140>
 80021ac:	0868      	lsrs	r0, r5, #1
 80021ae:	1073      	asrs	r3, r6, #1
 80021b0:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80021b4:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80021b8:	07f2      	lsls	r2, r6, #31
 80021ba:	bf48      	it	mi
 80021bc:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
 80021c0:	eb03 5907 	add.w	r9, r3, r7, lsl #20
 80021c4:	4605      	mov	r5, r0
 80021c6:	464c      	mov	r4, r9
 80021c8:	4628      	mov	r0, r5
 80021ca:	4621      	mov	r1, r4
 80021cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80021d0:	1c69      	adds	r1, r5, #1
 80021d2:	bf16      	itet	ne
 80021d4:	1c68      	addne	r0, r5, #1
 80021d6:	3601      	addeq	r6, #1
 80021d8:	0840      	lsrne	r0, r0, #1
 80021da:	e7e8      	b.n	80021ae <__ieee754_sqrt+0x11e>
 80021dc:	4602      	mov	r2, r0
 80021de:	460b      	mov	r3, r1
 80021e0:	f000 fe30 	bl	8002e44 <__aeabi_dmul>
 80021e4:	462a      	mov	r2, r5
 80021e6:	4623      	mov	r3, r4
 80021e8:	f000 fc76 	bl	8002ad8 <__adddf3>
 80021ec:	4605      	mov	r5, r0
 80021ee:	460c      	mov	r4, r1
 80021f0:	4628      	mov	r0, r5
 80021f2:	4621      	mov	r1, r4
 80021f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80021f8:	4602      	mov	r2, r0
 80021fa:	f000 fc6b 	bl	8002ad4 <__aeabi_dsub>
 80021fe:	4602      	mov	r2, r0
 8002200:	460b      	mov	r3, r1
 8002202:	f000 ff49 	bl	8003098 <__aeabi_ddiv>
 8002206:	4605      	mov	r5, r0
 8002208:	460c      	mov	r4, r1
 800220a:	e7dd      	b.n	80021c8 <__ieee754_sqrt+0x138>
 800220c:	4663      	mov	r3, ip
 800220e:	2020      	movs	r0, #32
 8002210:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8002214:	e7ba      	b.n	800218c <__ieee754_sqrt+0xfc>
 8002216:	bf00      	nop
 8002218:	7ff00000 	.word	0x7ff00000

0800221c <with_errno>:
 800221c:	b5d0      	push	{r4, r6, r7, lr}
 800221e:	4606      	mov	r6, r0
 8002220:	460f      	mov	r7, r1
 8002222:	4614      	mov	r4, r2
 8002224:	f001 f906 	bl	8003434 <__errno>
 8002228:	4603      	mov	r3, r0
 800222a:	4639      	mov	r1, r7
 800222c:	4630      	mov	r0, r6
 800222e:	601c      	str	r4, [r3, #0]
 8002230:	bdd0      	pop	{r4, r6, r7, pc}
 8002232:	bf00      	nop

08002234 <xflow>:
 8002234:	b530      	push	{r4, r5, lr}
 8002236:	b083      	sub	sp, #12
 8002238:	b180      	cbz	r0, 800225c <xflow+0x28>
 800223a:	4614      	mov	r4, r2
 800223c:	f103 4500 	add.w	r5, r3, #2147483648	; 0x80000000
 8002240:	e9cd 4500 	strd	r4, r5, [sp]
 8002244:	4610      	mov	r0, r2
 8002246:	4619      	mov	r1, r3
 8002248:	e9dd 2300 	ldrd	r2, r3, [sp]
 800224c:	f000 fdfa 	bl	8002e44 <__aeabi_dmul>
 8002250:	2222      	movs	r2, #34	; 0x22
 8002252:	b003      	add	sp, #12
 8002254:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002258:	f7ff bfe0 	b.w	800221c <with_errno>
 800225c:	4614      	mov	r4, r2
 800225e:	461d      	mov	r5, r3
 8002260:	e7ee      	b.n	8002240 <xflow+0xc>
 8002262:	bf00      	nop

08002264 <__math_uflow>:
 8002264:	2200      	movs	r2, #0
 8002266:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800226a:	f7ff bfe3 	b.w	8002234 <xflow>
 800226e:	bf00      	nop

08002270 <__math_may_uflow>:
 8002270:	4b01      	ldr	r3, [pc, #4]	; (8002278 <__math_may_uflow+0x8>)
 8002272:	2200      	movs	r2, #0
 8002274:	f7ff bfde 	b.w	8002234 <xflow>
 8002278:	1e580000 	.word	0x1e580000

0800227c <__math_oflow>:
 800227c:	2200      	movs	r2, #0
 800227e:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8002282:	f7ff bfd7 	b.w	8002234 <xflow>
 8002286:	bf00      	nop

08002288 <__math_divzero>:
 8002288:	b500      	push	{lr}
 800228a:	2200      	movs	r2, #0
 800228c:	b083      	sub	sp, #12
 800228e:	b970      	cbnz	r0, 80022ae <__math_divzero+0x26>
 8002290:	4b08      	ldr	r3, [pc, #32]	; (80022b4 <__math_divzero+0x2c>)
 8002292:	e9cd 2300 	strd	r2, r3, [sp]
 8002296:	e9dd 0100 	ldrd	r0, r1, [sp]
 800229a:	2200      	movs	r2, #0
 800229c:	2300      	movs	r3, #0
 800229e:	f000 fefb 	bl	8003098 <__aeabi_ddiv>
 80022a2:	2222      	movs	r2, #34	; 0x22
 80022a4:	b003      	add	sp, #12
 80022a6:	f85d eb04 	ldr.w	lr, [sp], #4
 80022aa:	f7ff bfb7 	b.w	800221c <with_errno>
 80022ae:	4b02      	ldr	r3, [pc, #8]	; (80022b8 <__math_divzero+0x30>)
 80022b0:	e7ef      	b.n	8002292 <__math_divzero+0xa>
 80022b2:	bf00      	nop
 80022b4:	3ff00000 	.word	0x3ff00000
 80022b8:	bff00000 	.word	0xbff00000

080022bc <__math_invalid>:
 80022bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022be:	4602      	mov	r2, r0
 80022c0:	460b      	mov	r3, r1
 80022c2:	4604      	mov	r4, r0
 80022c4:	460d      	mov	r5, r1
 80022c6:	f000 fc05 	bl	8002ad4 <__aeabi_dsub>
 80022ca:	4602      	mov	r2, r0
 80022cc:	460b      	mov	r3, r1
 80022ce:	f000 fee3 	bl	8003098 <__aeabi_ddiv>
 80022d2:	4622      	mov	r2, r4
 80022d4:	4606      	mov	r6, r0
 80022d6:	460f      	mov	r7, r1
 80022d8:	462b      	mov	r3, r5
 80022da:	4620      	mov	r0, r4
 80022dc:	4629      	mov	r1, r5
 80022de:	f001 f84b 	bl	8003378 <__aeabi_dcmpun>
 80022e2:	b930      	cbnz	r0, 80022f2 <__math_invalid+0x36>
 80022e4:	4630      	mov	r0, r6
 80022e6:	4639      	mov	r1, r7
 80022e8:	2221      	movs	r2, #33	; 0x21
 80022ea:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80022ee:	f7ff bf95 	b.w	800221c <with_errno>
 80022f2:	4630      	mov	r0, r6
 80022f4:	4639      	mov	r1, r7
 80022f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080022f8 <__math_check_uflow>:
 80022f8:	b538      	push	{r3, r4, r5, lr}
 80022fa:	2200      	movs	r2, #0
 80022fc:	2300      	movs	r3, #0
 80022fe:	4604      	mov	r4, r0
 8002300:	460d      	mov	r5, r1
 8002302:	f001 f807 	bl	8003314 <__aeabi_dcmpeq>
 8002306:	b910      	cbnz	r0, 800230e <__math_check_uflow+0x16>
 8002308:	4620      	mov	r0, r4
 800230a:	4629      	mov	r1, r5
 800230c:	bd38      	pop	{r3, r4, r5, pc}
 800230e:	4620      	mov	r0, r4
 8002310:	4629      	mov	r1, r5
 8002312:	2222      	movs	r2, #34	; 0x22
 8002314:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002318:	f7ff bf80 	b.w	800221c <with_errno>

0800231c <__math_check_oflow>:
 800231c:	b570      	push	{r4, r5, r6, lr}
 800231e:	4604      	mov	r4, r0
 8002320:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8002324:	460d      	mov	r5, r1
 8002326:	4b0d      	ldr	r3, [pc, #52]	; (800235c <__math_check_oflow+0x40>)
 8002328:	4620      	mov	r0, r4
 800232a:	4631      	mov	r1, r6
 800232c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002330:	f001 f822 	bl	8003378 <__aeabi_dcmpun>
 8002334:	b938      	cbnz	r0, 8002346 <__math_check_oflow+0x2a>
 8002336:	4b09      	ldr	r3, [pc, #36]	; (800235c <__math_check_oflow+0x40>)
 8002338:	4620      	mov	r0, r4
 800233a:	4631      	mov	r1, r6
 800233c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002340:	f000 fffc 	bl	800333c <__aeabi_dcmple>
 8002344:	b110      	cbz	r0, 800234c <__math_check_oflow+0x30>
 8002346:	4620      	mov	r0, r4
 8002348:	4629      	mov	r1, r5
 800234a:	bd70      	pop	{r4, r5, r6, pc}
 800234c:	4620      	mov	r0, r4
 800234e:	4629      	mov	r1, r5
 8002350:	2222      	movs	r2, #34	; 0x22
 8002352:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8002356:	f7ff bf61 	b.w	800221c <with_errno>
 800235a:	bf00      	nop
 800235c:	7fefffff 	.word	0x7fefffff

08002360 <fabs>:
 8002360:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8002364:	4770      	bx	lr
 8002366:	bf00      	nop

08002368 <finite>:
 8002368:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 800236c:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8002370:	0fc0      	lsrs	r0, r0, #31
 8002372:	4770      	bx	lr

08002374 <nan>:
 8002374:	4901      	ldr	r1, [pc, #4]	; (800237c <nan+0x8>)
 8002376:	2000      	movs	r0, #0
 8002378:	4770      	bx	lr
 800237a:	bf00      	nop
 800237c:	7ff80000 	.word	0x7ff80000

08002380 <scalbn>:
 8002380:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8002384:	b570      	push	{r4, r5, r6, lr}
 8002386:	468c      	mov	ip, r1
 8002388:	4604      	mov	r4, r0
 800238a:	460d      	mov	r5, r1
 800238c:	4616      	mov	r6, r2
 800238e:	bb7b      	cbnz	r3, 80023f0 <scalbn+0x70>
 8002390:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8002394:	4603      	mov	r3, r0
 8002396:	ea5c 0303 	orrs.w	r3, ip, r3
 800239a:	d028      	beq.n	80023ee <scalbn+0x6e>
 800239c:	4b30      	ldr	r3, [pc, #192]	; (8002460 <scalbn+0xe0>)
 800239e:	2200      	movs	r2, #0
 80023a0:	f000 fd50 	bl	8002e44 <__aeabi_dmul>
 80023a4:	4b2f      	ldr	r3, [pc, #188]	; (8002464 <scalbn+0xe4>)
 80023a6:	429e      	cmp	r6, r3
 80023a8:	4604      	mov	r4, r0
 80023aa:	460d      	mov	r5, r1
 80023ac:	db1a      	blt.n	80023e4 <scalbn+0x64>
 80023ae:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80023b2:	468c      	mov	ip, r1
 80023b4:	3b36      	subs	r3, #54	; 0x36
 80023b6:	4433      	add	r3, r6
 80023b8:	f240 72fe 	movw	r2, #2046	; 0x7fe
 80023bc:	4293      	cmp	r3, r2
 80023be:	dc20      	bgt.n	8002402 <scalbn+0x82>
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	dc3c      	bgt.n	800243e <scalbn+0xbe>
 80023c4:	f113 0f35 	cmn.w	r3, #53	; 0x35
 80023c8:	da2c      	bge.n	8002424 <scalbn+0xa4>
 80023ca:	f24c 3350 	movw	r3, #50000	; 0xc350
 80023ce:	429e      	cmp	r6, r3
 80023d0:	dc17      	bgt.n	8002402 <scalbn+0x82>
 80023d2:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80023d6:	f043 71d2 	orr.w	r1, r3, #27525120	; 0x1a40000
 80023da:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 80023de:	4822      	ldr	r0, [pc, #136]	; (8002468 <scalbn+0xe8>)
 80023e0:	f041 011f 	orr.w	r1, r1, #31
 80023e4:	a31a      	add	r3, pc, #104	; (adr r3, 8002450 <scalbn+0xd0>)
 80023e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023ea:	f000 fd2b 	bl	8002e44 <__aeabi_dmul>
 80023ee:	bd70      	pop	{r4, r5, r6, pc}
 80023f0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d1de      	bne.n	80023b6 <scalbn+0x36>
 80023f8:	4602      	mov	r2, r0
 80023fa:	460b      	mov	r3, r1
 80023fc:	f000 fb6c 	bl	8002ad8 <__adddf3>
 8002400:	bd70      	pop	{r4, r5, r6, pc}
 8002402:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8002406:	f043 41fc 	orr.w	r1, r3, #2113929216	; 0x7e000000
 800240a:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800240e:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 8002412:	a311      	add	r3, pc, #68	; (adr r3, 8002458 <scalbn+0xd8>)
 8002414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002418:	4814      	ldr	r0, [pc, #80]	; (800246c <scalbn+0xec>)
 800241a:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800241e:	f000 fd11 	bl	8002e44 <__aeabi_dmul>
 8002422:	bd70      	pop	{r4, r5, r6, pc}
 8002424:	f02c 4cff 	bic.w	ip, ip, #2139095040	; 0x7f800000
 8002428:	3336      	adds	r3, #54	; 0x36
 800242a:	f42c 0ce0 	bic.w	ip, ip, #7340032	; 0x700000
 800242e:	ea4c 5103 	orr.w	r1, ip, r3, lsl #20
 8002432:	4620      	mov	r0, r4
 8002434:	4b0e      	ldr	r3, [pc, #56]	; (8002470 <scalbn+0xf0>)
 8002436:	2200      	movs	r2, #0
 8002438:	f000 fd04 	bl	8002e44 <__aeabi_dmul>
 800243c:	bd70      	pop	{r4, r5, r6, pc}
 800243e:	f02c 4cff 	bic.w	ip, ip, #2139095040	; 0x7f800000
 8002442:	f42c 0ce0 	bic.w	ip, ip, #7340032	; 0x700000
 8002446:	4620      	mov	r0, r4
 8002448:	ea4c 5103 	orr.w	r1, ip, r3, lsl #20
 800244c:	bd70      	pop	{r4, r5, r6, pc}
 800244e:	bf00      	nop
 8002450:	c2f8f359 	.word	0xc2f8f359
 8002454:	01a56e1f 	.word	0x01a56e1f
 8002458:	8800759c 	.word	0x8800759c
 800245c:	7e37e43c 	.word	0x7e37e43c
 8002460:	43500000 	.word	0x43500000
 8002464:	ffff3cb0 	.word	0xffff3cb0
 8002468:	c2f8f359 	.word	0xc2f8f359
 800246c:	8800759c 	.word	0x8800759c
 8002470:	3c900000 	.word	0x3c900000
 8002474:	00000000 	.word	0x00000000

08002478 <__ieee754_log>:
 8002478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800247c:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8002480:	b087      	sub	sp, #28
 8002482:	4602      	mov	r2, r0
 8002484:	460b      	mov	r3, r1
 8002486:	460f      	mov	r7, r1
 8002488:	da58      	bge.n	800253c <__ieee754_log+0xc4>
 800248a:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 800248e:	4304      	orrs	r4, r0
 8002490:	f000 80f8 	beq.w	8002684 <__ieee754_log+0x20c>
 8002494:	2900      	cmp	r1, #0
 8002496:	f2c0 8132 	blt.w	80026fe <__ieee754_log+0x286>
 800249a:	4bd7      	ldr	r3, [pc, #860]	; (80027f8 <__ieee754_log+0x380>)
 800249c:	2200      	movs	r2, #0
 800249e:	f000 fcd1 	bl	8002e44 <__aeabi_dmul>
 80024a2:	460f      	mov	r7, r1
 80024a4:	460b      	mov	r3, r1
 80024a6:	49d5      	ldr	r1, [pc, #852]	; (80027fc <__ieee754_log+0x384>)
 80024a8:	428f      	cmp	r7, r1
 80024aa:	4602      	mov	r2, r0
 80024ac:	f06f 0035 	mvn.w	r0, #53	; 0x35
 80024b0:	dc49      	bgt.n	8002546 <__ieee754_log+0xce>
 80024b2:	153e      	asrs	r6, r7, #20
 80024b4:	f3c7 0713 	ubfx	r7, r7, #0, #20
 80024b8:	f507 2115 	add.w	r1, r7, #610304	; 0x95000
 80024bc:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
 80024c0:	f601 7164 	addw	r1, r1, #3940	; 0xf64
 80024c4:	4406      	add	r6, r0
 80024c6:	f401 1180 	and.w	r1, r1, #1048576	; 0x100000
 80024ca:	eb06 5611 	add.w	r6, r6, r1, lsr #20
 80024ce:	f081 517f 	eor.w	r1, r1, #1069547520	; 0x3fc00000
 80024d2:	f481 1140 	eor.w	r1, r1, #3145728	; 0x300000
 80024d6:	ea41 0307 	orr.w	r3, r1, r7
 80024da:	4610      	mov	r0, r2
 80024dc:	4619      	mov	r1, r3
 80024de:	2200      	movs	r2, #0
 80024e0:	4bc7      	ldr	r3, [pc, #796]	; (8002800 <__ieee754_log+0x388>)
 80024e2:	f000 faf7 	bl	8002ad4 <__aeabi_dsub>
 80024e6:	1cbb      	adds	r3, r7, #2
 80024e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80024ec:	2b02      	cmp	r3, #2
 80024ee:	4682      	mov	sl, r0
 80024f0:	468b      	mov	fp, r1
 80024f2:	dc2f      	bgt.n	8002554 <__ieee754_log+0xdc>
 80024f4:	2200      	movs	r2, #0
 80024f6:	2300      	movs	r3, #0
 80024f8:	f000 ff0c 	bl	8003314 <__aeabi_dcmpeq>
 80024fc:	2800      	cmp	r0, #0
 80024fe:	f000 80ca 	beq.w	8002696 <__ieee754_log+0x21e>
 8002502:	2e00      	cmp	r6, #0
 8002504:	f000 814b 	beq.w	800279e <__ieee754_log+0x326>
 8002508:	4630      	mov	r0, r6
 800250a:	f000 fc31 	bl	8002d70 <__aeabi_i2d>
 800250e:	a3a6      	add	r3, pc, #664	; (adr r3, 80027a8 <__ieee754_log+0x330>)
 8002510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002514:	4606      	mov	r6, r0
 8002516:	460f      	mov	r7, r1
 8002518:	f000 fc94 	bl	8002e44 <__aeabi_dmul>
 800251c:	a3a4      	add	r3, pc, #656	; (adr r3, 80027b0 <__ieee754_log+0x338>)
 800251e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002522:	4604      	mov	r4, r0
 8002524:	460d      	mov	r5, r1
 8002526:	4630      	mov	r0, r6
 8002528:	4639      	mov	r1, r7
 800252a:	f000 fc8b 	bl	8002e44 <__aeabi_dmul>
 800252e:	4602      	mov	r2, r0
 8002530:	460b      	mov	r3, r1
 8002532:	4620      	mov	r0, r4
 8002534:	4629      	mov	r1, r5
 8002536:	f000 facf 	bl	8002ad8 <__adddf3>
 800253a:	e008      	b.n	800254e <__ieee754_log+0xd6>
 800253c:	49af      	ldr	r1, [pc, #700]	; (80027fc <__ieee754_log+0x384>)
 800253e:	428f      	cmp	r7, r1
 8002540:	f04f 0000 	mov.w	r0, #0
 8002544:	ddb5      	ble.n	80024b2 <__ieee754_log+0x3a>
 8002546:	4610      	mov	r0, r2
 8002548:	4619      	mov	r1, r3
 800254a:	f000 fac5 	bl	8002ad8 <__adddf3>
 800254e:	b007      	add	sp, #28
 8002550:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002554:	f5a7 23c2 	sub.w	r3, r7, #397312	; 0x61000
 8002558:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 800255c:	9301      	str	r3, [sp, #4]
 800255e:	2200      	movs	r2, #0
 8002560:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002564:	f000 fab8 	bl	8002ad8 <__adddf3>
 8002568:	4602      	mov	r2, r0
 800256a:	460b      	mov	r3, r1
 800256c:	4650      	mov	r0, sl
 800256e:	4659      	mov	r1, fp
 8002570:	f000 fd92 	bl	8003098 <__aeabi_ddiv>
 8002574:	4604      	mov	r4, r0
 8002576:	4630      	mov	r0, r6
 8002578:	460d      	mov	r5, r1
 800257a:	f000 fbf9 	bl	8002d70 <__aeabi_i2d>
 800257e:	4622      	mov	r2, r4
 8002580:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8002584:	462b      	mov	r3, r5
 8002586:	4620      	mov	r0, r4
 8002588:	4629      	mov	r1, r5
 800258a:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800258e:	f000 fc59 	bl	8002e44 <__aeabi_dmul>
 8002592:	4602      	mov	r2, r0
 8002594:	460b      	mov	r3, r1
 8002596:	4680      	mov	r8, r0
 8002598:	4689      	mov	r9, r1
 800259a:	f000 fc53 	bl	8002e44 <__aeabi_dmul>
 800259e:	a386      	add	r3, pc, #536	; (adr r3, 80027b8 <__ieee754_log+0x340>)
 80025a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025a4:	4604      	mov	r4, r0
 80025a6:	460d      	mov	r5, r1
 80025a8:	f000 fc4c 	bl	8002e44 <__aeabi_dmul>
 80025ac:	a384      	add	r3, pc, #528	; (adr r3, 80027c0 <__ieee754_log+0x348>)
 80025ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025b2:	f000 fa91 	bl	8002ad8 <__adddf3>
 80025b6:	4622      	mov	r2, r4
 80025b8:	462b      	mov	r3, r5
 80025ba:	f000 fc43 	bl	8002e44 <__aeabi_dmul>
 80025be:	a382      	add	r3, pc, #520	; (adr r3, 80027c8 <__ieee754_log+0x350>)
 80025c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025c4:	f000 fa88 	bl	8002ad8 <__adddf3>
 80025c8:	4622      	mov	r2, r4
 80025ca:	462b      	mov	r3, r5
 80025cc:	f000 fc3a 	bl	8002e44 <__aeabi_dmul>
 80025d0:	a37f      	add	r3, pc, #508	; (adr r3, 80027d0 <__ieee754_log+0x358>)
 80025d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025d6:	f000 fa7f 	bl	8002ad8 <__adddf3>
 80025da:	4642      	mov	r2, r8
 80025dc:	464b      	mov	r3, r9
 80025de:	f000 fc31 	bl	8002e44 <__aeabi_dmul>
 80025e2:	a37d      	add	r3, pc, #500	; (adr r3, 80027d8 <__ieee754_log+0x360>)
 80025e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025e8:	4680      	mov	r8, r0
 80025ea:	4689      	mov	r9, r1
 80025ec:	4620      	mov	r0, r4
 80025ee:	4629      	mov	r1, r5
 80025f0:	f000 fc28 	bl	8002e44 <__aeabi_dmul>
 80025f4:	a37a      	add	r3, pc, #488	; (adr r3, 80027e0 <__ieee754_log+0x368>)
 80025f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025fa:	f000 fa6d 	bl	8002ad8 <__adddf3>
 80025fe:	4622      	mov	r2, r4
 8002600:	462b      	mov	r3, r5
 8002602:	f000 fc1f 	bl	8002e44 <__aeabi_dmul>
 8002606:	a378      	add	r3, pc, #480	; (adr r3, 80027e8 <__ieee754_log+0x370>)
 8002608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800260c:	f000 fa64 	bl	8002ad8 <__adddf3>
 8002610:	4622      	mov	r2, r4
 8002612:	462b      	mov	r3, r5
 8002614:	f000 fc16 	bl	8002e44 <__aeabi_dmul>
 8002618:	460b      	mov	r3, r1
 800261a:	4602      	mov	r2, r0
 800261c:	4649      	mov	r1, r9
 800261e:	4640      	mov	r0, r8
 8002620:	f000 fa5a 	bl	8002ad8 <__adddf3>
 8002624:	f5c7 27d7 	rsb	r7, r7, #440320	; 0x6b800
 8002628:	9b01      	ldr	r3, [sp, #4]
 800262a:	3751      	adds	r7, #81	; 0x51
 800262c:	431f      	orrs	r7, r3
 800262e:	2f00      	cmp	r7, #0
 8002630:	4680      	mov	r8, r0
 8002632:	4689      	mov	r9, r1
 8002634:	dd55      	ble.n	80026e2 <__ieee754_log+0x26a>
 8002636:	4b73      	ldr	r3, [pc, #460]	; (8002804 <__ieee754_log+0x38c>)
 8002638:	2200      	movs	r2, #0
 800263a:	4650      	mov	r0, sl
 800263c:	4659      	mov	r1, fp
 800263e:	f000 fc01 	bl	8002e44 <__aeabi_dmul>
 8002642:	4652      	mov	r2, sl
 8002644:	465b      	mov	r3, fp
 8002646:	f000 fbfd 	bl	8002e44 <__aeabi_dmul>
 800264a:	4604      	mov	r4, r0
 800264c:	460d      	mov	r5, r1
 800264e:	2e00      	cmp	r6, #0
 8002650:	d15c      	bne.n	800270c <__ieee754_log+0x294>
 8002652:	4622      	mov	r2, r4
 8002654:	462b      	mov	r3, r5
 8002656:	4640      	mov	r0, r8
 8002658:	4649      	mov	r1, r9
 800265a:	f000 fa3d 	bl	8002ad8 <__adddf3>
 800265e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002662:	f000 fbef 	bl	8002e44 <__aeabi_dmul>
 8002666:	4602      	mov	r2, r0
 8002668:	460b      	mov	r3, r1
 800266a:	4620      	mov	r0, r4
 800266c:	4629      	mov	r1, r5
 800266e:	f000 fa31 	bl	8002ad4 <__aeabi_dsub>
 8002672:	4602      	mov	r2, r0
 8002674:	460b      	mov	r3, r1
 8002676:	4650      	mov	r0, sl
 8002678:	4659      	mov	r1, fp
 800267a:	f000 fa2b 	bl	8002ad4 <__aeabi_dsub>
 800267e:	b007      	add	sp, #28
 8002680:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002684:	2200      	movs	r2, #0
 8002686:	2300      	movs	r3, #0
 8002688:	495f      	ldr	r1, [pc, #380]	; (8002808 <__ieee754_log+0x390>)
 800268a:	2000      	movs	r0, #0
 800268c:	f000 fd04 	bl	8003098 <__aeabi_ddiv>
 8002690:	b007      	add	sp, #28
 8002692:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002696:	a356      	add	r3, pc, #344	; (adr r3, 80027f0 <__ieee754_log+0x378>)
 8002698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800269c:	4650      	mov	r0, sl
 800269e:	4659      	mov	r1, fp
 80026a0:	f000 fbd0 	bl	8002e44 <__aeabi_dmul>
 80026a4:	4602      	mov	r2, r0
 80026a6:	460b      	mov	r3, r1
 80026a8:	2000      	movs	r0, #0
 80026aa:	4956      	ldr	r1, [pc, #344]	; (8002804 <__ieee754_log+0x38c>)
 80026ac:	f000 fa12 	bl	8002ad4 <__aeabi_dsub>
 80026b0:	4652      	mov	r2, sl
 80026b2:	4604      	mov	r4, r0
 80026b4:	460d      	mov	r5, r1
 80026b6:	465b      	mov	r3, fp
 80026b8:	4650      	mov	r0, sl
 80026ba:	4659      	mov	r1, fp
 80026bc:	f000 fbc2 	bl	8002e44 <__aeabi_dmul>
 80026c0:	4602      	mov	r2, r0
 80026c2:	460b      	mov	r3, r1
 80026c4:	4620      	mov	r0, r4
 80026c6:	4629      	mov	r1, r5
 80026c8:	f000 fbbc 	bl	8002e44 <__aeabi_dmul>
 80026cc:	4604      	mov	r4, r0
 80026ce:	460d      	mov	r5, r1
 80026d0:	2e00      	cmp	r6, #0
 80026d2:	d150      	bne.n	8002776 <__ieee754_log+0x2fe>
 80026d4:	4602      	mov	r2, r0
 80026d6:	460b      	mov	r3, r1
 80026d8:	4650      	mov	r0, sl
 80026da:	4659      	mov	r1, fp
 80026dc:	f000 f9fa 	bl	8002ad4 <__aeabi_dsub>
 80026e0:	e735      	b.n	800254e <__ieee754_log+0xd6>
 80026e2:	2e00      	cmp	r6, #0
 80026e4:	f040 8092 	bne.w	800280c <__ieee754_log+0x394>
 80026e8:	4602      	mov	r2, r0
 80026ea:	460b      	mov	r3, r1
 80026ec:	4650      	mov	r0, sl
 80026ee:	4659      	mov	r1, fp
 80026f0:	f000 f9f0 	bl	8002ad4 <__aeabi_dsub>
 80026f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80026f8:	f000 fba4 	bl	8002e44 <__aeabi_dmul>
 80026fc:	e7b9      	b.n	8002672 <__ieee754_log+0x1fa>
 80026fe:	f000 f9e9 	bl	8002ad4 <__aeabi_dsub>
 8002702:	2200      	movs	r2, #0
 8002704:	2300      	movs	r3, #0
 8002706:	f000 fcc7 	bl	8003098 <__aeabi_ddiv>
 800270a:	e720      	b.n	800254e <__ieee754_log+0xd6>
 800270c:	a326      	add	r3, pc, #152	; (adr r3, 80027a8 <__ieee754_log+0x330>)
 800270e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002712:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8002716:	f000 fb95 	bl	8002e44 <__aeabi_dmul>
 800271a:	4622      	mov	r2, r4
 800271c:	462b      	mov	r3, r5
 800271e:	4606      	mov	r6, r0
 8002720:	460f      	mov	r7, r1
 8002722:	4640      	mov	r0, r8
 8002724:	4649      	mov	r1, r9
 8002726:	f000 f9d7 	bl	8002ad8 <__adddf3>
 800272a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800272e:	f000 fb89 	bl	8002e44 <__aeabi_dmul>
 8002732:	a31f      	add	r3, pc, #124	; (adr r3, 80027b0 <__ieee754_log+0x338>)
 8002734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002738:	4680      	mov	r8, r0
 800273a:	4689      	mov	r9, r1
 800273c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8002740:	f000 fb80 	bl	8002e44 <__aeabi_dmul>
 8002744:	4602      	mov	r2, r0
 8002746:	460b      	mov	r3, r1
 8002748:	4640      	mov	r0, r8
 800274a:	4649      	mov	r1, r9
 800274c:	f000 f9c4 	bl	8002ad8 <__adddf3>
 8002750:	4602      	mov	r2, r0
 8002752:	460b      	mov	r3, r1
 8002754:	4620      	mov	r0, r4
 8002756:	4629      	mov	r1, r5
 8002758:	f000 f9bc 	bl	8002ad4 <__aeabi_dsub>
 800275c:	4652      	mov	r2, sl
 800275e:	465b      	mov	r3, fp
 8002760:	f000 f9b8 	bl	8002ad4 <__aeabi_dsub>
 8002764:	4602      	mov	r2, r0
 8002766:	460b      	mov	r3, r1
 8002768:	4630      	mov	r0, r6
 800276a:	4639      	mov	r1, r7
 800276c:	f000 f9b2 	bl	8002ad4 <__aeabi_dsub>
 8002770:	b007      	add	sp, #28
 8002772:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002776:	4630      	mov	r0, r6
 8002778:	f000 fafa 	bl	8002d70 <__aeabi_i2d>
 800277c:	a30a      	add	r3, pc, #40	; (adr r3, 80027a8 <__ieee754_log+0x330>)
 800277e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002782:	4680      	mov	r8, r0
 8002784:	4689      	mov	r9, r1
 8002786:	f000 fb5d 	bl	8002e44 <__aeabi_dmul>
 800278a:	a309      	add	r3, pc, #36	; (adr r3, 80027b0 <__ieee754_log+0x338>)
 800278c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002790:	4606      	mov	r6, r0
 8002792:	460f      	mov	r7, r1
 8002794:	4640      	mov	r0, r8
 8002796:	4649      	mov	r1, r9
 8002798:	f000 fb54 	bl	8002e44 <__aeabi_dmul>
 800279c:	e7d8      	b.n	8002750 <__ieee754_log+0x2d8>
 800279e:	2000      	movs	r0, #0
 80027a0:	2100      	movs	r1, #0
 80027a2:	e6d4      	b.n	800254e <__ieee754_log+0xd6>
 80027a4:	f3af 8000 	nop.w
 80027a8:	fee00000 	.word	0xfee00000
 80027ac:	3fe62e42 	.word	0x3fe62e42
 80027b0:	35793c76 	.word	0x35793c76
 80027b4:	3dea39ef 	.word	0x3dea39ef
 80027b8:	df3e5244 	.word	0xdf3e5244
 80027bc:	3fc2f112 	.word	0x3fc2f112
 80027c0:	96cb03de 	.word	0x96cb03de
 80027c4:	3fc74664 	.word	0x3fc74664
 80027c8:	94229359 	.word	0x94229359
 80027cc:	3fd24924 	.word	0x3fd24924
 80027d0:	55555593 	.word	0x55555593
 80027d4:	3fe55555 	.word	0x3fe55555
 80027d8:	d078c69f 	.word	0xd078c69f
 80027dc:	3fc39a09 	.word	0x3fc39a09
 80027e0:	1d8e78af 	.word	0x1d8e78af
 80027e4:	3fcc71c5 	.word	0x3fcc71c5
 80027e8:	9997fa04 	.word	0x9997fa04
 80027ec:	3fd99999 	.word	0x3fd99999
 80027f0:	55555555 	.word	0x55555555
 80027f4:	3fd55555 	.word	0x3fd55555
 80027f8:	43500000 	.word	0x43500000
 80027fc:	7fefffff 	.word	0x7fefffff
 8002800:	3ff00000 	.word	0x3ff00000
 8002804:	3fe00000 	.word	0x3fe00000
 8002808:	c3500000 	.word	0xc3500000
 800280c:	a316      	add	r3, pc, #88	; (adr r3, 8002868 <__ieee754_log+0x3f0>)
 800280e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002812:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8002816:	f000 fb15 	bl	8002e44 <__aeabi_dmul>
 800281a:	4642      	mov	r2, r8
 800281c:	464b      	mov	r3, r9
 800281e:	4604      	mov	r4, r0
 8002820:	460d      	mov	r5, r1
 8002822:	4650      	mov	r0, sl
 8002824:	4659      	mov	r1, fp
 8002826:	f000 f955 	bl	8002ad4 <__aeabi_dsub>
 800282a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800282e:	f000 fb09 	bl	8002e44 <__aeabi_dmul>
 8002832:	a30f      	add	r3, pc, #60	; (adr r3, 8002870 <__ieee754_log+0x3f8>)
 8002834:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002838:	4606      	mov	r6, r0
 800283a:	460f      	mov	r7, r1
 800283c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8002840:	f000 fb00 	bl	8002e44 <__aeabi_dmul>
 8002844:	4602      	mov	r2, r0
 8002846:	460b      	mov	r3, r1
 8002848:	4630      	mov	r0, r6
 800284a:	4639      	mov	r1, r7
 800284c:	f000 f942 	bl	8002ad4 <__aeabi_dsub>
 8002850:	4652      	mov	r2, sl
 8002852:	465b      	mov	r3, fp
 8002854:	f000 f93e 	bl	8002ad4 <__aeabi_dsub>
 8002858:	4602      	mov	r2, r0
 800285a:	460b      	mov	r3, r1
 800285c:	4620      	mov	r0, r4
 800285e:	4629      	mov	r1, r5
 8002860:	f000 f938 	bl	8002ad4 <__aeabi_dsub>
 8002864:	e673      	b.n	800254e <__ieee754_log+0xd6>
 8002866:	bf00      	nop
 8002868:	fee00000 	.word	0xfee00000
 800286c:	3fe62e42 	.word	0x3fe62e42
 8002870:	35793c76 	.word	0x35793c76
 8002874:	3dea39ef 	.word	0x3dea39ef
 8002878:	b570      	push	{r4, r5, r6, lr}
 800287a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800287e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8002882:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8002886:	bf1d      	ittte	ne
 8002888:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800288c:	ea94 0f0c 	teqne	r4, ip
 8002890:	ea95 0f0c 	teqne	r5, ip
 8002894:	f000 f8de 	bleq	8002a54 <__ieee754_log+0x5dc>
 8002898:	442c      	add	r4, r5
 800289a:	ea81 0603 	eor.w	r6, r1, r3
 800289e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80028a2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80028a6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80028aa:	bf18      	it	ne
 80028ac:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80028b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80028b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80028b8:	d038      	beq.n	800292c <__ieee754_log+0x4b4>
 80028ba:	fba0 ce02 	umull	ip, lr, r0, r2
 80028be:	f04f 0500 	mov.w	r5, #0
 80028c2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80028c6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80028ca:	fbe0 e503 	umlal	lr, r5, r0, r3
 80028ce:	f04f 0600 	mov.w	r6, #0
 80028d2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80028d6:	f09c 0f00 	teq	ip, #0
 80028da:	bf18      	it	ne
 80028dc:	f04e 0e01 	orrne.w	lr, lr, #1
 80028e0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80028e4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80028e8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80028ec:	d204      	bcs.n	80028f8 <__ieee754_log+0x480>
 80028ee:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80028f2:	416d      	adcs	r5, r5
 80028f4:	eb46 0606 	adc.w	r6, r6, r6
 80028f8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80028fc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8002900:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8002904:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8002908:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800290c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8002910:	bf88      	it	hi
 8002912:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8002916:	d81e      	bhi.n	8002956 <__ieee754_log+0x4de>
 8002918:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800291c:	bf08      	it	eq
 800291e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8002922:	f150 0000 	adcs.w	r0, r0, #0
 8002926:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800292a:	bd70      	pop	{r4, r5, r6, pc}
 800292c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8002930:	ea46 0101 	orr.w	r1, r6, r1
 8002934:	ea40 0002 	orr.w	r0, r0, r2
 8002938:	ea81 0103 	eor.w	r1, r1, r3
 800293c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8002940:	bfc2      	ittt	gt
 8002942:	ebd4 050c 	rsbsgt	r5, r4, ip
 8002946:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800294a:	bd70      	popgt	{r4, r5, r6, pc}
 800294c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8002950:	f04f 0e00 	mov.w	lr, #0
 8002954:	3c01      	subs	r4, #1
 8002956:	f300 80ab 	bgt.w	8002ab0 <__ieee754_log+0x638>
 800295a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800295e:	bfde      	ittt	le
 8002960:	2000      	movle	r0, #0
 8002962:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8002966:	bd70      	pople	{r4, r5, r6, pc}
 8002968:	f1c4 0400 	rsb	r4, r4, #0
 800296c:	3c20      	subs	r4, #32
 800296e:	da35      	bge.n	80029dc <__ieee754_log+0x564>
 8002970:	340c      	adds	r4, #12
 8002972:	dc1b      	bgt.n	80029ac <__ieee754_log+0x534>
 8002974:	f104 0414 	add.w	r4, r4, #20
 8002978:	f1c4 0520 	rsb	r5, r4, #32
 800297c:	fa00 f305 	lsl.w	r3, r0, r5
 8002980:	fa20 f004 	lsr.w	r0, r0, r4
 8002984:	fa01 f205 	lsl.w	r2, r1, r5
 8002988:	ea40 0002 	orr.w	r0, r0, r2
 800298c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8002990:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8002994:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8002998:	fa21 f604 	lsr.w	r6, r1, r4
 800299c:	eb42 0106 	adc.w	r1, r2, r6
 80029a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80029a4:	bf08      	it	eq
 80029a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80029aa:	bd70      	pop	{r4, r5, r6, pc}
 80029ac:	f1c4 040c 	rsb	r4, r4, #12
 80029b0:	f1c4 0520 	rsb	r5, r4, #32
 80029b4:	fa00 f304 	lsl.w	r3, r0, r4
 80029b8:	fa20 f005 	lsr.w	r0, r0, r5
 80029bc:	fa01 f204 	lsl.w	r2, r1, r4
 80029c0:	ea40 0002 	orr.w	r0, r0, r2
 80029c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80029c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80029cc:	f141 0100 	adc.w	r1, r1, #0
 80029d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80029d4:	bf08      	it	eq
 80029d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80029da:	bd70      	pop	{r4, r5, r6, pc}
 80029dc:	f1c4 0520 	rsb	r5, r4, #32
 80029e0:	fa00 f205 	lsl.w	r2, r0, r5
 80029e4:	ea4e 0e02 	orr.w	lr, lr, r2
 80029e8:	fa20 f304 	lsr.w	r3, r0, r4
 80029ec:	fa01 f205 	lsl.w	r2, r1, r5
 80029f0:	ea43 0302 	orr.w	r3, r3, r2
 80029f4:	fa21 f004 	lsr.w	r0, r1, r4
 80029f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80029fc:	fa21 f204 	lsr.w	r2, r1, r4
 8002a00:	ea20 0002 	bic.w	r0, r0, r2
 8002a04:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8002a08:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8002a0c:	bf08      	it	eq
 8002a0e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8002a12:	bd70      	pop	{r4, r5, r6, pc}
 8002a14:	f094 0f00 	teq	r4, #0
 8002a18:	d10f      	bne.n	8002a3a <__ieee754_log+0x5c2>
 8002a1a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8002a1e:	0040      	lsls	r0, r0, #1
 8002a20:	eb41 0101 	adc.w	r1, r1, r1
 8002a24:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8002a28:	bf08      	it	eq
 8002a2a:	3c01      	subeq	r4, #1
 8002a2c:	d0f7      	beq.n	8002a1e <__ieee754_log+0x5a6>
 8002a2e:	ea41 0106 	orr.w	r1, r1, r6
 8002a32:	f095 0f00 	teq	r5, #0
 8002a36:	bf18      	it	ne
 8002a38:	4770      	bxne	lr
 8002a3a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8002a3e:	0052      	lsls	r2, r2, #1
 8002a40:	eb43 0303 	adc.w	r3, r3, r3
 8002a44:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8002a48:	bf08      	it	eq
 8002a4a:	3d01      	subeq	r5, #1
 8002a4c:	d0f7      	beq.n	8002a3e <__ieee754_log+0x5c6>
 8002a4e:	ea43 0306 	orr.w	r3, r3, r6
 8002a52:	4770      	bx	lr
 8002a54:	ea94 0f0c 	teq	r4, ip
 8002a58:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8002a5c:	bf18      	it	ne
 8002a5e:	ea95 0f0c 	teqne	r5, ip
 8002a62:	d00c      	beq.n	8002a7e <__ieee754_log+0x606>
 8002a64:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8002a68:	bf18      	it	ne
 8002a6a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8002a6e:	d1d1      	bne.n	8002a14 <__ieee754_log+0x59c>
 8002a70:	ea81 0103 	eor.w	r1, r1, r3
 8002a74:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8002a78:	f04f 0000 	mov.w	r0, #0
 8002a7c:	bd70      	pop	{r4, r5, r6, pc}
 8002a7e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8002a82:	bf06      	itte	eq
 8002a84:	4610      	moveq	r0, r2
 8002a86:	4619      	moveq	r1, r3
 8002a88:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8002a8c:	d019      	beq.n	8002ac2 <__ieee754_log+0x64a>
 8002a8e:	ea94 0f0c 	teq	r4, ip
 8002a92:	d102      	bne.n	8002a9a <__ieee754_log+0x622>
 8002a94:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8002a98:	d113      	bne.n	8002ac2 <__ieee754_log+0x64a>
 8002a9a:	ea95 0f0c 	teq	r5, ip
 8002a9e:	d105      	bne.n	8002aac <__ieee754_log+0x634>
 8002aa0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8002aa4:	bf1c      	itt	ne
 8002aa6:	4610      	movne	r0, r2
 8002aa8:	4619      	movne	r1, r3
 8002aaa:	d10a      	bne.n	8002ac2 <__ieee754_log+0x64a>
 8002aac:	ea81 0103 	eor.w	r1, r1, r3
 8002ab0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8002ab4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8002ab8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8002abc:	f04f 0000 	mov.w	r0, #0
 8002ac0:	bd70      	pop	{r4, r5, r6, pc}
 8002ac2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8002ac6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8002aca:	bd70      	pop	{r4, r5, r6, pc}

08002acc <__aeabi_drsub>:
 8002acc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8002ad0:	e002      	b.n	8002ad8 <__adddf3>
 8002ad2:	bf00      	nop

08002ad4 <__aeabi_dsub>:
 8002ad4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08002ad8 <__adddf3>:
 8002ad8:	b530      	push	{r4, r5, lr}
 8002ada:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8002ade:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8002ae2:	ea94 0f05 	teq	r4, r5
 8002ae6:	bf08      	it	eq
 8002ae8:	ea90 0f02 	teqeq	r0, r2
 8002aec:	bf1f      	itttt	ne
 8002aee:	ea54 0c00 	orrsne.w	ip, r4, r0
 8002af2:	ea55 0c02 	orrsne.w	ip, r5, r2
 8002af6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8002afa:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8002afe:	f000 80e2 	beq.w	8002cc6 <__adddf3+0x1ee>
 8002b02:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8002b06:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8002b0a:	bfb8      	it	lt
 8002b0c:	426d      	neglt	r5, r5
 8002b0e:	dd0c      	ble.n	8002b2a <__adddf3+0x52>
 8002b10:	442c      	add	r4, r5
 8002b12:	ea80 0202 	eor.w	r2, r0, r2
 8002b16:	ea81 0303 	eor.w	r3, r1, r3
 8002b1a:	ea82 0000 	eor.w	r0, r2, r0
 8002b1e:	ea83 0101 	eor.w	r1, r3, r1
 8002b22:	ea80 0202 	eor.w	r2, r0, r2
 8002b26:	ea81 0303 	eor.w	r3, r1, r3
 8002b2a:	2d36      	cmp	r5, #54	; 0x36
 8002b2c:	bf88      	it	hi
 8002b2e:	bd30      	pophi	{r4, r5, pc}
 8002b30:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8002b34:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8002b38:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8002b3c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8002b40:	d002      	beq.n	8002b48 <__adddf3+0x70>
 8002b42:	4240      	negs	r0, r0
 8002b44:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8002b48:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8002b4c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8002b50:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8002b54:	d002      	beq.n	8002b5c <__adddf3+0x84>
 8002b56:	4252      	negs	r2, r2
 8002b58:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8002b5c:	ea94 0f05 	teq	r4, r5
 8002b60:	f000 80a7 	beq.w	8002cb2 <__adddf3+0x1da>
 8002b64:	f1a4 0401 	sub.w	r4, r4, #1
 8002b68:	f1d5 0e20 	rsbs	lr, r5, #32
 8002b6c:	db0d      	blt.n	8002b8a <__adddf3+0xb2>
 8002b6e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8002b72:	fa22 f205 	lsr.w	r2, r2, r5
 8002b76:	1880      	adds	r0, r0, r2
 8002b78:	f141 0100 	adc.w	r1, r1, #0
 8002b7c:	fa03 f20e 	lsl.w	r2, r3, lr
 8002b80:	1880      	adds	r0, r0, r2
 8002b82:	fa43 f305 	asr.w	r3, r3, r5
 8002b86:	4159      	adcs	r1, r3
 8002b88:	e00e      	b.n	8002ba8 <__adddf3+0xd0>
 8002b8a:	f1a5 0520 	sub.w	r5, r5, #32
 8002b8e:	f10e 0e20 	add.w	lr, lr, #32
 8002b92:	2a01      	cmp	r2, #1
 8002b94:	fa03 fc0e 	lsl.w	ip, r3, lr
 8002b98:	bf28      	it	cs
 8002b9a:	f04c 0c02 	orrcs.w	ip, ip, #2
 8002b9e:	fa43 f305 	asr.w	r3, r3, r5
 8002ba2:	18c0      	adds	r0, r0, r3
 8002ba4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8002ba8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8002bac:	d507      	bpl.n	8002bbe <__adddf3+0xe6>
 8002bae:	f04f 0e00 	mov.w	lr, #0
 8002bb2:	f1dc 0c00 	rsbs	ip, ip, #0
 8002bb6:	eb7e 0000 	sbcs.w	r0, lr, r0
 8002bba:	eb6e 0101 	sbc.w	r1, lr, r1
 8002bbe:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8002bc2:	d31b      	bcc.n	8002bfc <__adddf3+0x124>
 8002bc4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8002bc8:	d30c      	bcc.n	8002be4 <__adddf3+0x10c>
 8002bca:	0849      	lsrs	r1, r1, #1
 8002bcc:	ea5f 0030 	movs.w	r0, r0, rrx
 8002bd0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8002bd4:	f104 0401 	add.w	r4, r4, #1
 8002bd8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8002bdc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8002be0:	f080 809a 	bcs.w	8002d18 <__adddf3+0x240>
 8002be4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8002be8:	bf08      	it	eq
 8002bea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8002bee:	f150 0000 	adcs.w	r0, r0, #0
 8002bf2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8002bf6:	ea41 0105 	orr.w	r1, r1, r5
 8002bfa:	bd30      	pop	{r4, r5, pc}
 8002bfc:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8002c00:	4140      	adcs	r0, r0
 8002c02:	eb41 0101 	adc.w	r1, r1, r1
 8002c06:	3c01      	subs	r4, #1
 8002c08:	bf28      	it	cs
 8002c0a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8002c0e:	d2e9      	bcs.n	8002be4 <__adddf3+0x10c>
 8002c10:	f091 0f00 	teq	r1, #0
 8002c14:	bf04      	itt	eq
 8002c16:	4601      	moveq	r1, r0
 8002c18:	2000      	moveq	r0, #0
 8002c1a:	fab1 f381 	clz	r3, r1
 8002c1e:	bf08      	it	eq
 8002c20:	3320      	addeq	r3, #32
 8002c22:	f1a3 030b 	sub.w	r3, r3, #11
 8002c26:	f1b3 0220 	subs.w	r2, r3, #32
 8002c2a:	da0c      	bge.n	8002c46 <__adddf3+0x16e>
 8002c2c:	320c      	adds	r2, #12
 8002c2e:	dd08      	ble.n	8002c42 <__adddf3+0x16a>
 8002c30:	f102 0c14 	add.w	ip, r2, #20
 8002c34:	f1c2 020c 	rsb	r2, r2, #12
 8002c38:	fa01 f00c 	lsl.w	r0, r1, ip
 8002c3c:	fa21 f102 	lsr.w	r1, r1, r2
 8002c40:	e00c      	b.n	8002c5c <__adddf3+0x184>
 8002c42:	f102 0214 	add.w	r2, r2, #20
 8002c46:	bfd8      	it	le
 8002c48:	f1c2 0c20 	rsble	ip, r2, #32
 8002c4c:	fa01 f102 	lsl.w	r1, r1, r2
 8002c50:	fa20 fc0c 	lsr.w	ip, r0, ip
 8002c54:	bfdc      	itt	le
 8002c56:	ea41 010c 	orrle.w	r1, r1, ip
 8002c5a:	4090      	lslle	r0, r2
 8002c5c:	1ae4      	subs	r4, r4, r3
 8002c5e:	bfa2      	ittt	ge
 8002c60:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8002c64:	4329      	orrge	r1, r5
 8002c66:	bd30      	popge	{r4, r5, pc}
 8002c68:	ea6f 0404 	mvn.w	r4, r4
 8002c6c:	3c1f      	subs	r4, #31
 8002c6e:	da1c      	bge.n	8002caa <__adddf3+0x1d2>
 8002c70:	340c      	adds	r4, #12
 8002c72:	dc0e      	bgt.n	8002c92 <__adddf3+0x1ba>
 8002c74:	f104 0414 	add.w	r4, r4, #20
 8002c78:	f1c4 0220 	rsb	r2, r4, #32
 8002c7c:	fa20 f004 	lsr.w	r0, r0, r4
 8002c80:	fa01 f302 	lsl.w	r3, r1, r2
 8002c84:	ea40 0003 	orr.w	r0, r0, r3
 8002c88:	fa21 f304 	lsr.w	r3, r1, r4
 8002c8c:	ea45 0103 	orr.w	r1, r5, r3
 8002c90:	bd30      	pop	{r4, r5, pc}
 8002c92:	f1c4 040c 	rsb	r4, r4, #12
 8002c96:	f1c4 0220 	rsb	r2, r4, #32
 8002c9a:	fa20 f002 	lsr.w	r0, r0, r2
 8002c9e:	fa01 f304 	lsl.w	r3, r1, r4
 8002ca2:	ea40 0003 	orr.w	r0, r0, r3
 8002ca6:	4629      	mov	r1, r5
 8002ca8:	bd30      	pop	{r4, r5, pc}
 8002caa:	fa21 f004 	lsr.w	r0, r1, r4
 8002cae:	4629      	mov	r1, r5
 8002cb0:	bd30      	pop	{r4, r5, pc}
 8002cb2:	f094 0f00 	teq	r4, #0
 8002cb6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8002cba:	bf06      	itte	eq
 8002cbc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8002cc0:	3401      	addeq	r4, #1
 8002cc2:	3d01      	subne	r5, #1
 8002cc4:	e74e      	b.n	8002b64 <__adddf3+0x8c>
 8002cc6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8002cca:	bf18      	it	ne
 8002ccc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8002cd0:	d029      	beq.n	8002d26 <__adddf3+0x24e>
 8002cd2:	ea94 0f05 	teq	r4, r5
 8002cd6:	bf08      	it	eq
 8002cd8:	ea90 0f02 	teqeq	r0, r2
 8002cdc:	d005      	beq.n	8002cea <__adddf3+0x212>
 8002cde:	ea54 0c00 	orrs.w	ip, r4, r0
 8002ce2:	bf04      	itt	eq
 8002ce4:	4619      	moveq	r1, r3
 8002ce6:	4610      	moveq	r0, r2
 8002ce8:	bd30      	pop	{r4, r5, pc}
 8002cea:	ea91 0f03 	teq	r1, r3
 8002cee:	bf1e      	ittt	ne
 8002cf0:	2100      	movne	r1, #0
 8002cf2:	2000      	movne	r0, #0
 8002cf4:	bd30      	popne	{r4, r5, pc}
 8002cf6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8002cfa:	d105      	bne.n	8002d08 <__adddf3+0x230>
 8002cfc:	0040      	lsls	r0, r0, #1
 8002cfe:	4149      	adcs	r1, r1
 8002d00:	bf28      	it	cs
 8002d02:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8002d06:	bd30      	pop	{r4, r5, pc}
 8002d08:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8002d0c:	bf3c      	itt	cc
 8002d0e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8002d12:	bd30      	popcc	{r4, r5, pc}
 8002d14:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8002d18:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8002d1c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8002d20:	f04f 0000 	mov.w	r0, #0
 8002d24:	bd30      	pop	{r4, r5, pc}
 8002d26:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8002d2a:	bf1a      	itte	ne
 8002d2c:	4619      	movne	r1, r3
 8002d2e:	4610      	movne	r0, r2
 8002d30:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8002d34:	bf1c      	itt	ne
 8002d36:	460b      	movne	r3, r1
 8002d38:	4602      	movne	r2, r0
 8002d3a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8002d3e:	bf06      	itte	eq
 8002d40:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8002d44:	ea91 0f03 	teqeq	r1, r3
 8002d48:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8002d4c:	bd30      	pop	{r4, r5, pc}
 8002d4e:	bf00      	nop

08002d50 <__aeabi_ui2d>:
 8002d50:	f090 0f00 	teq	r0, #0
 8002d54:	bf04      	itt	eq
 8002d56:	2100      	moveq	r1, #0
 8002d58:	4770      	bxeq	lr
 8002d5a:	b530      	push	{r4, r5, lr}
 8002d5c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8002d60:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8002d64:	f04f 0500 	mov.w	r5, #0
 8002d68:	f04f 0100 	mov.w	r1, #0
 8002d6c:	e750      	b.n	8002c10 <__adddf3+0x138>
 8002d6e:	bf00      	nop

08002d70 <__aeabi_i2d>:
 8002d70:	f090 0f00 	teq	r0, #0
 8002d74:	bf04      	itt	eq
 8002d76:	2100      	moveq	r1, #0
 8002d78:	4770      	bxeq	lr
 8002d7a:	b530      	push	{r4, r5, lr}
 8002d7c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8002d80:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8002d84:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8002d88:	bf48      	it	mi
 8002d8a:	4240      	negmi	r0, r0
 8002d8c:	f04f 0100 	mov.w	r1, #0
 8002d90:	e73e      	b.n	8002c10 <__adddf3+0x138>
 8002d92:	bf00      	nop

08002d94 <__aeabi_f2d>:
 8002d94:	0042      	lsls	r2, r0, #1
 8002d96:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8002d9a:	ea4f 0131 	mov.w	r1, r1, rrx
 8002d9e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8002da2:	bf1f      	itttt	ne
 8002da4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8002da8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8002dac:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8002db0:	4770      	bxne	lr
 8002db2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8002db6:	bf08      	it	eq
 8002db8:	4770      	bxeq	lr
 8002dba:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8002dbe:	bf04      	itt	eq
 8002dc0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8002dc4:	4770      	bxeq	lr
 8002dc6:	b530      	push	{r4, r5, lr}
 8002dc8:	f44f 7460 	mov.w	r4, #896	; 0x380
 8002dcc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8002dd0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8002dd4:	e71c      	b.n	8002c10 <__adddf3+0x138>
 8002dd6:	bf00      	nop

08002dd8 <__aeabi_ul2d>:
 8002dd8:	ea50 0201 	orrs.w	r2, r0, r1
 8002ddc:	bf08      	it	eq
 8002dde:	4770      	bxeq	lr
 8002de0:	b530      	push	{r4, r5, lr}
 8002de2:	f04f 0500 	mov.w	r5, #0
 8002de6:	e00a      	b.n	8002dfe <__aeabi_l2d+0x16>

08002de8 <__aeabi_l2d>:
 8002de8:	ea50 0201 	orrs.w	r2, r0, r1
 8002dec:	bf08      	it	eq
 8002dee:	4770      	bxeq	lr
 8002df0:	b530      	push	{r4, r5, lr}
 8002df2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8002df6:	d502      	bpl.n	8002dfe <__aeabi_l2d+0x16>
 8002df8:	4240      	negs	r0, r0
 8002dfa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8002dfe:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8002e02:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8002e06:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8002e0a:	f43f aed8 	beq.w	8002bbe <__adddf3+0xe6>
 8002e0e:	f04f 0203 	mov.w	r2, #3
 8002e12:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8002e16:	bf18      	it	ne
 8002e18:	3203      	addne	r2, #3
 8002e1a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8002e1e:	bf18      	it	ne
 8002e20:	3203      	addne	r2, #3
 8002e22:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8002e26:	f1c2 0320 	rsb	r3, r2, #32
 8002e2a:	fa00 fc03 	lsl.w	ip, r0, r3
 8002e2e:	fa20 f002 	lsr.w	r0, r0, r2
 8002e32:	fa01 fe03 	lsl.w	lr, r1, r3
 8002e36:	ea40 000e 	orr.w	r0, r0, lr
 8002e3a:	fa21 f102 	lsr.w	r1, r1, r2
 8002e3e:	4414      	add	r4, r2
 8002e40:	e6bd      	b.n	8002bbe <__adddf3+0xe6>
 8002e42:	bf00      	nop

08002e44 <__aeabi_dmul>:
 8002e44:	b570      	push	{r4, r5, r6, lr}
 8002e46:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8002e4a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8002e4e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8002e52:	bf1d      	ittte	ne
 8002e54:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8002e58:	ea94 0f0c 	teqne	r4, ip
 8002e5c:	ea95 0f0c 	teqne	r5, ip
 8002e60:	f000 f8de 	bleq	8003020 <__aeabi_dmul+0x1dc>
 8002e64:	442c      	add	r4, r5
 8002e66:	ea81 0603 	eor.w	r6, r1, r3
 8002e6a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8002e6e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8002e72:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8002e76:	bf18      	it	ne
 8002e78:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8002e7c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8002e80:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e84:	d038      	beq.n	8002ef8 <__aeabi_dmul+0xb4>
 8002e86:	fba0 ce02 	umull	ip, lr, r0, r2
 8002e8a:	f04f 0500 	mov.w	r5, #0
 8002e8e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8002e92:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8002e96:	fbe0 e503 	umlal	lr, r5, r0, r3
 8002e9a:	f04f 0600 	mov.w	r6, #0
 8002e9e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8002ea2:	f09c 0f00 	teq	ip, #0
 8002ea6:	bf18      	it	ne
 8002ea8:	f04e 0e01 	orrne.w	lr, lr, #1
 8002eac:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8002eb0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8002eb4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8002eb8:	d204      	bcs.n	8002ec4 <__aeabi_dmul+0x80>
 8002eba:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8002ebe:	416d      	adcs	r5, r5
 8002ec0:	eb46 0606 	adc.w	r6, r6, r6
 8002ec4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8002ec8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8002ecc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8002ed0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8002ed4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8002ed8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8002edc:	bf88      	it	hi
 8002ede:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8002ee2:	d81e      	bhi.n	8002f22 <__aeabi_dmul+0xde>
 8002ee4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8002ee8:	bf08      	it	eq
 8002eea:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8002eee:	f150 0000 	adcs.w	r0, r0, #0
 8002ef2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8002ef6:	bd70      	pop	{r4, r5, r6, pc}
 8002ef8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8002efc:	ea46 0101 	orr.w	r1, r6, r1
 8002f00:	ea40 0002 	orr.w	r0, r0, r2
 8002f04:	ea81 0103 	eor.w	r1, r1, r3
 8002f08:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8002f0c:	bfc2      	ittt	gt
 8002f0e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8002f12:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8002f16:	bd70      	popgt	{r4, r5, r6, pc}
 8002f18:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8002f1c:	f04f 0e00 	mov.w	lr, #0
 8002f20:	3c01      	subs	r4, #1
 8002f22:	f300 80ab 	bgt.w	800307c <__aeabi_dmul+0x238>
 8002f26:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8002f2a:	bfde      	ittt	le
 8002f2c:	2000      	movle	r0, #0
 8002f2e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8002f32:	bd70      	pople	{r4, r5, r6, pc}
 8002f34:	f1c4 0400 	rsb	r4, r4, #0
 8002f38:	3c20      	subs	r4, #32
 8002f3a:	da35      	bge.n	8002fa8 <__aeabi_dmul+0x164>
 8002f3c:	340c      	adds	r4, #12
 8002f3e:	dc1b      	bgt.n	8002f78 <__aeabi_dmul+0x134>
 8002f40:	f104 0414 	add.w	r4, r4, #20
 8002f44:	f1c4 0520 	rsb	r5, r4, #32
 8002f48:	fa00 f305 	lsl.w	r3, r0, r5
 8002f4c:	fa20 f004 	lsr.w	r0, r0, r4
 8002f50:	fa01 f205 	lsl.w	r2, r1, r5
 8002f54:	ea40 0002 	orr.w	r0, r0, r2
 8002f58:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8002f5c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8002f60:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8002f64:	fa21 f604 	lsr.w	r6, r1, r4
 8002f68:	eb42 0106 	adc.w	r1, r2, r6
 8002f6c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8002f70:	bf08      	it	eq
 8002f72:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8002f76:	bd70      	pop	{r4, r5, r6, pc}
 8002f78:	f1c4 040c 	rsb	r4, r4, #12
 8002f7c:	f1c4 0520 	rsb	r5, r4, #32
 8002f80:	fa00 f304 	lsl.w	r3, r0, r4
 8002f84:	fa20 f005 	lsr.w	r0, r0, r5
 8002f88:	fa01 f204 	lsl.w	r2, r1, r4
 8002f8c:	ea40 0002 	orr.w	r0, r0, r2
 8002f90:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8002f94:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8002f98:	f141 0100 	adc.w	r1, r1, #0
 8002f9c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8002fa0:	bf08      	it	eq
 8002fa2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8002fa6:	bd70      	pop	{r4, r5, r6, pc}
 8002fa8:	f1c4 0520 	rsb	r5, r4, #32
 8002fac:	fa00 f205 	lsl.w	r2, r0, r5
 8002fb0:	ea4e 0e02 	orr.w	lr, lr, r2
 8002fb4:	fa20 f304 	lsr.w	r3, r0, r4
 8002fb8:	fa01 f205 	lsl.w	r2, r1, r5
 8002fbc:	ea43 0302 	orr.w	r3, r3, r2
 8002fc0:	fa21 f004 	lsr.w	r0, r1, r4
 8002fc4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8002fc8:	fa21 f204 	lsr.w	r2, r1, r4
 8002fcc:	ea20 0002 	bic.w	r0, r0, r2
 8002fd0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8002fd4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8002fd8:	bf08      	it	eq
 8002fda:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8002fde:	bd70      	pop	{r4, r5, r6, pc}
 8002fe0:	f094 0f00 	teq	r4, #0
 8002fe4:	d10f      	bne.n	8003006 <__aeabi_dmul+0x1c2>
 8002fe6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8002fea:	0040      	lsls	r0, r0, #1
 8002fec:	eb41 0101 	adc.w	r1, r1, r1
 8002ff0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8002ff4:	bf08      	it	eq
 8002ff6:	3c01      	subeq	r4, #1
 8002ff8:	d0f7      	beq.n	8002fea <__aeabi_dmul+0x1a6>
 8002ffa:	ea41 0106 	orr.w	r1, r1, r6
 8002ffe:	f095 0f00 	teq	r5, #0
 8003002:	bf18      	it	ne
 8003004:	4770      	bxne	lr
 8003006:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800300a:	0052      	lsls	r2, r2, #1
 800300c:	eb43 0303 	adc.w	r3, r3, r3
 8003010:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8003014:	bf08      	it	eq
 8003016:	3d01      	subeq	r5, #1
 8003018:	d0f7      	beq.n	800300a <__aeabi_dmul+0x1c6>
 800301a:	ea43 0306 	orr.w	r3, r3, r6
 800301e:	4770      	bx	lr
 8003020:	ea94 0f0c 	teq	r4, ip
 8003024:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8003028:	bf18      	it	ne
 800302a:	ea95 0f0c 	teqne	r5, ip
 800302e:	d00c      	beq.n	800304a <__aeabi_dmul+0x206>
 8003030:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8003034:	bf18      	it	ne
 8003036:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800303a:	d1d1      	bne.n	8002fe0 <__aeabi_dmul+0x19c>
 800303c:	ea81 0103 	eor.w	r1, r1, r3
 8003040:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8003044:	f04f 0000 	mov.w	r0, #0
 8003048:	bd70      	pop	{r4, r5, r6, pc}
 800304a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800304e:	bf06      	itte	eq
 8003050:	4610      	moveq	r0, r2
 8003052:	4619      	moveq	r1, r3
 8003054:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8003058:	d019      	beq.n	800308e <__aeabi_dmul+0x24a>
 800305a:	ea94 0f0c 	teq	r4, ip
 800305e:	d102      	bne.n	8003066 <__aeabi_dmul+0x222>
 8003060:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8003064:	d113      	bne.n	800308e <__aeabi_dmul+0x24a>
 8003066:	ea95 0f0c 	teq	r5, ip
 800306a:	d105      	bne.n	8003078 <__aeabi_dmul+0x234>
 800306c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8003070:	bf1c      	itt	ne
 8003072:	4610      	movne	r0, r2
 8003074:	4619      	movne	r1, r3
 8003076:	d10a      	bne.n	800308e <__aeabi_dmul+0x24a>
 8003078:	ea81 0103 	eor.w	r1, r1, r3
 800307c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8003080:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8003084:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003088:	f04f 0000 	mov.w	r0, #0
 800308c:	bd70      	pop	{r4, r5, r6, pc}
 800308e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8003092:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8003096:	bd70      	pop	{r4, r5, r6, pc}

08003098 <__aeabi_ddiv>:
 8003098:	b570      	push	{r4, r5, r6, lr}
 800309a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800309e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80030a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80030a6:	bf1d      	ittte	ne
 80030a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80030ac:	ea94 0f0c 	teqne	r4, ip
 80030b0:	ea95 0f0c 	teqne	r5, ip
 80030b4:	f000 f8a7 	bleq	8003206 <__aeabi_ddiv+0x16e>
 80030b8:	eba4 0405 	sub.w	r4, r4, r5
 80030bc:	ea81 0e03 	eor.w	lr, r1, r3
 80030c0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80030c4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80030c8:	f000 8088 	beq.w	80031dc <__aeabi_ddiv+0x144>
 80030cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80030d0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80030d4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80030d8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80030dc:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80030e0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80030e4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80030e8:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80030ec:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80030f0:	429d      	cmp	r5, r3
 80030f2:	bf08      	it	eq
 80030f4:	4296      	cmpeq	r6, r2
 80030f6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80030fa:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80030fe:	d202      	bcs.n	8003106 <__aeabi_ddiv+0x6e>
 8003100:	085b      	lsrs	r3, r3, #1
 8003102:	ea4f 0232 	mov.w	r2, r2, rrx
 8003106:	1ab6      	subs	r6, r6, r2
 8003108:	eb65 0503 	sbc.w	r5, r5, r3
 800310c:	085b      	lsrs	r3, r3, #1
 800310e:	ea4f 0232 	mov.w	r2, r2, rrx
 8003112:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8003116:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800311a:	ebb6 0e02 	subs.w	lr, r6, r2
 800311e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8003122:	bf22      	ittt	cs
 8003124:	1ab6      	subcs	r6, r6, r2
 8003126:	4675      	movcs	r5, lr
 8003128:	ea40 000c 	orrcs.w	r0, r0, ip
 800312c:	085b      	lsrs	r3, r3, #1
 800312e:	ea4f 0232 	mov.w	r2, r2, rrx
 8003132:	ebb6 0e02 	subs.w	lr, r6, r2
 8003136:	eb75 0e03 	sbcs.w	lr, r5, r3
 800313a:	bf22      	ittt	cs
 800313c:	1ab6      	subcs	r6, r6, r2
 800313e:	4675      	movcs	r5, lr
 8003140:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8003144:	085b      	lsrs	r3, r3, #1
 8003146:	ea4f 0232 	mov.w	r2, r2, rrx
 800314a:	ebb6 0e02 	subs.w	lr, r6, r2
 800314e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8003152:	bf22      	ittt	cs
 8003154:	1ab6      	subcs	r6, r6, r2
 8003156:	4675      	movcs	r5, lr
 8003158:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800315c:	085b      	lsrs	r3, r3, #1
 800315e:	ea4f 0232 	mov.w	r2, r2, rrx
 8003162:	ebb6 0e02 	subs.w	lr, r6, r2
 8003166:	eb75 0e03 	sbcs.w	lr, r5, r3
 800316a:	bf22      	ittt	cs
 800316c:	1ab6      	subcs	r6, r6, r2
 800316e:	4675      	movcs	r5, lr
 8003170:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8003174:	ea55 0e06 	orrs.w	lr, r5, r6
 8003178:	d018      	beq.n	80031ac <__aeabi_ddiv+0x114>
 800317a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800317e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8003182:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8003186:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800318a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800318e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8003192:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8003196:	d1c0      	bne.n	800311a <__aeabi_ddiv+0x82>
 8003198:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800319c:	d10b      	bne.n	80031b6 <__aeabi_ddiv+0x11e>
 800319e:	ea41 0100 	orr.w	r1, r1, r0
 80031a2:	f04f 0000 	mov.w	r0, #0
 80031a6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80031aa:	e7b6      	b.n	800311a <__aeabi_ddiv+0x82>
 80031ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80031b0:	bf04      	itt	eq
 80031b2:	4301      	orreq	r1, r0
 80031b4:	2000      	moveq	r0, #0
 80031b6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80031ba:	bf88      	it	hi
 80031bc:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80031c0:	f63f aeaf 	bhi.w	8002f22 <__aeabi_dmul+0xde>
 80031c4:	ebb5 0c03 	subs.w	ip, r5, r3
 80031c8:	bf04      	itt	eq
 80031ca:	ebb6 0c02 	subseq.w	ip, r6, r2
 80031ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80031d2:	f150 0000 	adcs.w	r0, r0, #0
 80031d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80031da:	bd70      	pop	{r4, r5, r6, pc}
 80031dc:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80031e0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80031e4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80031e8:	bfc2      	ittt	gt
 80031ea:	ebd4 050c 	rsbsgt	r5, r4, ip
 80031ee:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80031f2:	bd70      	popgt	{r4, r5, r6, pc}
 80031f4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80031f8:	f04f 0e00 	mov.w	lr, #0
 80031fc:	3c01      	subs	r4, #1
 80031fe:	e690      	b.n	8002f22 <__aeabi_dmul+0xde>
 8003200:	ea45 0e06 	orr.w	lr, r5, r6
 8003204:	e68d      	b.n	8002f22 <__aeabi_dmul+0xde>
 8003206:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800320a:	ea94 0f0c 	teq	r4, ip
 800320e:	bf08      	it	eq
 8003210:	ea95 0f0c 	teqeq	r5, ip
 8003214:	f43f af3b 	beq.w	800308e <__aeabi_dmul+0x24a>
 8003218:	ea94 0f0c 	teq	r4, ip
 800321c:	d10a      	bne.n	8003234 <__aeabi_ddiv+0x19c>
 800321e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8003222:	f47f af34 	bne.w	800308e <__aeabi_dmul+0x24a>
 8003226:	ea95 0f0c 	teq	r5, ip
 800322a:	f47f af25 	bne.w	8003078 <__aeabi_dmul+0x234>
 800322e:	4610      	mov	r0, r2
 8003230:	4619      	mov	r1, r3
 8003232:	e72c      	b.n	800308e <__aeabi_dmul+0x24a>
 8003234:	ea95 0f0c 	teq	r5, ip
 8003238:	d106      	bne.n	8003248 <__aeabi_ddiv+0x1b0>
 800323a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800323e:	f43f aefd 	beq.w	800303c <__aeabi_dmul+0x1f8>
 8003242:	4610      	mov	r0, r2
 8003244:	4619      	mov	r1, r3
 8003246:	e722      	b.n	800308e <__aeabi_dmul+0x24a>
 8003248:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800324c:	bf18      	it	ne
 800324e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8003252:	f47f aec5 	bne.w	8002fe0 <__aeabi_dmul+0x19c>
 8003256:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800325a:	f47f af0d 	bne.w	8003078 <__aeabi_dmul+0x234>
 800325e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8003262:	f47f aeeb 	bne.w	800303c <__aeabi_dmul+0x1f8>
 8003266:	e712      	b.n	800308e <__aeabi_dmul+0x24a>

08003268 <__gedf2>:
 8003268:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800326c:	e006      	b.n	800327c <__cmpdf2+0x4>
 800326e:	bf00      	nop

08003270 <__ledf2>:
 8003270:	f04f 0c01 	mov.w	ip, #1
 8003274:	e002      	b.n	800327c <__cmpdf2+0x4>
 8003276:	bf00      	nop

08003278 <__cmpdf2>:
 8003278:	f04f 0c01 	mov.w	ip, #1
 800327c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8003280:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8003284:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8003288:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800328c:	bf18      	it	ne
 800328e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8003292:	d01b      	beq.n	80032cc <__cmpdf2+0x54>
 8003294:	b001      	add	sp, #4
 8003296:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800329a:	bf0c      	ite	eq
 800329c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80032a0:	ea91 0f03 	teqne	r1, r3
 80032a4:	bf02      	ittt	eq
 80032a6:	ea90 0f02 	teqeq	r0, r2
 80032aa:	2000      	moveq	r0, #0
 80032ac:	4770      	bxeq	lr
 80032ae:	f110 0f00 	cmn.w	r0, #0
 80032b2:	ea91 0f03 	teq	r1, r3
 80032b6:	bf58      	it	pl
 80032b8:	4299      	cmppl	r1, r3
 80032ba:	bf08      	it	eq
 80032bc:	4290      	cmpeq	r0, r2
 80032be:	bf2c      	ite	cs
 80032c0:	17d8      	asrcs	r0, r3, #31
 80032c2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80032c6:	f040 0001 	orr.w	r0, r0, #1
 80032ca:	4770      	bx	lr
 80032cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80032d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80032d4:	d102      	bne.n	80032dc <__cmpdf2+0x64>
 80032d6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80032da:	d107      	bne.n	80032ec <__cmpdf2+0x74>
 80032dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80032e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80032e4:	d1d6      	bne.n	8003294 <__cmpdf2+0x1c>
 80032e6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80032ea:	d0d3      	beq.n	8003294 <__cmpdf2+0x1c>
 80032ec:	f85d 0b04 	ldr.w	r0, [sp], #4
 80032f0:	4770      	bx	lr
 80032f2:	bf00      	nop

080032f4 <__aeabi_cdrcmple>:
 80032f4:	4684      	mov	ip, r0
 80032f6:	4610      	mov	r0, r2
 80032f8:	4662      	mov	r2, ip
 80032fa:	468c      	mov	ip, r1
 80032fc:	4619      	mov	r1, r3
 80032fe:	4663      	mov	r3, ip
 8003300:	e000      	b.n	8003304 <__aeabi_cdcmpeq>
 8003302:	bf00      	nop

08003304 <__aeabi_cdcmpeq>:
 8003304:	b501      	push	{r0, lr}
 8003306:	f7ff ffb7 	bl	8003278 <__cmpdf2>
 800330a:	2800      	cmp	r0, #0
 800330c:	bf48      	it	mi
 800330e:	f110 0f00 	cmnmi.w	r0, #0
 8003312:	bd01      	pop	{r0, pc}

08003314 <__aeabi_dcmpeq>:
 8003314:	f84d ed08 	str.w	lr, [sp, #-8]!
 8003318:	f7ff fff4 	bl	8003304 <__aeabi_cdcmpeq>
 800331c:	bf0c      	ite	eq
 800331e:	2001      	moveq	r0, #1
 8003320:	2000      	movne	r0, #0
 8003322:	f85d fb08 	ldr.w	pc, [sp], #8
 8003326:	bf00      	nop

08003328 <__aeabi_dcmplt>:
 8003328:	f84d ed08 	str.w	lr, [sp, #-8]!
 800332c:	f7ff ffea 	bl	8003304 <__aeabi_cdcmpeq>
 8003330:	bf34      	ite	cc
 8003332:	2001      	movcc	r0, #1
 8003334:	2000      	movcs	r0, #0
 8003336:	f85d fb08 	ldr.w	pc, [sp], #8
 800333a:	bf00      	nop

0800333c <__aeabi_dcmple>:
 800333c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8003340:	f7ff ffe0 	bl	8003304 <__aeabi_cdcmpeq>
 8003344:	bf94      	ite	ls
 8003346:	2001      	movls	r0, #1
 8003348:	2000      	movhi	r0, #0
 800334a:	f85d fb08 	ldr.w	pc, [sp], #8
 800334e:	bf00      	nop

08003350 <__aeabi_dcmpge>:
 8003350:	f84d ed08 	str.w	lr, [sp, #-8]!
 8003354:	f7ff ffce 	bl	80032f4 <__aeabi_cdrcmple>
 8003358:	bf94      	ite	ls
 800335a:	2001      	movls	r0, #1
 800335c:	2000      	movhi	r0, #0
 800335e:	f85d fb08 	ldr.w	pc, [sp], #8
 8003362:	bf00      	nop

08003364 <__aeabi_dcmpgt>:
 8003364:	f84d ed08 	str.w	lr, [sp, #-8]!
 8003368:	f7ff ffc4 	bl	80032f4 <__aeabi_cdrcmple>
 800336c:	bf34      	ite	cc
 800336e:	2001      	movcc	r0, #1
 8003370:	2000      	movcs	r0, #0
 8003372:	f85d fb08 	ldr.w	pc, [sp], #8
 8003376:	bf00      	nop

08003378 <__aeabi_dcmpun>:
 8003378:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800337c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8003380:	d102      	bne.n	8003388 <__aeabi_dcmpun+0x10>
 8003382:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8003386:	d10a      	bne.n	800339e <__aeabi_dcmpun+0x26>
 8003388:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800338c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8003390:	d102      	bne.n	8003398 <__aeabi_dcmpun+0x20>
 8003392:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8003396:	d102      	bne.n	800339e <__aeabi_dcmpun+0x26>
 8003398:	f04f 0000 	mov.w	r0, #0
 800339c:	4770      	bx	lr
 800339e:	f04f 0001 	mov.w	r0, #1
 80033a2:	4770      	bx	lr

080033a4 <__aeabi_d2iz>:
 80033a4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80033a8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80033ac:	d215      	bcs.n	80033da <__aeabi_d2iz+0x36>
 80033ae:	d511      	bpl.n	80033d4 <__aeabi_d2iz+0x30>
 80033b0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80033b4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80033b8:	d912      	bls.n	80033e0 <__aeabi_d2iz+0x3c>
 80033ba:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80033be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80033c2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80033c6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80033ca:	fa23 f002 	lsr.w	r0, r3, r2
 80033ce:	bf18      	it	ne
 80033d0:	4240      	negne	r0, r0
 80033d2:	4770      	bx	lr
 80033d4:	f04f 0000 	mov.w	r0, #0
 80033d8:	4770      	bx	lr
 80033da:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80033de:	d105      	bne.n	80033ec <__aeabi_d2iz+0x48>
 80033e0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80033e4:	bf08      	it	eq
 80033e6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80033ea:	4770      	bx	lr
 80033ec:	f04f 0000 	mov.w	r0, #0
 80033f0:	4770      	bx	lr
 80033f2:	bf00      	nop

080033f4 <__aeabi_d2uiz>:
 80033f4:	004a      	lsls	r2, r1, #1
 80033f6:	d211      	bcs.n	800341c <__aeabi_d2uiz+0x28>
 80033f8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80033fc:	d211      	bcs.n	8003422 <__aeabi_d2uiz+0x2e>
 80033fe:	d50d      	bpl.n	800341c <__aeabi_d2uiz+0x28>
 8003400:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8003404:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8003408:	d40e      	bmi.n	8003428 <__aeabi_d2uiz+0x34>
 800340a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800340e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003412:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8003416:	fa23 f002 	lsr.w	r0, r3, r2
 800341a:	4770      	bx	lr
 800341c:	f04f 0000 	mov.w	r0, #0
 8003420:	4770      	bx	lr
 8003422:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8003426:	d102      	bne.n	800342e <__aeabi_d2uiz+0x3a>
 8003428:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800342c:	4770      	bx	lr
 800342e:	f04f 0000 	mov.w	r0, #0
 8003432:	4770      	bx	lr

08003434 <__errno>:
 8003434:	4b01      	ldr	r3, [pc, #4]	; (800343c <__errno+0x8>)
 8003436:	6818      	ldr	r0, [r3, #0]
 8003438:	4770      	bx	lr
 800343a:	bf00      	nop
 800343c:	20000000 	.word	0x20000000

08003440 <__libc_init_array>:
 8003440:	b570      	push	{r4, r5, r6, lr}
 8003442:	4e0d      	ldr	r6, [pc, #52]	; (8003478 <__libc_init_array+0x38>)
 8003444:	4d0d      	ldr	r5, [pc, #52]	; (800347c <__libc_init_array+0x3c>)
 8003446:	1b76      	subs	r6, r6, r5
 8003448:	10b6      	asrs	r6, r6, #2
 800344a:	d006      	beq.n	800345a <__libc_init_array+0x1a>
 800344c:	2400      	movs	r4, #0
 800344e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003452:	3401      	adds	r4, #1
 8003454:	4798      	blx	r3
 8003456:	42a6      	cmp	r6, r4
 8003458:	d1f9      	bne.n	800344e <__libc_init_array+0xe>
 800345a:	4e09      	ldr	r6, [pc, #36]	; (8003480 <__libc_init_array+0x40>)
 800345c:	4d09      	ldr	r5, [pc, #36]	; (8003484 <__libc_init_array+0x44>)
 800345e:	1b76      	subs	r6, r6, r5
 8003460:	f7fd ff72 	bl	8001348 <_init>
 8003464:	10b6      	asrs	r6, r6, #2
 8003466:	d006      	beq.n	8003476 <__libc_init_array+0x36>
 8003468:	2400      	movs	r4, #0
 800346a:	f855 3b04 	ldr.w	r3, [r5], #4
 800346e:	3401      	adds	r4, #1
 8003470:	4798      	blx	r3
 8003472:	42a6      	cmp	r6, r4
 8003474:	d1f9      	bne.n	800346a <__libc_init_array+0x2a>
 8003476:	bd70      	pop	{r4, r5, r6, pc}
 8003478:	20000430 	.word	0x20000430
 800347c:	20000430 	.word	0x20000430
 8003480:	20000430 	.word	0x20000430
 8003484:	20000430 	.word	0x20000430

08003488 <out_config>:
 8003488:	00000080 00010000 00000000              ............

08003494 <in_config>:
 8003494:	00000000 00010000 00000000 61632069     ............i ca
 80034a4:	6f6d206e 00657372 00000000              n morse.....

080034b0 <_global_impure_ptr>:
 80034b0:	20000008                                ... 
