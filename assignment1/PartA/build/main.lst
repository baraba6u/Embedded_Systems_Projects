
build/main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000010a4  08000000  0c000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 Stack         00000800  10000000  10000000  00030000  2**0
                  ALLOC
  2 .ram_code     00000000  10000800  10000800  00020430  2**0
                  CONTENTS
  3 PSRAM_DATA    00000000  10000800  10000800  00020430  2**0
                  CONTENTS
  4 PSRAM_BSS     00000000  10000800  10000800  00020430  2**0
                  CONTENTS
  5 .data         00000430  20000000  0c0010a4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000010  20000430  0c0014d4  00020430  2**2
                  ALLOC
  7 .no_init      00000014  2000ffc0  2000ffc0  0002ffc0  2**2
                  ALLOC
  8 DSRAM2_DATA   00000000  30000000  30000000  00020430  2**0
                  CONTENTS
  9 DSRAM2_BSS    00000000  30000000  30000000  00020430  2**0
                  CONTENTS
 10 .debug_aranges 00000198  00000000  00000000  00020430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_info   00002279  00000000  00000000  000205c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 000008a9  00000000  00000000  00022841  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line   00001fcc  00000000  00000000  000230ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_frame  00000584  00000000  00000000  000250b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00075bd4  00000000  00000000  0002563c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_loc    00000abc  00000000  00000000  0009b210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00000138  00000000  00000000  0009bccc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .build_attributes 000001d6  00000000  00000000  0009be04  2**0
                  CONTENTS, READONLY
 19 .debug_macro  00018be1  00000000  00000000  0009bfda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000000 <__Vectors>:
 8000000:	00 08 00 10 01 02 00 08 b1 02 00 08 b1 02 00 08     ................
 8000010:	b1 02 00 08 b1 02 00 08 b1 02 00 08 00 00 00 00     ................
	...
 800002c:	b1 02 00 08 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 800003c:	f9 03 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800004c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800005c:	b1 02 00 08 b1 02 00 08 00 00 00 00 00 00 00 00     ................
 800006c:	00 00 00 00 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 800007c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800008c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800009c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000ac:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000bc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000cc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000dc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000ec:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000fc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800010c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800011c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800012c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800013c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800014c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800015c:	b1 02 00 08 00 00 00 00 00 00 00 00 00 00 00 00     ................
 800016c:	00 00 00 00 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800017c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800018c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800019c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001ac:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001bc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001cc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001dc:	00 00 00 00 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001ec:	b1 02 00 08 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 80001fc:	00 00 00 00                                         ....

08000200 <Reset_Handler>:
 8000200:	f8df d08c 	ldr.w	sp, [pc, #140]	; 8000290 <__zero_table_end__>
 8000204:	4823      	ldr	r0, [pc, #140]	; (8000294 <__zero_table_end__+0x4>)
 8000206:	4780      	blx	r0
 8000208:	4c23      	ldr	r4, [pc, #140]	; (8000298 <__zero_table_end__+0x8>)
 800020a:	4d24      	ldr	r5, [pc, #144]	; (800029c <__zero_table_end__+0xc>)
 800020c:	42ac      	cmp	r4, r5
 800020e:	da09      	bge.n	8000224 <Reset_Handler+0x24>
 8000210:	6821      	ldr	r1, [r4, #0]
 8000212:	6862      	ldr	r2, [r4, #4]
 8000214:	68a3      	ldr	r3, [r4, #8]
 8000216:	3b04      	subs	r3, #4
 8000218:	bfa2      	ittt	ge
 800021a:	58c8      	ldrge	r0, [r1, r3]
 800021c:	50d0      	strge	r0, [r2, r3]
 800021e:	e7fa      	bge.n	8000216 <Reset_Handler+0x16>
 8000220:	340c      	adds	r4, #12
 8000222:	e7f3      	b.n	800020c <Reset_Handler+0xc>
 8000224:	4b1e      	ldr	r3, [pc, #120]	; (80002a0 <__zero_table_end__+0x10>)
 8000226:	4c1f      	ldr	r4, [pc, #124]	; (80002a4 <__zero_table_end__+0x14>)
 8000228:	42a3      	cmp	r3, r4
 800022a:	da08      	bge.n	800023e <Reset_Handler+0x3e>
 800022c:	6819      	ldr	r1, [r3, #0]
 800022e:	685a      	ldr	r2, [r3, #4]
 8000230:	2000      	movs	r0, #0
 8000232:	3a04      	subs	r2, #4
 8000234:	bfa4      	itt	ge
 8000236:	5088      	strge	r0, [r1, r2]
 8000238:	e7fb      	bge.n	8000232 <Reset_Handler+0x32>
 800023a:	3308      	adds	r3, #8
 800023c:	e7f4      	b.n	8000228 <Reset_Handler+0x28>
 800023e:	481a      	ldr	r0, [pc, #104]	; (80002a8 <__zero_table_end__+0x18>)
 8000240:	4780      	blx	r0
 8000242:	481a      	ldr	r0, [pc, #104]	; (80002ac <__zero_table_end__+0x1c>)
 8000244:	4780      	blx	r0
	...

08000248 <__copy_table_start__>:
 8000248:	0c0010a4 	.word	0x0c0010a4
 800024c:	20000000 	.word	0x20000000
 8000250:	00000430 	.word	0x00000430
 8000254:	0c0014d4 	.word	0x0c0014d4
 8000258:	30000000 	.word	0x30000000
 800025c:	00000000 	.word	0x00000000
 8000260:	0c0010a4 	.word	0x0c0010a4
 8000264:	10000800 	.word	0x10000800
 8000268:	00000000 	.word	0x00000000
 800026c:	0c0010a4 	.word	0x0c0010a4
 8000270:	10000800 	.word	0x10000800
 8000274:	00000000 	.word	0x00000000

08000278 <__copy_table_end__>:
 8000278:	20000430 	.word	0x20000430
 800027c:	0000000c 	.word	0x0000000c
 8000280:	30000000 	.word	0x30000000
 8000284:	00000000 	.word	0x00000000
 8000288:	10000800 	.word	0x10000800
 800028c:	00000000 	.word	0x00000000

08000290 <__zero_table_end__>:
 8000290:	10000800 	.word	0x10000800
 8000294:	08000c29 	.word	0x08000c29
 8000298:	08000248 	.word	0x08000248
 800029c:	08000278 	.word	0x08000278
 80002a0:	08000278 	.word	0x08000278
 80002a4:	08000290 	.word	0x08000290
 80002a8:	08001035 	.word	0x08001035
 80002ac:	08000395 	.word	0x08000395

080002b0 <BusFault_Handler>:
 80002b0:	e7fe      	b.n	80002b0 <BusFault_Handler>
	...

080002b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002b4:	b480      	push	{r7}
 80002b6:	b083      	sub	sp, #12
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	4603      	mov	r3, r0
 80002bc:	6039      	str	r1, [r7, #0]
 80002be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	db0a      	blt.n	80002de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002c8:	683b      	ldr	r3, [r7, #0]
 80002ca:	b2da      	uxtb	r2, r3
 80002cc:	490c      	ldr	r1, [pc, #48]	; (8000300 <__NVIC_SetPriority+0x4c>)
 80002ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002d2:	0092      	lsls	r2, r2, #2
 80002d4:	b2d2      	uxtb	r2, r2
 80002d6:	440b      	add	r3, r1
 80002d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80002dc:	e00a      	b.n	80002f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002de:	683b      	ldr	r3, [r7, #0]
 80002e0:	b2da      	uxtb	r2, r3
 80002e2:	4908      	ldr	r1, [pc, #32]	; (8000304 <__NVIC_SetPriority+0x50>)
 80002e4:	79fb      	ldrb	r3, [r7, #7]
 80002e6:	f003 030f 	and.w	r3, r3, #15
 80002ea:	3b04      	subs	r3, #4
 80002ec:	0092      	lsls	r2, r2, #2
 80002ee:	b2d2      	uxtb	r2, r2
 80002f0:	440b      	add	r3, r1
 80002f2:	761a      	strb	r2, [r3, #24]
}
 80002f4:	bf00      	nop
 80002f6:	370c      	adds	r7, #12
 80002f8:	46bd      	mov	sp, r7
 80002fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002fe:	4770      	bx	lr
 8000300:	e000e100 	.word	0xe000e100
 8000304:	e000ed00 	.word	0xe000ed00

08000308 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	b082      	sub	sp, #8
 800030c:	af00      	add	r7, sp, #0
 800030e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	3b01      	subs	r3, #1
 8000314:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000318:	d301      	bcc.n	800031e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800031a:	2301      	movs	r3, #1
 800031c:	e00f      	b.n	800033e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800031e:	4a0a      	ldr	r2, [pc, #40]	; (8000348 <SysTick_Config+0x40>)
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	3b01      	subs	r3, #1
 8000324:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000326:	213f      	movs	r1, #63	; 0x3f
 8000328:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800032c:	f7ff ffc2 	bl	80002b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000330:	4b05      	ldr	r3, [pc, #20]	; (8000348 <SysTick_Config+0x40>)
 8000332:	2200      	movs	r2, #0
 8000334:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000336:	4b04      	ldr	r3, [pc, #16]	; (8000348 <SysTick_Config+0x40>)
 8000338:	2207      	movs	r2, #7
 800033a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800033c:	2300      	movs	r3, #0
}
 800033e:	4618      	mov	r0, r3
 8000340:	3708      	adds	r7, #8
 8000342:	46bd      	mov	sp, r7
 8000344:	bd80      	pop	{r7, pc}
 8000346:	bf00      	nop
 8000348:	e000e010 	.word	0xe000e010

0800034c <XMC_GPIO_SetOutputHigh>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 800034c:	b480      	push	{r7}
 800034e:	b083      	sub	sp, #12
 8000350:	af00      	add	r7, sp, #0
 8000352:	6078      	str	r0, [r7, #4]
 8000354:	460b      	mov	r3, r1
 8000356:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputHigh: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = (uint32_t)0x1U << pin;
 8000358:	78fb      	ldrb	r3, [r7, #3]
 800035a:	2201      	movs	r2, #1
 800035c:	409a      	lsls	r2, r3
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	605a      	str	r2, [r3, #4]
}
 8000362:	bf00      	nop
 8000364:	370c      	adds	r7, #12
 8000366:	46bd      	mov	sp, r7
 8000368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800036c:	4770      	bx	lr

0800036e <XMC_GPIO_SetOutputLow>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.\n
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputLow(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 800036e:	b480      	push	{r7}
 8000370:	b083      	sub	sp, #12
 8000372:	af00      	add	r7, sp, #0
 8000374:	6078      	str	r0, [r7, #4]
 8000376:	460b      	mov	r3, r1
 8000378:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputLow: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10000U << pin;
 800037a:	78fb      	ldrb	r3, [r7, #3]
 800037c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000380:	409a      	lsls	r2, r3
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	605a      	str	r2, [r3, #4]
}
 8000386:	bf00      	nop
 8000388:	370c      	adds	r7, #12
 800038a:	46bd      	mov	sp, r7
 800038c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000390:	4770      	bx	lr
	...

08000394 <main>:
// 1 sentence -> symbols
// design optimizated for "I can morse" string
void sentence_encode(const char* str, int len);


int main(void) {
 8000394:	b580      	push	{r7, lr}
 8000396:	b084      	sub	sp, #16
 8000398:	af00      	add	r7, sp, #0

  
  XMC_GPIO_Init(GPIO_LED1,     &out_config);
 800039a:	4a11      	ldr	r2, [pc, #68]	; (80003e0 <main+0x4c>)
 800039c:	2101      	movs	r1, #1
 800039e:	4811      	ldr	r0, [pc, #68]	; (80003e4 <main+0x50>)
 80003a0:	f000 f986 	bl	80006b0 <XMC_GPIO_Init>
  XMC_GPIO_Init(GPIO_BUTTON1,  &in_config);
 80003a4:	4a10      	ldr	r2, [pc, #64]	; (80003e8 <main+0x54>)
 80003a6:	210e      	movs	r1, #14
 80003a8:	480e      	ldr	r0, [pc, #56]	; (80003e4 <main+0x50>)
 80003aa:	f000 f981 	bl	80006b0 <XMC_GPIO_Init>
  XMC_GPIO_Init(GPIO_BUTTON2,  &in_config);
 80003ae:	4a0e      	ldr	r2, [pc, #56]	; (80003e8 <main+0x54>)
 80003b0:	210f      	movs	r1, #15
 80003b2:	480c      	ldr	r0, [pc, #48]	; (80003e4 <main+0x50>)
 80003b4:	f000 f97c 	bl	80006b0 <XMC_GPIO_Init>

  // 1 tick = 1 ms
  SysTick_Config(SystemCoreClock / 1000);
 80003b8:	4b0c      	ldr	r3, [pc, #48]	; (80003ec <main+0x58>)
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	4a0c      	ldr	r2, [pc, #48]	; (80003f0 <main+0x5c>)
 80003be:	fba2 2303 	umull	r2, r3, r2, r3
 80003c2:	099b      	lsrs	r3, r3, #6
 80003c4:	4618      	mov	r0, r3
 80003c6:	f7ff ff9f 	bl	8000308 <SysTick_Config>

  const char str[] = "i can morse";
 80003ca:	4a0a      	ldr	r2, [pc, #40]	; (80003f4 <main+0x60>)
 80003cc:	1d3b      	adds	r3, r7, #4
 80003ce:	ca07      	ldmia	r2, {r0, r1, r2}
 80003d0:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  while(1) sentence_encode(str,11); // 11 = strlen(str)
 80003d4:	1d3b      	adds	r3, r7, #4
 80003d6:	210b      	movs	r1, #11
 80003d8:	4618      	mov	r0, r3
 80003da:	f000 f861 	bl	80004a0 <sentence_encode>
 80003de:	e7f9      	b.n	80003d4 <main+0x40>
 80003e0:	0800107c 	.word	0x0800107c
 80003e4:	48028100 	.word	0x48028100
 80003e8:	08001088 	.word	0x08001088
 80003ec:	2000ffc0 	.word	0x2000ffc0
 80003f0:	10624dd3 	.word	0x10624dd3
 80003f4:	08001094 	.word	0x08001094

080003f8 <SysTick_Handler>:

  return 0;
}

void SysTick_Handler(){
 80003f8:	b480      	push	{r7}
 80003fa:	af00      	add	r7, sp, #0
  if (tick>0) tick--;
 80003fc:	4b06      	ldr	r3, [pc, #24]	; (8000418 <SysTick_Handler+0x20>)
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	2b00      	cmp	r3, #0
 8000402:	d004      	beq.n	800040e <SysTick_Handler+0x16>
 8000404:	4b04      	ldr	r3, [pc, #16]	; (8000418 <SysTick_Handler+0x20>)
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	3b01      	subs	r3, #1
 800040a:	4a03      	ldr	r2, [pc, #12]	; (8000418 <SysTick_Handler+0x20>)
 800040c:	6013      	str	r3, [r2, #0]
}
 800040e:	bf00      	nop
 8000410:	46bd      	mov	sp, r7
 8000412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000416:	4770      	bx	lr
 8000418:	20000430 	.word	0x20000430

0800041c <sleep>:

void sleep(uint32_t amount){
 800041c:	b480      	push	{r7}
 800041e:	b083      	sub	sp, #12
 8000420:	af00      	add	r7, sp, #0
 8000422:	6078      	str	r0, [r7, #4]
  tick = amount;
 8000424:	4a07      	ldr	r2, [pc, #28]	; (8000444 <sleep+0x28>)
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	6013      	str	r3, [r2, #0]
  while(tick>0);
 800042a:	bf00      	nop
 800042c:	4b05      	ldr	r3, [pc, #20]	; (8000444 <sleep+0x28>)
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	2b00      	cmp	r3, #0
 8000432:	d1fb      	bne.n	800042c <sleep+0x10>
}
 8000434:	bf00      	nop
 8000436:	bf00      	nop
 8000438:	370c      	adds	r7, #12
 800043a:	46bd      	mov	sp, r7
 800043c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000440:	4770      	bx	lr
 8000442:	bf00      	nop
 8000444:	20000430 	.word	0x20000430

08000448 <character_encode>:

void character_encode(char symbol){
 8000448:	b580      	push	{r7, lr}
 800044a:	b082      	sub	sp, #8
 800044c:	af00      	add	r7, sp, #0
 800044e:	4603      	mov	r3, r0
 8000450:	71fb      	strb	r3, [r7, #7]
  if (symbol == 0){ // dot
 8000452:	79fb      	ldrb	r3, [r7, #7]
 8000454:	2b00      	cmp	r3, #0
 8000456:	d10e      	bne.n	8000476 <character_encode+0x2e>
    XMC_GPIO_SetOutputHigh(GPIO_LED1);
 8000458:	2101      	movs	r1, #1
 800045a:	4810      	ldr	r0, [pc, #64]	; (800049c <character_encode+0x54>)
 800045c:	f7ff ff76 	bl	800034c <XMC_GPIO_SetOutputHigh>
    sleep(TICK_DIT);
 8000460:	2064      	movs	r0, #100	; 0x64
 8000462:	f7ff ffdb 	bl	800041c <sleep>
    XMC_GPIO_SetOutputLow(GPIO_LED1);
 8000466:	2101      	movs	r1, #1
 8000468:	480c      	ldr	r0, [pc, #48]	; (800049c <character_encode+0x54>)
 800046a:	f7ff ff80 	bl	800036e <XMC_GPIO_SetOutputLow>
    sleep(TICK_DD_SPACE);
 800046e:	2064      	movs	r0, #100	; 0x64
 8000470:	f7ff ffd4 	bl	800041c <sleep>
    XMC_GPIO_SetOutputHigh(GPIO_LED1);
    sleep(TICK_DAH);
    XMC_GPIO_SetOutputLow(GPIO_LED1);
    sleep(TICK_DD_SPACE);
  }
}
 8000474:	e00e      	b.n	8000494 <character_encode+0x4c>
    XMC_GPIO_SetOutputHigh(GPIO_LED1);
 8000476:	2101      	movs	r1, #1
 8000478:	4808      	ldr	r0, [pc, #32]	; (800049c <character_encode+0x54>)
 800047a:	f7ff ff67 	bl	800034c <XMC_GPIO_SetOutputHigh>
    sleep(TICK_DAH);
 800047e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000482:	f7ff ffcb 	bl	800041c <sleep>
    XMC_GPIO_SetOutputLow(GPIO_LED1);
 8000486:	2101      	movs	r1, #1
 8000488:	4804      	ldr	r0, [pc, #16]	; (800049c <character_encode+0x54>)
 800048a:	f7ff ff70 	bl	800036e <XMC_GPIO_SetOutputLow>
    sleep(TICK_DD_SPACE);
 800048e:	2064      	movs	r0, #100	; 0x64
 8000490:	f7ff ffc4 	bl	800041c <sleep>
}
 8000494:	bf00      	nop
 8000496:	3708      	adds	r7, #8
 8000498:	46bd      	mov	sp, r7
 800049a:	bd80      	pop	{r7, pc}
 800049c:	48028100 	.word	0x48028100

080004a0 <sentence_encode>:

void sentence_encode(const char* str, int len ){
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b084      	sub	sp, #16
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	6078      	str	r0, [r7, #4]
 80004a8:	6039      	str	r1, [r7, #0]

  for (int i=0; i<len; i++){
 80004aa:	2300      	movs	r3, #0
 80004ac:	60fb      	str	r3, [r7, #12]
 80004ae:	e08d      	b.n	80005cc <sentence_encode+0x12c>
    switch(str[i]){
 80004b0:	68fb      	ldr	r3, [r7, #12]
 80004b2:	687a      	ldr	r2, [r7, #4]
 80004b4:	4413      	add	r3, r2
 80004b6:	781b      	ldrb	r3, [r3, #0]
 80004b8:	2b20      	cmp	r3, #32
 80004ba:	d07c      	beq.n	80005b6 <sentence_encode+0x116>
 80004bc:	2b20      	cmp	r3, #32
 80004be:	db7e      	blt.n	80005be <sentence_encode+0x11e>
 80004c0:	2b73      	cmp	r3, #115	; 0x73
 80004c2:	dc7c      	bgt.n	80005be <sentence_encode+0x11e>
 80004c4:	2b61      	cmp	r3, #97	; 0x61
 80004c6:	db7a      	blt.n	80005be <sentence_encode+0x11e>
 80004c8:	3b61      	subs	r3, #97	; 0x61
 80004ca:	2b12      	cmp	r3, #18
 80004cc:	d877      	bhi.n	80005be <sentence_encode+0x11e>
 80004ce:	a201      	add	r2, pc, #4	; (adr r2, 80004d4 <sentence_encode+0x34>)
 80004d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004d4:	08000549 	.word	0x08000549
 80004d8:	080005bf 	.word	0x080005bf
 80004dc:	0800052f 	.word	0x0800052f
 80004e0:	080005bf 	.word	0x080005bf
 80004e4:	080005af 	.word	0x080005af
 80004e8:	080005bf 	.word	0x080005bf
 80004ec:	080005bf 	.word	0x080005bf
 80004f0:	080005bf 	.word	0x080005bf
 80004f4:	08000521 	.word	0x08000521
 80004f8:	080005bf 	.word	0x080005bf
 80004fc:	080005bf 	.word	0x080005bf
 8000500:	080005bf 	.word	0x080005bf
 8000504:	08000565 	.word	0x08000565
 8000508:	08000557 	.word	0x08000557
 800050c:	08000573 	.word	0x08000573
 8000510:	080005bf 	.word	0x080005bf
 8000514:	080005bf 	.word	0x080005bf
 8000518:	08000587 	.word	0x08000587
 800051c:	0800059b 	.word	0x0800059b
      case 'i': // ..
        character_encode(0);
 8000520:	2000      	movs	r0, #0
 8000522:	f7ff ff91 	bl	8000448 <character_encode>
        character_encode(0);
 8000526:	2000      	movs	r0, #0
 8000528:	f7ff ff8e 	bl	8000448 <character_encode>
        break;
 800052c:	e048      	b.n	80005c0 <sentence_encode+0x120>
      case 'c': // -.-.
        character_encode(1);
 800052e:	2001      	movs	r0, #1
 8000530:	f7ff ff8a 	bl	8000448 <character_encode>
        character_encode(0);
 8000534:	2000      	movs	r0, #0
 8000536:	f7ff ff87 	bl	8000448 <character_encode>
        character_encode(1);
 800053a:	2001      	movs	r0, #1
 800053c:	f7ff ff84 	bl	8000448 <character_encode>
        character_encode(0);
 8000540:	2000      	movs	r0, #0
 8000542:	f7ff ff81 	bl	8000448 <character_encode>
        break;
 8000546:	e03b      	b.n	80005c0 <sentence_encode+0x120>
      case 'a': //.-
        character_encode(0);
 8000548:	2000      	movs	r0, #0
 800054a:	f7ff ff7d 	bl	8000448 <character_encode>
        character_encode(1);
 800054e:	2001      	movs	r0, #1
 8000550:	f7ff ff7a 	bl	8000448 <character_encode>
        break;
 8000554:	e034      	b.n	80005c0 <sentence_encode+0x120>
      case 'n': // -.
        character_encode(1);
 8000556:	2001      	movs	r0, #1
 8000558:	f7ff ff76 	bl	8000448 <character_encode>
        character_encode(0);
 800055c:	2000      	movs	r0, #0
 800055e:	f7ff ff73 	bl	8000448 <character_encode>
        break;
 8000562:	e02d      	b.n	80005c0 <sentence_encode+0x120>
      case 'm': // --
        character_encode(1);
 8000564:	2001      	movs	r0, #1
 8000566:	f7ff ff6f 	bl	8000448 <character_encode>
        character_encode(1);
 800056a:	2001      	movs	r0, #1
 800056c:	f7ff ff6c 	bl	8000448 <character_encode>
        break;
 8000570:	e026      	b.n	80005c0 <sentence_encode+0x120>
      case 'o': // ---
        character_encode(1);
 8000572:	2001      	movs	r0, #1
 8000574:	f7ff ff68 	bl	8000448 <character_encode>
        character_encode(1); 
 8000578:	2001      	movs	r0, #1
 800057a:	f7ff ff65 	bl	8000448 <character_encode>
        character_encode(1);
 800057e:	2001      	movs	r0, #1
 8000580:	f7ff ff62 	bl	8000448 <character_encode>
        break;
 8000584:	e01c      	b.n	80005c0 <sentence_encode+0x120>
      case 'r': // .-.
        character_encode(0); //
 8000586:	2000      	movs	r0, #0
 8000588:	f7ff ff5e 	bl	8000448 <character_encode>
        character_encode(1);
 800058c:	2001      	movs	r0, #1
 800058e:	f7ff ff5b 	bl	8000448 <character_encode>
        character_encode(0);
 8000592:	2000      	movs	r0, #0
 8000594:	f7ff ff58 	bl	8000448 <character_encode>
        break;
 8000598:	e012      	b.n	80005c0 <sentence_encode+0x120>
      case 's': // ...
        character_encode(0);
 800059a:	2000      	movs	r0, #0
 800059c:	f7ff ff54 	bl	8000448 <character_encode>
        character_encode(0);
 80005a0:	2000      	movs	r0, #0
 80005a2:	f7ff ff51 	bl	8000448 <character_encode>
        character_encode(0);
 80005a6:	2000      	movs	r0, #0
 80005a8:	f7ff ff4e 	bl	8000448 <character_encode>
        break;
 80005ac:	e008      	b.n	80005c0 <sentence_encode+0x120>
      case 'e': // .
        character_encode(0);
 80005ae:	2000      	movs	r0, #0
 80005b0:	f7ff ff4a 	bl	8000448 <character_encode>
        break;
 80005b4:	e004      	b.n	80005c0 <sentence_encode+0x120>
      case ' ': // 400
        sleep(200);
 80005b6:	20c8      	movs	r0, #200	; 0xc8
 80005b8:	f7ff ff30 	bl	800041c <sleep>
        break;
 80005bc:	e000      	b.n	80005c0 <sentence_encode+0x120>
      default :
        break;
 80005be:	bf00      	nop
    }
    sleep(200);
 80005c0:	20c8      	movs	r0, #200	; 0xc8
 80005c2:	f7ff ff2b 	bl	800041c <sleep>
  for (int i=0; i<len; i++){
 80005c6:	68fb      	ldr	r3, [r7, #12]
 80005c8:	3301      	adds	r3, #1
 80005ca:	60fb      	str	r3, [r7, #12]
 80005cc:	68fa      	ldr	r2, [r7, #12]
 80005ce:	683b      	ldr	r3, [r7, #0]
 80005d0:	429a      	cmp	r2, r3
 80005d2:	f6ff af6d 	blt.w	80004b0 <sentence_encode+0x10>
  }
  // pause for 5s
  sleep(4700);
 80005d6:	f241 205c 	movw	r0, #4700	; 0x125c
 80005da:	f7ff ff1f 	bl	800041c <sleep>
}
 80005de:	bf00      	nop
 80005e0:	3710      	adds	r7, #16
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop

080005e8 <XMC_GPIO_SetMode>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_SetMode(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_MODE_t mode)
{
 80005e8:	b480      	push	{r7}
 80005ea:	b083      	sub	sp, #12
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
 80005f0:	460b      	mov	r3, r1
 80005f2:	70fb      	strb	r3, [r7, #3]
 80005f4:	4613      	mov	r3, r2
 80005f6:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_GPIO_SetMode: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetMode: Invalid mode", XMC_GPIO_IsModeValid(mode));

  port->IOCR[(uint32_t)pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U)));
 80005f8:	78fb      	ldrb	r3, [r7, #3]
 80005fa:	089b      	lsrs	r3, r3, #2
 80005fc:	b2db      	uxtb	r3, r3
 80005fe:	461a      	mov	r2, r3
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	3204      	adds	r2, #4
 8000604:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000608:	78fb      	ldrb	r3, [r7, #3]
 800060a:	f003 0303 	and.w	r3, r3, #3
 800060e:	00db      	lsls	r3, r3, #3
 8000610:	21f8      	movs	r1, #248	; 0xf8
 8000612:	fa01 f303 	lsl.w	r3, r1, r3
 8000616:	43db      	mvns	r3, r3
 8000618:	78f9      	ldrb	r1, [r7, #3]
 800061a:	0889      	lsrs	r1, r1, #2
 800061c:	b2c9      	uxtb	r1, r1
 800061e:	4608      	mov	r0, r1
 8000620:	ea02 0103 	and.w	r1, r2, r3
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	1d02      	adds	r2, r0, #4
 8000628:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  port->IOCR[(uint32_t)pin >> 2U] |= (uint32_t)mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 800062c:	78fb      	ldrb	r3, [r7, #3]
 800062e:	089b      	lsrs	r3, r3, #2
 8000630:	b2db      	uxtb	r3, r3
 8000632:	461a      	mov	r2, r3
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	3204      	adds	r2, #4
 8000638:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800063c:	78b9      	ldrb	r1, [r7, #2]
 800063e:	78fb      	ldrb	r3, [r7, #3]
 8000640:	f003 0303 	and.w	r3, r3, #3
 8000644:	00db      	lsls	r3, r3, #3
 8000646:	fa01 f303 	lsl.w	r3, r1, r3
 800064a:	78f9      	ldrb	r1, [r7, #3]
 800064c:	0889      	lsrs	r1, r1, #2
 800064e:	b2c9      	uxtb	r1, r1
 8000650:	4608      	mov	r0, r1
 8000652:	ea42 0103 	orr.w	r1, r2, r3
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	1d02      	adds	r2, r0, #4
 800065a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800065e:	bf00      	nop
 8000660:	370c      	adds	r7, #12
 8000662:	46bd      	mov	sp, r7
 8000664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000668:	4770      	bx	lr

0800066a <XMC_GPIO_SetHardwareControl>:

void XMC_GPIO_SetHardwareControl(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_HWCTRL_t hwctrl)
{
 800066a:	b480      	push	{r7}
 800066c:	b083      	sub	sp, #12
 800066e:	af00      	add	r7, sp, #0
 8000670:	6078      	str	r0, [r7, #4]
 8000672:	460b      	mov	r3, r1
 8000674:	70fb      	strb	r3, [r7, #3]
 8000676:	4613      	mov	r3, r2
 8000678:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid hwctrl", XMC_GPIO_CHECK_HWCTRL(hwctrl));

  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800067e:	78fb      	ldrb	r3, [r7, #3]
 8000680:	005b      	lsls	r3, r3, #1
 8000682:	2103      	movs	r1, #3
 8000684:	fa01 f303 	lsl.w	r3, r1, r3
 8000688:	43db      	mvns	r3, r3
 800068a:	401a      	ands	r2, r3
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	675a      	str	r2, [r3, #116]	; 0x74
  port->HWSEL |= (uint32_t)hwctrl << ((uint32_t)pin << 1U);
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8000694:	78b9      	ldrb	r1, [r7, #2]
 8000696:	78fb      	ldrb	r3, [r7, #3]
 8000698:	005b      	lsls	r3, r3, #1
 800069a:	fa01 f303 	lsl.w	r3, r1, r3
 800069e:	431a      	orrs	r2, r3
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	675a      	str	r2, [r3, #116]	; 0x74
}
 80006a4:	bf00      	nop
 80006a6:	370c      	adds	r7, #12
 80006a8:	46bd      	mov	sp, r7
 80006aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ae:	4770      	bx	lr

080006b0 <XMC_GPIO_Init>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_Init(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_CONFIG_t *const config)
{
 80006b0:	b480      	push	{r7}
 80006b2:	b085      	sub	sp, #20
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	60f8      	str	r0, [r7, #12]
 80006b8:	460b      	mov	r3, r1
 80006ba:	607a      	str	r2, [r7, #4]
 80006bc:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid mode", XMC_GPIO_IsModeValid(config->mode));
 
  /* Switch to input */
  port->IOCR[pin >> 2U] &= (uint32_t)~(PORT_IOCR_PC_Msk << (PORT_IOCR_PC_Size * (pin & 0x3U)));
 80006be:	7afb      	ldrb	r3, [r7, #11]
 80006c0:	089b      	lsrs	r3, r3, #2
 80006c2:	b2db      	uxtb	r3, r3
 80006c4:	461a      	mov	r2, r3
 80006c6:	68fb      	ldr	r3, [r7, #12]
 80006c8:	3204      	adds	r2, #4
 80006ca:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80006ce:	7afb      	ldrb	r3, [r7, #11]
 80006d0:	f003 0303 	and.w	r3, r3, #3
 80006d4:	00db      	lsls	r3, r3, #3
 80006d6:	21f8      	movs	r1, #248	; 0xf8
 80006d8:	fa01 f303 	lsl.w	r3, r1, r3
 80006dc:	43db      	mvns	r3, r3
 80006de:	7af9      	ldrb	r1, [r7, #11]
 80006e0:	0889      	lsrs	r1, r1, #2
 80006e2:	b2c9      	uxtb	r1, r1
 80006e4:	4608      	mov	r0, r1
 80006e6:	ea02 0103 	and.w	r1, r2, r3
 80006ea:	68fb      	ldr	r3, [r7, #12]
 80006ec:	1d02      	adds	r2, r0, #4
 80006ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* HW port control is disabled */
  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 80006f2:	68fb      	ldr	r3, [r7, #12]
 80006f4:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80006f6:	7afb      	ldrb	r3, [r7, #11]
 80006f8:	005b      	lsls	r3, r3, #1
 80006fa:	2103      	movs	r1, #3
 80006fc:	fa01 f303 	lsl.w	r3, r1, r3
 8000700:	43db      	mvns	r3, r3
 8000702:	401a      	ands	r2, r3
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	675a      	str	r2, [r3, #116]	; 0x74


  /* Enable digital input */
  if (XMC_GPIO_CHECK_ANALOG_PORT(port))
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	4a38      	ldr	r2, [pc, #224]	; (80007ec <XMC_GPIO_Init+0x13c>)
 800070c:	4293      	cmp	r3, r2
 800070e:	d003      	beq.n	8000718 <XMC_GPIO_Init+0x68>
 8000710:	68fb      	ldr	r3, [r7, #12]
 8000712:	4a37      	ldr	r2, [pc, #220]	; (80007f0 <XMC_GPIO_Init+0x140>)
 8000714:	4293      	cmp	r3, r2
 8000716:	d10a      	bne.n	800072e <XMC_GPIO_Init+0x7e>
  {
    port->PDISC &= ~(uint32_t)((uint32_t)0x1U << pin);
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800071c:	7afb      	ldrb	r3, [r7, #11]
 800071e:	2101      	movs	r1, #1
 8000720:	fa01 f303 	lsl.w	r3, r1, r3
 8000724:	43db      	mvns	r3, r3
 8000726:	401a      	ands	r2, r3
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	661a      	str	r2, [r3, #96]	; 0x60
 800072c:	e03c      	b.n	80007a8 <XMC_GPIO_Init+0xf8>
  }
  else
  {
    /* Set output level */
    port->OMR = (uint32_t)config->output_level << pin;
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	685a      	ldr	r2, [r3, #4]
 8000732:	7afb      	ldrb	r3, [r7, #11]
 8000734:	409a      	lsls	r2, r3
 8000736:	68fb      	ldr	r3, [r7, #12]
 8000738:	605a      	str	r2, [r3, #4]

    /* Set output driver strength */
    port->PDR[pin >> 3U] &= (uint32_t)~(PORT_PDR_Msk << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U)));
 800073a:	7afb      	ldrb	r3, [r7, #11]
 800073c:	08db      	lsrs	r3, r3, #3
 800073e:	b2db      	uxtb	r3, r3
 8000740:	461a      	mov	r2, r3
 8000742:	68fb      	ldr	r3, [r7, #12]
 8000744:	3210      	adds	r2, #16
 8000746:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800074a:	7afb      	ldrb	r3, [r7, #11]
 800074c:	f003 0307 	and.w	r3, r3, #7
 8000750:	009b      	lsls	r3, r3, #2
 8000752:	2107      	movs	r1, #7
 8000754:	fa01 f303 	lsl.w	r3, r1, r3
 8000758:	43db      	mvns	r3, r3
 800075a:	7af9      	ldrb	r1, [r7, #11]
 800075c:	08c9      	lsrs	r1, r1, #3
 800075e:	b2c9      	uxtb	r1, r1
 8000760:	4608      	mov	r0, r1
 8000762:	ea02 0103 	and.w	r1, r2, r3
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	f100 0210 	add.w	r2, r0, #16
 800076c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    port->PDR[pin >> 3U] |= (uint32_t)config->output_strength << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U));
 8000770:	7afb      	ldrb	r3, [r7, #11]
 8000772:	08db      	lsrs	r3, r3, #3
 8000774:	b2db      	uxtb	r3, r3
 8000776:	461a      	mov	r2, r3
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	3210      	adds	r2, #16
 800077c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	7a1b      	ldrb	r3, [r3, #8]
 8000784:	4619      	mov	r1, r3
 8000786:	7afb      	ldrb	r3, [r7, #11]
 8000788:	f003 0307 	and.w	r3, r3, #7
 800078c:	009b      	lsls	r3, r3, #2
 800078e:	fa01 f303 	lsl.w	r3, r1, r3
 8000792:	7af9      	ldrb	r1, [r7, #11]
 8000794:	08c9      	lsrs	r1, r1, #3
 8000796:	b2c9      	uxtb	r1, r1
 8000798:	4608      	mov	r0, r1
 800079a:	ea42 0103 	orr.w	r1, r2, r3
 800079e:	68fb      	ldr	r3, [r7, #12]
 80007a0:	f100 0210 	add.w	r2, r0, #16
 80007a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  /* Set mode */
  port->IOCR[pin >> 2U] |= (uint32_t)config->mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 80007a8:	7afb      	ldrb	r3, [r7, #11]
 80007aa:	089b      	lsrs	r3, r3, #2
 80007ac:	b2db      	uxtb	r3, r3
 80007ae:	461a      	mov	r2, r3
 80007b0:	68fb      	ldr	r3, [r7, #12]
 80007b2:	3204      	adds	r2, #4
 80007b4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	4619      	mov	r1, r3
 80007be:	7afb      	ldrb	r3, [r7, #11]
 80007c0:	f003 0303 	and.w	r3, r3, #3
 80007c4:	00db      	lsls	r3, r3, #3
 80007c6:	fa01 f303 	lsl.w	r3, r1, r3
 80007ca:	7af9      	ldrb	r1, [r7, #11]
 80007cc:	0889      	lsrs	r1, r1, #2
 80007ce:	b2c9      	uxtb	r1, r1
 80007d0:	4608      	mov	r0, r1
 80007d2:	ea42 0103 	orr.w	r1, r2, r3
 80007d6:	68fb      	ldr	r3, [r7, #12]
 80007d8:	1d02      	adds	r2, r0, #4
 80007da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80007de:	bf00      	nop
 80007e0:	3714      	adds	r7, #20
 80007e2:	46bd      	mov	sp, r7
 80007e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e8:	4770      	bx	lr
 80007ea:	bf00      	nop
 80007ec:	48028e00 	.word	0x48028e00
 80007f0:	48028f00 	.word	0x48028f00

080007f4 <XMC_GPIO_SetOutputStrength>:

void XMC_GPIO_SetOutputStrength(XMC_GPIO_PORT_t *const port, const uint8_t pin, XMC_GPIO_OUTPUT_STRENGTH_t strength)
{
 80007f4:	b480      	push	{r7}
 80007f6:	b083      	sub	sp, #12
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
 80007fc:	460b      	mov	r3, r1
 80007fe:	70fb      	strb	r3, [r7, #3]
 8000800:	4613      	mov	r3, r2
 8000802:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid output strength", XMC_GPIO_CHECK_OUTPUT_STRENGTH(strength));

  port->PDR[pin >> 3U] &= (uint32_t)~((uint32_t)PORT_PDR_Msk << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U)));
 8000804:	78fb      	ldrb	r3, [r7, #3]
 8000806:	08db      	lsrs	r3, r3, #3
 8000808:	b2db      	uxtb	r3, r3
 800080a:	461a      	mov	r2, r3
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	3210      	adds	r2, #16
 8000810:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000814:	78fb      	ldrb	r3, [r7, #3]
 8000816:	f003 0307 	and.w	r3, r3, #7
 800081a:	009b      	lsls	r3, r3, #2
 800081c:	2107      	movs	r1, #7
 800081e:	fa01 f303 	lsl.w	r3, r1, r3
 8000822:	43db      	mvns	r3, r3
 8000824:	78f9      	ldrb	r1, [r7, #3]
 8000826:	08c9      	lsrs	r1, r1, #3
 8000828:	b2c9      	uxtb	r1, r1
 800082a:	4608      	mov	r0, r1
 800082c:	ea02 0103 	and.w	r1, r2, r3
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	f100 0210 	add.w	r2, r0, #16
 8000836:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  port->PDR[pin >> 3U] |= (uint32_t)strength << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U));
 800083a:	78fb      	ldrb	r3, [r7, #3]
 800083c:	08db      	lsrs	r3, r3, #3
 800083e:	b2db      	uxtb	r3, r3
 8000840:	461a      	mov	r2, r3
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	3210      	adds	r2, #16
 8000846:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800084a:	78b9      	ldrb	r1, [r7, #2]
 800084c:	78fb      	ldrb	r3, [r7, #3]
 800084e:	f003 0307 	and.w	r3, r3, #7
 8000852:	009b      	lsls	r3, r3, #2
 8000854:	fa01 f303 	lsl.w	r3, r1, r3
 8000858:	78f9      	ldrb	r1, [r7, #3]
 800085a:	08c9      	lsrs	r1, r1, #3
 800085c:	b2c9      	uxtb	r1, r1
 800085e:	4608      	mov	r0, r1
 8000860:	ea42 0103 	orr.w	r1, r2, r3
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	f100 0210 	add.w	r2, r0, #16
 800086a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800086e:	bf00      	nop
 8000870:	370c      	adds	r7, #12
 8000872:	46bd      	mov	sp, r7
 8000874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000878:	4770      	bx	lr

0800087a <XMC_PRIOARRAY_GetHead>:

/*
 *
 */
__STATIC_INLINE int32_t XMC_PRIOARRAY_GetHead(XMC_PRIOARRAY_t *prioarray)
{
 800087a:	b480      	push	{r7}
 800087c:	b083      	sub	sp, #12
 800087e:	af00      	add	r7, sp, #0
 8000880:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_PRIOARRAY_Init: NULL pointer", prioarray != NULL);
  return prioarray->items[prioarray->size].next;
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	685a      	ldr	r2, [r3, #4]
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	4619      	mov	r1, r3
 800088c:	460b      	mov	r3, r1
 800088e:	005b      	lsls	r3, r3, #1
 8000890:	440b      	add	r3, r1
 8000892:	009b      	lsls	r3, r3, #2
 8000894:	4413      	add	r3, r2
 8000896:	689b      	ldr	r3, [r3, #8]
}
 8000898:	4618      	mov	r0, r3
 800089a:	370c      	adds	r7, #12
 800089c:	46bd      	mov	sp, r7
 800089e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a2:	4770      	bx	lr

080008a4 <XMC_PRIOARRAY_GetItemPriority>:

/*
 *
 */
__STATIC_INLINE int32_t XMC_PRIOARRAY_GetItemPriority(XMC_PRIOARRAY_t *prioarray, int32_t item)
{
 80008a4:	b480      	push	{r7}
 80008a6:	b083      	sub	sp, #12
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
 80008ac:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_PRIOARRAY_GetItemPriority: item out of range", (item >= 0) && (item < prioarray->size));
  return prioarray->items[item].priority;
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	6859      	ldr	r1, [r3, #4]
 80008b2:	683a      	ldr	r2, [r7, #0]
 80008b4:	4613      	mov	r3, r2
 80008b6:	005b      	lsls	r3, r3, #1
 80008b8:	4413      	add	r3, r2
 80008ba:	009b      	lsls	r3, r3, #2
 80008bc:	440b      	add	r3, r1
 80008be:	681b      	ldr	r3, [r3, #0]
}
 80008c0:	4618      	mov	r0, r3
 80008c2:	370c      	adds	r7, #12
 80008c4:	46bd      	mov	sp, r7
 80008c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ca:	4770      	bx	lr

080008cc <XMC_PRIOARRAY_GetItemNext>:

/*
 *
 */
__STATIC_INLINE int32_t XMC_PRIOARRAY_GetItemNext(XMC_PRIOARRAY_t *prioarray, int32_t item)
{
 80008cc:	b480      	push	{r7}
 80008ce:	b083      	sub	sp, #12
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
 80008d4:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_PRIOARRAY_GetItemNext: item out of range", (item >= 0) && (item < prioarray->size));
  return prioarray->items[item].next;
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	6859      	ldr	r1, [r3, #4]
 80008da:	683a      	ldr	r2, [r7, #0]
 80008dc:	4613      	mov	r3, r2
 80008de:	005b      	lsls	r3, r3, #1
 80008e0:	4413      	add	r3, r2
 80008e2:	009b      	lsls	r3, r3, #2
 80008e4:	440b      	add	r3, r1
 80008e6:	689b      	ldr	r3, [r3, #8]
}
 80008e8:	4618      	mov	r0, r3
 80008ea:	370c      	adds	r7, #12
 80008ec:	46bd      	mov	sp, r7
 80008ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f2:	4770      	bx	lr

080008f4 <XMC_LIST_Init>:
  }
}
#endif

void XMC_LIST_Init(XMC_LIST_t *list)
{
 80008f4:	b480      	push	{r7}
 80008f6:	b083      	sub	sp, #12
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  *list = NULL;
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	2200      	movs	r2, #0
 8000900:	601a      	str	r2, [r3, #0]
}
 8000902:	bf00      	nop
 8000904:	370c      	adds	r7, #12
 8000906:	46bd      	mov	sp, r7
 8000908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090c:	4770      	bx	lr

0800090e <XMC_LIST_GetHead>:

void *XMC_LIST_GetHead(XMC_LIST_t *list)
{
 800090e:	b480      	push	{r7}
 8000910:	b083      	sub	sp, #12
 8000912:	af00      	add	r7, sp, #0
 8000914:	6078      	str	r0, [r7, #4]
  return *list;
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	681b      	ldr	r3, [r3, #0]
}
 800091a:	4618      	mov	r0, r3
 800091c:	370c      	adds	r7, #12
 800091e:	46bd      	mov	sp, r7
 8000920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000924:	4770      	bx	lr

08000926 <XMC_LIST_GetTail>:

void *XMC_LIST_GetTail(XMC_LIST_t *list)
{
 8000926:	b480      	push	{r7}
 8000928:	b085      	sub	sp, #20
 800092a:	af00      	add	r7, sp, #0
 800092c:	6078      	str	r0, [r7, #4]
  struct list *tail;
  
  if (*list == NULL) 
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	2b00      	cmp	r3, #0
 8000934:	d102      	bne.n	800093c <XMC_LIST_GetTail+0x16>
  {
    tail = NULL;
 8000936:	2300      	movs	r3, #0
 8000938:	60fb      	str	r3, [r7, #12]
 800093a:	e00a      	b.n	8000952 <XMC_LIST_GetTail+0x2c>
  }
  else
  {
    for (tail = (struct list *)*list; tail->next != NULL; tail = tail->next)
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	60fb      	str	r3, [r7, #12]
 8000942:	e002      	b.n	800094a <XMC_LIST_GetTail+0x24>
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	60fb      	str	r3, [r7, #12]
 800094a:	68fb      	ldr	r3, [r7, #12]
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	2b00      	cmp	r3, #0
 8000950:	d1f8      	bne.n	8000944 <XMC_LIST_GetTail+0x1e>
    {
      /* Loop through the list */
    }  
  }
  
  return tail;    
 8000952:	68fb      	ldr	r3, [r7, #12]
}
 8000954:	4618      	mov	r0, r3
 8000956:	3714      	adds	r7, #20
 8000958:	46bd      	mov	sp, r7
 800095a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095e:	4770      	bx	lr

08000960 <XMC_LIST_Add>:

void XMC_LIST_Add(XMC_LIST_t *list, void *item)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b084      	sub	sp, #16
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
 8000968:	6039      	str	r1, [r7, #0]
  struct list *tail;
  
  ((struct list *)item)->next = NULL;
 800096a:	683b      	ldr	r3, [r7, #0]
 800096c:	2200      	movs	r2, #0
 800096e:	601a      	str	r2, [r3, #0]
  tail = (struct list *)XMC_LIST_GetTail(list);
 8000970:	6878      	ldr	r0, [r7, #4]
 8000972:	f7ff ffd8 	bl	8000926 <XMC_LIST_GetTail>
 8000976:	60f8      	str	r0, [r7, #12]
  
  if (tail == NULL) 
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	2b00      	cmp	r3, #0
 800097c:	d103      	bne.n	8000986 <XMC_LIST_Add+0x26>
  {
    *list = item;
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	683a      	ldr	r2, [r7, #0]
 8000982:	601a      	str	r2, [r3, #0]
  } 
  else 
  {
    tail->next = (struct list *)item;
  }
}
 8000984:	e002      	b.n	800098c <XMC_LIST_Add+0x2c>
    tail->next = (struct list *)item;
 8000986:	68fb      	ldr	r3, [r7, #12]
 8000988:	683a      	ldr	r2, [r7, #0]
 800098a:	601a      	str	r2, [r3, #0]
}
 800098c:	bf00      	nop
 800098e:	3710      	adds	r7, #16
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}

08000994 <XMC_LIST_Remove>:

void XMC_LIST_Remove(XMC_LIST_t *list, void *item)
{
 8000994:	b480      	push	{r7}
 8000996:	b085      	sub	sp, #20
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
 800099c:	6039      	str	r1, [r7, #0]
  struct list *right, *left;
  
  if (*list != NULL) 
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d022      	beq.n	80009ec <XMC_LIST_Remove+0x58>
  {
    left = NULL;
 80009a6:	2300      	movs	r3, #0
 80009a8:	60bb      	str	r3, [r7, #8]
    for(right = (struct list *)*list; right != NULL; right = right->next)
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	60fb      	str	r3, [r7, #12]
 80009b0:	e019      	b.n	80009e6 <XMC_LIST_Remove+0x52>
    {
      if(right == item) 
 80009b2:	68fa      	ldr	r2, [r7, #12]
 80009b4:	683b      	ldr	r3, [r7, #0]
 80009b6:	429a      	cmp	r2, r3
 80009b8:	d110      	bne.n	80009dc <XMC_LIST_Remove+0x48>
      {
        if(left == NULL) 
 80009ba:	68bb      	ldr	r3, [r7, #8]
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d104      	bne.n	80009ca <XMC_LIST_Remove+0x36>
        {
          /* First on list */
          *list = right->next;
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	681a      	ldr	r2, [r3, #0]
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	601a      	str	r2, [r3, #0]
 80009c8:	e003      	b.n	80009d2 <XMC_LIST_Remove+0x3e>
        } 
        else 
        {
          /* Not first on list */
          left->next = right->next;
 80009ca:	68fb      	ldr	r3, [r7, #12]
 80009cc:	681a      	ldr	r2, [r3, #0]
 80009ce:	68bb      	ldr	r3, [r7, #8]
 80009d0:	601a      	str	r2, [r3, #0]
        }
        right->next = NULL;
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	2200      	movs	r2, #0
 80009d6:	601a      	str	r2, [r3, #0]
        break;
 80009d8:	bf00      	nop
      }
      left = right;
    }
  }
}
 80009da:	e007      	b.n	80009ec <XMC_LIST_Remove+0x58>
      left = right;
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	60bb      	str	r3, [r7, #8]
    for(right = (struct list *)*list; right != NULL; right = right->next)
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	60fb      	str	r3, [r7, #12]
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d1e2      	bne.n	80009b2 <XMC_LIST_Remove+0x1e>
}
 80009ec:	bf00      	nop
 80009ee:	3714      	adds	r7, #20
 80009f0:	46bd      	mov	sp, r7
 80009f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f6:	4770      	bx	lr

080009f8 <XMC_LIST_Insert>:

void XMC_LIST_Insert(XMC_LIST_t *list, void *prev_item, void *new_item)
{
 80009f8:	b480      	push	{r7}
 80009fa:	b085      	sub	sp, #20
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	60f8      	str	r0, [r7, #12]
 8000a00:	60b9      	str	r1, [r7, #8]
 8000a02:	607a      	str	r2, [r7, #4]
  if (prev_item == NULL) 
 8000a04:	68bb      	ldr	r3, [r7, #8]
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d107      	bne.n	8000a1a <XMC_LIST_Insert+0x22>
  {
	((struct list *)new_item)->next = (struct list *)*list;
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	681a      	ldr	r2, [r3, #0]
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	601a      	str	r2, [r3, #0]
	*list = new_item;
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	687a      	ldr	r2, [r7, #4]
 8000a16:	601a      	str	r2, [r3, #0]
  else 
  {
    ((struct list *)new_item)->next = ((struct list *)prev_item)->next;
    ((struct list *)prev_item)->next = (struct list *)new_item;
  }
}
 8000a18:	e006      	b.n	8000a28 <XMC_LIST_Insert+0x30>
    ((struct list *)new_item)->next = ((struct list *)prev_item)->next;
 8000a1a:	68bb      	ldr	r3, [r7, #8]
 8000a1c:	681a      	ldr	r2, [r3, #0]
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	601a      	str	r2, [r3, #0]
    ((struct list *)prev_item)->next = (struct list *)new_item;
 8000a22:	68bb      	ldr	r3, [r7, #8]
 8000a24:	687a      	ldr	r2, [r7, #4]
 8000a26:	601a      	str	r2, [r3, #0]
}
 8000a28:	bf00      	nop
 8000a2a:	3714      	adds	r7, #20
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a32:	4770      	bx	lr

08000a34 <XMC_PRIOARRAY_Init>:

void XMC_PRIOARRAY_Init(XMC_PRIOARRAY_t *prioarray)
{
 8000a34:	b480      	push	{r7}
 8000a36:	b083      	sub	sp, #12
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_PRIOARRAY_Init: NULL pointer", prioarray != NULL);

  /* Initialize head, next points to tail, previous to NULL and the priority is MININT */
  prioarray->items[prioarray->size].next = prioarray->size + 1;
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	681a      	ldr	r2, [r3, #0]
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	6859      	ldr	r1, [r3, #4]
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	4618      	mov	r0, r3
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	005b      	lsls	r3, r3, #1
 8000a4e:	4403      	add	r3, r0
 8000a50:	009b      	lsls	r3, r3, #2
 8000a52:	440b      	add	r3, r1
 8000a54:	3201      	adds	r2, #1
 8000a56:	609a      	str	r2, [r3, #8]
  prioarray->items[prioarray->size].previous = -1;
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	685a      	ldr	r2, [r3, #4]
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	4619      	mov	r1, r3
 8000a62:	460b      	mov	r3, r1
 8000a64:	005b      	lsls	r3, r3, #1
 8000a66:	440b      	add	r3, r1
 8000a68:	009b      	lsls	r3, r3, #2
 8000a6a:	4413      	add	r3, r2
 8000a6c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000a70:	605a      	str	r2, [r3, #4]
  prioarray->items[prioarray->size].priority = INT32_MAX;
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	685a      	ldr	r2, [r3, #4]
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	460b      	mov	r3, r1
 8000a7e:	005b      	lsls	r3, r3, #1
 8000a80:	440b      	add	r3, r1
 8000a82:	009b      	lsls	r3, r3, #2
 8000a84:	4413      	add	r3, r2
 8000a86:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8000a8a:	601a      	str	r2, [r3, #0]

  /* Initialize tail, next points to NULL, previous is the head and the priority is MAXINT */
  prioarray->items[prioarray->size + 1].next = -1;
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	6859      	ldr	r1, [r3, #4]
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	1c5a      	adds	r2, r3, #1
 8000a96:	4613      	mov	r3, r2
 8000a98:	005b      	lsls	r3, r3, #1
 8000a9a:	4413      	add	r3, r2
 8000a9c:	009b      	lsls	r3, r3, #2
 8000a9e:	440b      	add	r3, r1
 8000aa0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000aa4:	609a      	str	r2, [r3, #8]
  prioarray->items[prioarray->size + 1].previous = prioarray->size;
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	6859      	ldr	r1, [r3, #4]
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	1c5a      	adds	r2, r3, #1
 8000ab0:	4613      	mov	r3, r2
 8000ab2:	005b      	lsls	r3, r3, #1
 8000ab4:	4413      	add	r3, r2
 8000ab6:	009b      	lsls	r3, r3, #2
 8000ab8:	440b      	add	r3, r1
 8000aba:	687a      	ldr	r2, [r7, #4]
 8000abc:	6812      	ldr	r2, [r2, #0]
 8000abe:	605a      	str	r2, [r3, #4]
  prioarray->items[prioarray->size + 1].priority = INT32_MIN;
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	6859      	ldr	r1, [r3, #4]
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	1c5a      	adds	r2, r3, #1
 8000aca:	4613      	mov	r3, r2
 8000acc:	005b      	lsls	r3, r3, #1
 8000ace:	4413      	add	r3, r2
 8000ad0:	009b      	lsls	r3, r3, #2
 8000ad2:	440b      	add	r3, r1
 8000ad4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000ad8:	601a      	str	r2, [r3, #0]

}
 8000ada:	bf00      	nop
 8000adc:	370c      	adds	r7, #12
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr

08000ae6 <XMC_PRIOARRAY_Add>:

void XMC_PRIOARRAY_Add(XMC_PRIOARRAY_t *prioarray, int32_t item, int32_t priority)
{
 8000ae6:	b580      	push	{r7, lr}
 8000ae8:	b086      	sub	sp, #24
 8000aea:	af00      	add	r7, sp, #0
 8000aec:	60f8      	str	r0, [r7, #12]
 8000aee:	60b9      	str	r1, [r7, #8]
 8000af0:	607a      	str	r2, [r7, #4]
  int32_t next;
  int32_t previous;

  XMC_ASSERT("XMC_PRIOARRAY_Add: item out of range", (item >= 0) && (item < prioarray->size));
  
  next = XMC_PRIOARRAY_GetHead(prioarray);
 8000af2:	68f8      	ldr	r0, [r7, #12]
 8000af4:	f7ff fec1 	bl	800087a <XMC_PRIOARRAY_GetHead>
 8000af8:	6178      	str	r0, [r7, #20]
  while (XMC_PRIOARRAY_GetItemPriority(prioarray, next) > priority)
 8000afa:	e004      	b.n	8000b06 <XMC_PRIOARRAY_Add+0x20>
  {
    next = XMC_PRIOARRAY_GetItemNext(prioarray, next);
 8000afc:	6979      	ldr	r1, [r7, #20]
 8000afe:	68f8      	ldr	r0, [r7, #12]
 8000b00:	f7ff fee4 	bl	80008cc <XMC_PRIOARRAY_GetItemNext>
 8000b04:	6178      	str	r0, [r7, #20]
  while (XMC_PRIOARRAY_GetItemPriority(prioarray, next) > priority)
 8000b06:	6979      	ldr	r1, [r7, #20]
 8000b08:	68f8      	ldr	r0, [r7, #12]
 8000b0a:	f7ff fecb 	bl	80008a4 <XMC_PRIOARRAY_GetItemPriority>
 8000b0e:	4602      	mov	r2, r0
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	4293      	cmp	r3, r2
 8000b14:	dbf2      	blt.n	8000afc <XMC_PRIOARRAY_Add+0x16>
  }

  previous = prioarray->items[next].previous;
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	6859      	ldr	r1, [r3, #4]
 8000b1a:	697a      	ldr	r2, [r7, #20]
 8000b1c:	4613      	mov	r3, r2
 8000b1e:	005b      	lsls	r3, r3, #1
 8000b20:	4413      	add	r3, r2
 8000b22:	009b      	lsls	r3, r3, #2
 8000b24:	440b      	add	r3, r1
 8000b26:	685b      	ldr	r3, [r3, #4]
 8000b28:	613b      	str	r3, [r7, #16]

  prioarray->items[item].next = next;
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	6859      	ldr	r1, [r3, #4]
 8000b2e:	68ba      	ldr	r2, [r7, #8]
 8000b30:	4613      	mov	r3, r2
 8000b32:	005b      	lsls	r3, r3, #1
 8000b34:	4413      	add	r3, r2
 8000b36:	009b      	lsls	r3, r3, #2
 8000b38:	440b      	add	r3, r1
 8000b3a:	697a      	ldr	r2, [r7, #20]
 8000b3c:	609a      	str	r2, [r3, #8]
  prioarray->items[item].previous = previous;
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	6859      	ldr	r1, [r3, #4]
 8000b42:	68ba      	ldr	r2, [r7, #8]
 8000b44:	4613      	mov	r3, r2
 8000b46:	005b      	lsls	r3, r3, #1
 8000b48:	4413      	add	r3, r2
 8000b4a:	009b      	lsls	r3, r3, #2
 8000b4c:	440b      	add	r3, r1
 8000b4e:	693a      	ldr	r2, [r7, #16]
 8000b50:	605a      	str	r2, [r3, #4]
  prioarray->items[item].priority = priority;
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	6859      	ldr	r1, [r3, #4]
 8000b56:	68ba      	ldr	r2, [r7, #8]
 8000b58:	4613      	mov	r3, r2
 8000b5a:	005b      	lsls	r3, r3, #1
 8000b5c:	4413      	add	r3, r2
 8000b5e:	009b      	lsls	r3, r3, #2
 8000b60:	440b      	add	r3, r1
 8000b62:	687a      	ldr	r2, [r7, #4]
 8000b64:	601a      	str	r2, [r3, #0]

  prioarray->items[previous].next = item;
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	6859      	ldr	r1, [r3, #4]
 8000b6a:	693a      	ldr	r2, [r7, #16]
 8000b6c:	4613      	mov	r3, r2
 8000b6e:	005b      	lsls	r3, r3, #1
 8000b70:	4413      	add	r3, r2
 8000b72:	009b      	lsls	r3, r3, #2
 8000b74:	440b      	add	r3, r1
 8000b76:	68ba      	ldr	r2, [r7, #8]
 8000b78:	609a      	str	r2, [r3, #8]
  prioarray->items[next].previous = item;
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	6859      	ldr	r1, [r3, #4]
 8000b7e:	697a      	ldr	r2, [r7, #20]
 8000b80:	4613      	mov	r3, r2
 8000b82:	005b      	lsls	r3, r3, #1
 8000b84:	4413      	add	r3, r2
 8000b86:	009b      	lsls	r3, r3, #2
 8000b88:	440b      	add	r3, r1
 8000b8a:	68ba      	ldr	r2, [r7, #8]
 8000b8c:	605a      	str	r2, [r3, #4]
}
 8000b8e:	bf00      	nop
 8000b90:	3718      	adds	r7, #24
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}

08000b96 <XMC_PRIOARRAY_Remove>:

void XMC_PRIOARRAY_Remove(XMC_PRIOARRAY_t *prioarray, int32_t item)
{
 8000b96:	b480      	push	{r7}
 8000b98:	b085      	sub	sp, #20
 8000b9a:	af00      	add	r7, sp, #0
 8000b9c:	6078      	str	r0, [r7, #4]
 8000b9e:	6039      	str	r1, [r7, #0]
  int32_t next;
  int32_t previous;

  XMC_ASSERT("XMC_PRIOARRAY_Add: item out of range", (item >= 0) && (item < prioarray->size));
  
  next = prioarray->items[item].next;
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	6859      	ldr	r1, [r3, #4]
 8000ba4:	683a      	ldr	r2, [r7, #0]
 8000ba6:	4613      	mov	r3, r2
 8000ba8:	005b      	lsls	r3, r3, #1
 8000baa:	4413      	add	r3, r2
 8000bac:	009b      	lsls	r3, r3, #2
 8000bae:	440b      	add	r3, r1
 8000bb0:	689b      	ldr	r3, [r3, #8]
 8000bb2:	60fb      	str	r3, [r7, #12]
  previous = prioarray->items[item].previous;
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	6859      	ldr	r1, [r3, #4]
 8000bb8:	683a      	ldr	r2, [r7, #0]
 8000bba:	4613      	mov	r3, r2
 8000bbc:	005b      	lsls	r3, r3, #1
 8000bbe:	4413      	add	r3, r2
 8000bc0:	009b      	lsls	r3, r3, #2
 8000bc2:	440b      	add	r3, r1
 8000bc4:	685b      	ldr	r3, [r3, #4]
 8000bc6:	60bb      	str	r3, [r7, #8]

  prioarray->items[previous].next = next;
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	6859      	ldr	r1, [r3, #4]
 8000bcc:	68ba      	ldr	r2, [r7, #8]
 8000bce:	4613      	mov	r3, r2
 8000bd0:	005b      	lsls	r3, r3, #1
 8000bd2:	4413      	add	r3, r2
 8000bd4:	009b      	lsls	r3, r3, #2
 8000bd6:	440b      	add	r3, r1
 8000bd8:	68fa      	ldr	r2, [r7, #12]
 8000bda:	609a      	str	r2, [r3, #8]
  prioarray->items[next].previous = previous;
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	6859      	ldr	r1, [r3, #4]
 8000be0:	68fa      	ldr	r2, [r7, #12]
 8000be2:	4613      	mov	r3, r2
 8000be4:	005b      	lsls	r3, r3, #1
 8000be6:	4413      	add	r3, r2
 8000be8:	009b      	lsls	r3, r3, #2
 8000bea:	440b      	add	r3, r1
 8000bec:	68ba      	ldr	r2, [r7, #8]
 8000bee:	605a      	str	r2, [r3, #4]
}
 8000bf0:	bf00      	nop
 8000bf2:	3714      	adds	r7, #20
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfa:	4770      	bx	lr

08000bfc <delay>:

/*******************************************************************************
 * LOCAL FUNCTIONS
 *******************************************************************************/
static void delay(uint32_t cycles)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b085      	sub	sp, #20
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  volatile uint32_t i;

  for(i = 0UL; i < cycles ;++i)
 8000c04:	2300      	movs	r3, #0
 8000c06:	60fb      	str	r3, [r7, #12]
 8000c08:	e003      	b.n	8000c12 <delay+0x16>
  {
    __NOP();
 8000c0a:	bf00      	nop
  for(i = 0UL; i < cycles ;++i)
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	3301      	adds	r3, #1
 8000c10:	60fb      	str	r3, [r7, #12]
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	687a      	ldr	r2, [r7, #4]
 8000c16:	429a      	cmp	r2, r3
 8000c18:	d8f7      	bhi.n	8000c0a <delay+0xe>
  }
}
 8000c1a:	bf00      	nop
 8000c1c:	bf00      	nop
 8000c1e:	3714      	adds	r7, #20
 8000c20:	46bd      	mov	sp, r7
 8000c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c26:	4770      	bx	lr

08000c28 <SystemInit>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

__WEAK void SystemInit(void)
{
 8000c28:	b598      	push	{r3, r4, r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
  memcpy(g_chipid, CHIPID_LOC, 16);
 8000c2c:	4a06      	ldr	r2, [pc, #24]	; (8000c48 <SystemInit+0x20>)
 8000c2e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000c32:	4614      	mov	r4, r2
 8000c34:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c36:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  SystemCoreSetup();
 8000c3a:	f000 f807 	bl	8000c4c <SystemCoreSetup>
  SystemCoreClockSetup(); 
 8000c3e:	f000 f83f 	bl	8000cc0 <SystemCoreClockSetup>
}
 8000c42:	bf00      	nop
 8000c44:	bd98      	pop	{r3, r4, r7, pc}
 8000c46:	bf00      	nop
 8000c48:	2000ffc4 	.word	0x2000ffc4

08000c4c <SystemCoreSetup>:

__WEAK void SystemCoreSetup(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b083      	sub	sp, #12
 8000c50:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c52:	b672      	cpsid	i
}
 8000c54:	bf00      	nop
  uint32_t temp;
	
  /* relocate vector table */
  __disable_irq();
  SCB->VTOR = (uint32_t)(&__Vectors);
 8000c56:	4b17      	ldr	r3, [pc, #92]	; (8000cb4 <SystemCoreSetup+0x68>)
 8000c58:	4a17      	ldr	r2, [pc, #92]	; (8000cb8 <SystemCoreSetup+0x6c>)
 8000c5a:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000c5c:	f3bf 8f4f 	dsb	sy
}
 8000c60:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 8000c62:	b662      	cpsie	i
}
 8000c64:	bf00      	nop
  __DSB();
  __enable_irq();
    
#if ((__FPU_PRESENT == 1) && (__FPU_USED == 1))
  SCB->CPACR |= ((3UL << 10*2) |                 /* set CP10 Full Access */
 8000c66:	4b13      	ldr	r3, [pc, #76]	; (8000cb4 <SystemCoreSetup+0x68>)
 8000c68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c6c:	4a11      	ldr	r2, [pc, #68]	; (8000cb4 <SystemCoreSetup+0x68>)
 8000c6e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c72:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
                 (3UL << 11*2)  );               /* set CP11 Full Access */
#endif

  /* Enable unaligned memory access - SCB_CCR.UNALIGN_TRP = 0 */
  SCB->CCR &= ~(SCB_CCR_UNALIGN_TRP_Msk);
 8000c76:	4b0f      	ldr	r3, [pc, #60]	; (8000cb4 <SystemCoreSetup+0x68>)
 8000c78:	695b      	ldr	r3, [r3, #20]
 8000c7a:	4a0e      	ldr	r2, [pc, #56]	; (8000cb4 <SystemCoreSetup+0x68>)
 8000c7c:	f023 0308 	bic.w	r3, r3, #8
 8000c80:	6153      	str	r3, [r2, #20]

  temp = FLASH0->FCON;
 8000c82:	4b0e      	ldr	r3, [pc, #56]	; (8000cbc <SystemCoreSetup+0x70>)
 8000c84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000c88:	695b      	ldr	r3, [r3, #20]
 8000c8a:	607b      	str	r3, [r7, #4]
  temp &= ~FLASH_FCON_WSPFLASH_Msk;
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	f023 030f 	bic.w	r3, r3, #15
 8000c92:	607b      	str	r3, [r7, #4]
  temp |= PMU_FLASH_WS;
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	f043 0303 	orr.w	r3, r3, #3
 8000c9a:	607b      	str	r3, [r7, #4]
  FLASH0->FCON = temp;
 8000c9c:	4b07      	ldr	r3, [pc, #28]	; (8000cbc <SystemCoreSetup+0x70>)
 8000c9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000ca2:	461a      	mov	r2, r3
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	6153      	str	r3, [r2, #20]
}
 8000ca8:	bf00      	nop
 8000caa:	370c      	adds	r7, #12
 8000cac:	46bd      	mov	sp, r7
 8000cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb2:	4770      	bx	lr
 8000cb4:	e000ed00 	.word	0xe000ed00
 8000cb8:	08000000 	.word	0x08000000
 8000cbc:	58001000 	.word	0x58001000

08000cc0 <SystemCoreClockSetup>:

__WEAK void SystemCoreClockSetup(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
#else
  /* Automatic calibration uses the fSTDBY */

  /* Enable HIB domain */
  /* Power up HIB domain if and only if it is currently powered down */
  if((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0)
 8000cc4:	4b75      	ldr	r3, [pc, #468]	; (8000e9c <SystemCoreClockSetup+0x1dc>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	f003 0301 	and.w	r3, r3, #1
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d10c      	bne.n	8000cea <SystemCoreClockSetup+0x2a>
  {
    SCU_POWER->PWRSET |= SCU_POWER_PWRSET_HIB_Msk;
 8000cd0:	4b72      	ldr	r3, [pc, #456]	; (8000e9c <SystemCoreClockSetup+0x1dc>)
 8000cd2:	685b      	ldr	r3, [r3, #4]
 8000cd4:	4a71      	ldr	r2, [pc, #452]	; (8000e9c <SystemCoreClockSetup+0x1dc>)
 8000cd6:	f043 0301 	orr.w	r3, r3, #1
 8000cda:	6053      	str	r3, [r2, #4]

    while((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0)
 8000cdc:	bf00      	nop
 8000cde:	4b6f      	ldr	r3, [pc, #444]	; (8000e9c <SystemCoreClockSetup+0x1dc>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	f003 0301 	and.w	r3, r3, #1
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d0f9      	beq.n	8000cde <SystemCoreClockSetup+0x1e>
      /* wait until HIB domain is enabled */
    }
  }

  /* Remove the reset only if HIB domain were in a state of reset */
  if((SCU_RESET->RSTSTAT) & SCU_RESET_RSTSTAT_HIBRS_Msk)
 8000cea:	4b6d      	ldr	r3, [pc, #436]	; (8000ea0 <SystemCoreClockSetup+0x1e0>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d009      	beq.n	8000d0a <SystemCoreClockSetup+0x4a>
  {
    SCU_RESET->RSTCLR |= SCU_RESET_RSTCLR_HIBRS_Msk;
 8000cf6:	4b6a      	ldr	r3, [pc, #424]	; (8000ea0 <SystemCoreClockSetup+0x1e0>)
 8000cf8:	689b      	ldr	r3, [r3, #8]
 8000cfa:	4a69      	ldr	r2, [pc, #420]	; (8000ea0 <SystemCoreClockSetup+0x1e0>)
 8000cfc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d00:	6093      	str	r3, [r2, #8]
    delay(DELAY_CNT_150US_50MHZ);
 8000d02:	f641 504c 	movw	r0, #7500	; 0x1d4c
 8000d06:	f7ff ff79 	bl	8000bfc <delay>
  SCU_HIBERNATE->HDCR |= SCU_HIBERNATE_HDCR_RCS_Msk | SCU_HIBERNATE_HDCR_STDBYSEL_Msk;

#endif /* STDBY_CLOCK_SRC == STDBY_CLOCK_SRC_OSCULP */

  /* Enable automatic calibration of internal fast oscillator */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_AOTREN_Msk;
 8000d0a:	4b66      	ldr	r3, [pc, #408]	; (8000ea4 <SystemCoreClockSetup+0x1e4>)
 8000d0c:	685b      	ldr	r3, [r3, #4]
 8000d0e:	4a65      	ldr	r2, [pc, #404]	; (8000ea4 <SystemCoreClockSetup+0x1e4>)
 8000d10:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000d14:	6053      	str	r3, [r2, #4]
#endif /* FOFI_CALIBRATION_MODE == FOFI_CALIBRATION_MODE_AUTOMATIC */

  delay(DELAY_CNT_50US_50MHZ);
 8000d16:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8000d1a:	f7ff ff6f 	bl	8000bfc <delay>

#if ENABLE_PLL

  /* enable PLL */
  SCU_PLL->PLLCON0 &= ~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8000d1e:	4b61      	ldr	r3, [pc, #388]	; (8000ea4 <SystemCoreClockSetup+0x1e4>)
 8000d20:	685b      	ldr	r3, [r3, #4]
 8000d22:	4a60      	ldr	r2, [pc, #384]	; (8000ea4 <SystemCoreClockSetup+0x1e4>)
 8000d24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d28:	f023 0302 	bic.w	r3, r3, #2
 8000d2c:	6053      	str	r3, [r2, #4]

#if PLL_CLOCK_SRC != PLL_CLOCK_SRC_OFI
  /* enable OSC_HP */
  if ((SCU_OSC->OSCHPCTRL & SCU_OSC_OSCHPCTRL_MODE_Msk) != 0U)
 8000d2e:	4b5e      	ldr	r3, [pc, #376]	; (8000ea8 <SystemCoreClockSetup+0x1e8>)
 8000d30:	685b      	ldr	r3, [r3, #4]
 8000d32:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d029      	beq.n	8000d8e <SystemCoreClockSetup+0xce>
  {
    SCU_OSC->OSCHPCTRL &= ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk);
 8000d3a:	4b5b      	ldr	r3, [pc, #364]	; (8000ea8 <SystemCoreClockSetup+0x1e8>)
 8000d3c:	685b      	ldr	r3, [r3, #4]
 8000d3e:	4a5a      	ldr	r2, [pc, #360]	; (8000ea8 <SystemCoreClockSetup+0x1e8>)
 8000d40:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8000d44:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000d48:	6053      	str	r3, [r2, #4]
    SCU_OSC->OSCHPCTRL |= ((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos;
 8000d4a:	f000 f927 	bl	8000f9c <OSCHP_GetFrequency>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	4a56      	ldr	r2, [pc, #344]	; (8000eac <SystemCoreClockSetup+0x1ec>)
 8000d52:	fba2 2303 	umull	r2, r3, r2, r3
 8000d56:	0d1b      	lsrs	r3, r3, #20
 8000d58:	3b01      	subs	r3, #1
 8000d5a:	041a      	lsls	r2, r3, #16
 8000d5c:	4b52      	ldr	r3, [pc, #328]	; (8000ea8 <SystemCoreClockSetup+0x1e8>)
 8000d5e:	685b      	ldr	r3, [r3, #4]
 8000d60:	4951      	ldr	r1, [pc, #324]	; (8000ea8 <SystemCoreClockSetup+0x1e8>)
 8000d62:	4313      	orrs	r3, r2
 8000d64:	604b      	str	r3, [r1, #4]

    /* select OSC_HP clock as PLL input */
    SCU_PLL->PLLCON2 &= ~SCU_PLL_PLLCON2_PINSEL_Msk;
 8000d66:	4b4f      	ldr	r3, [pc, #316]	; (8000ea4 <SystemCoreClockSetup+0x1e4>)
 8000d68:	68db      	ldr	r3, [r3, #12]
 8000d6a:	4a4e      	ldr	r2, [pc, #312]	; (8000ea4 <SystemCoreClockSetup+0x1e4>)
 8000d6c:	f023 0301 	bic.w	r3, r3, #1
 8000d70:	60d3      	str	r3, [r2, #12]

    /* restart OSC Watchdog */
    SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_OSCRES_Msk;
 8000d72:	4b4c      	ldr	r3, [pc, #304]	; (8000ea4 <SystemCoreClockSetup+0x1e4>)
 8000d74:	685b      	ldr	r3, [r3, #4]
 8000d76:	4a4b      	ldr	r2, [pc, #300]	; (8000ea4 <SystemCoreClockSetup+0x1e4>)
 8000d78:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000d7c:	6053      	str	r3, [r2, #4]

    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_OSC_USABLE) != SCU_PLL_PLLSTAT_OSC_USABLE)
 8000d7e:	bf00      	nop
 8000d80:	4b48      	ldr	r3, [pc, #288]	; (8000ea4 <SystemCoreClockSetup+0x1e4>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	f403 7360 	and.w	r3, r3, #896	; 0x380
 8000d88:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 8000d8c:	d1f8      	bne.n	8000d80 <SystemCoreClockSetup+0xc0>
  /* select backup clock as PLL input */
  SCU_PLL->PLLCON2 |= SCU_PLL_PLLCON2_PINSEL_Msk;
#endif

  /* Go to bypass the Main PLL */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000d8e:	4b45      	ldr	r3, [pc, #276]	; (8000ea4 <SystemCoreClockSetup+0x1e4>)
 8000d90:	685b      	ldr	r3, [r3, #4]
 8000d92:	4a44      	ldr	r2, [pc, #272]	; (8000ea4 <SystemCoreClockSetup+0x1e4>)
 8000d94:	f043 0301 	orr.w	r3, r3, #1
 8000d98:	6053      	str	r3, [r2, #4]

  /* disconnect Oscillator from PLL */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_FINDIS_Msk;
 8000d9a:	4b42      	ldr	r3, [pc, #264]	; (8000ea4 <SystemCoreClockSetup+0x1e4>)
 8000d9c:	685b      	ldr	r3, [r3, #4]
 8000d9e:	4a41      	ldr	r2, [pc, #260]	; (8000ea4 <SystemCoreClockSetup+0x1e4>)
 8000da0:	f043 0310 	orr.w	r3, r3, #16
 8000da4:	6053      	str	r3, [r2, #4]

  /* Setup divider settings for main PLL */
  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 8000da6:	4b3f      	ldr	r3, [pc, #252]	; (8000ea4 <SystemCoreClockSetup+0x1e4>)
 8000da8:	4a41      	ldr	r2, [pc, #260]	; (8000eb0 <SystemCoreClockSetup+0x1f0>)
 8000daa:	609a      	str	r2, [r3, #8]
                      (PLL_K2DIV_0 << SCU_PLL_PLLCON1_K2DIV_Pos) |
                      (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));

  /* Set OSCDISCDIS */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 8000dac:	4b3d      	ldr	r3, [pc, #244]	; (8000ea4 <SystemCoreClockSetup+0x1e4>)
 8000dae:	685b      	ldr	r3, [r3, #4]
 8000db0:	4a3c      	ldr	r2, [pc, #240]	; (8000ea4 <SystemCoreClockSetup+0x1e4>)
 8000db2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000db6:	6053      	str	r3, [r2, #4]

  /* connect Oscillator to PLL */
  SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_FINDIS_Msk;
 8000db8:	4b3a      	ldr	r3, [pc, #232]	; (8000ea4 <SystemCoreClockSetup+0x1e4>)
 8000dba:	685b      	ldr	r3, [r3, #4]
 8000dbc:	4a39      	ldr	r2, [pc, #228]	; (8000ea4 <SystemCoreClockSetup+0x1e4>)
 8000dbe:	f023 0310 	bic.w	r3, r3, #16
 8000dc2:	6053      	str	r3, [r2, #4]

  /* restart PLL Lock detection */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_RESLD_Msk;
 8000dc4:	4b37      	ldr	r3, [pc, #220]	; (8000ea4 <SystemCoreClockSetup+0x1e4>)
 8000dc6:	685b      	ldr	r3, [r3, #4]
 8000dc8:	4a36      	ldr	r2, [pc, #216]	; (8000ea4 <SystemCoreClockSetup+0x1e4>)
 8000dca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000dce:	6053      	str	r3, [r2, #4]

  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8000dd0:	bf00      	nop
 8000dd2:	4b34      	ldr	r3, [pc, #208]	; (8000ea4 <SystemCoreClockSetup+0x1e4>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	f003 0304 	and.w	r3, r3, #4
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d0f9      	beq.n	8000dd2 <SystemCoreClockSetup+0x112>
  {
    /* wait for PLL Lock */
  }

  /* Disable bypass- put PLL clock back */
  SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000dde:	4b31      	ldr	r3, [pc, #196]	; (8000ea4 <SystemCoreClockSetup+0x1e4>)
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	4a30      	ldr	r2, [pc, #192]	; (8000ea4 <SystemCoreClockSetup+0x1e4>)
 8000de4:	f023 0301 	bic.w	r3, r3, #1
 8000de8:	6053      	str	r3, [r2, #4]
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) != 0U)
 8000dea:	bf00      	nop
 8000dec:	4b2d      	ldr	r3, [pc, #180]	; (8000ea4 <SystemCoreClockSetup+0x1e4>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	f003 0301 	and.w	r3, r3, #1
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d1f9      	bne.n	8000dec <SystemCoreClockSetup+0x12c>
  }
#endif /* ENABLE_PLL */

#if (SYS_CLOCK_SRC == SYS_CLOCK_SRC_PLL)
  /* Switch system clock to PLL */
  SCU_CLK->SYSCLKCR |= SCU_CLK_SYSCLKCR_SYSSEL_Msk;
 8000df8:	4b2e      	ldr	r3, [pc, #184]	; (8000eb4 <SystemCoreClockSetup+0x1f4>)
 8000dfa:	68db      	ldr	r3, [r3, #12]
 8000dfc:	4a2d      	ldr	r2, [pc, #180]	; (8000eb4 <SystemCoreClockSetup+0x1f4>)
 8000dfe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e02:	60d3      	str	r3, [r2, #12]
  /* Switch system clock to backup clock */
  SCU_CLK->SYSCLKCR &= ~SCU_CLK_SYSCLKCR_SYSSEL_Msk;
#endif

  /* Before scaling to final frequency we need to setup the clock dividers */
  SCU_CLK->PBCLKCR = PBCLKDIV;
 8000e04:	4b2b      	ldr	r3, [pc, #172]	; (8000eb4 <SystemCoreClockSetup+0x1f4>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	615a      	str	r2, [r3, #20]
  SCU_CLK->CPUCLKCR = CPUCLKDIV;
 8000e0a:	4b2a      	ldr	r3, [pc, #168]	; (8000eb4 <SystemCoreClockSetup+0x1f4>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	611a      	str	r2, [r3, #16]
  SCU_CLK->CCUCLKCR = CCUCLKDIV;
 8000e10:	4b28      	ldr	r3, [pc, #160]	; (8000eb4 <SystemCoreClockSetup+0x1f4>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	621a      	str	r2, [r3, #32]
  SCU_CLK->WDTCLKCR = WDTCLKDIV;
 8000e16:	4b27      	ldr	r3, [pc, #156]	; (8000eb4 <SystemCoreClockSetup+0x1f4>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	625a      	str	r2, [r3, #36]	; 0x24
  SCU_CLK->EBUCLKCR = EBUCLKDIV;
 8000e1c:	4b25      	ldr	r3, [pc, #148]	; (8000eb4 <SystemCoreClockSetup+0x1f4>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	61da      	str	r2, [r3, #28]
  SCU_CLK->USBCLKCR = USBCLKDIV;
 8000e22:	4b24      	ldr	r3, [pc, #144]	; (8000eb4 <SystemCoreClockSetup+0x1f4>)
 8000e24:	2203      	movs	r2, #3
 8000e26:	619a      	str	r2, [r3, #24]

#if ENABLE_PLL
  /* PLL frequency stepping...*/
  /* Reset OSCDISCDIS */
  SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 8000e28:	4b1e      	ldr	r3, [pc, #120]	; (8000ea4 <SystemCoreClockSetup+0x1e4>)
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	4a1d      	ldr	r2, [pc, #116]	; (8000ea4 <SystemCoreClockSetup+0x1e4>)
 8000e2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000e32:	6053      	str	r3, [r2, #4]

  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 8000e34:	4b1b      	ldr	r3, [pc, #108]	; (8000ea4 <SystemCoreClockSetup+0x1e4>)
 8000e36:	4a20      	ldr	r2, [pc, #128]	; (8000eb8 <SystemCoreClockSetup+0x1f8>)
 8000e38:	609a      	str	r2, [r3, #8]
	                    (PLL_K2DIV_1 << SCU_PLL_PLLCON1_K2DIV_Pos) |
	                    (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));


  delay(DELAY_CNT_50US_60MHZ);
 8000e3a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000e3e:	f7ff fedd 	bl	8000bfc <delay>
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8000e42:	bf00      	nop
 8000e44:	4b17      	ldr	r3, [pc, #92]	; (8000ea4 <SystemCoreClockSetup+0x1e4>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	f003 0304 	and.w	r3, r3, #4
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d0f9      	beq.n	8000e44 <SystemCoreClockSetup+0x184>
  {
    /* wait for PLL Lock */
  }

  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 8000e50:	4b14      	ldr	r3, [pc, #80]	; (8000ea4 <SystemCoreClockSetup+0x1e4>)
 8000e52:	4a1a      	ldr	r2, [pc, #104]	; (8000ebc <SystemCoreClockSetup+0x1fc>)
 8000e54:	609a      	str	r2, [r3, #8]
	                    (PLL_K2DIV_2 << SCU_PLL_PLLCON1_K2DIV_Pos) |
	                    (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));


  delay(DELAY_CNT_50US_90MHZ);
 8000e56:	f241 1094 	movw	r0, #4500	; 0x1194
 8000e5a:	f7ff fecf 	bl	8000bfc <delay>
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8000e5e:	bf00      	nop
 8000e60:	4b10      	ldr	r3, [pc, #64]	; (8000ea4 <SystemCoreClockSetup+0x1e4>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	f003 0304 	and.w	r3, r3, #4
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d0f9      	beq.n	8000e60 <SystemCoreClockSetup+0x1a0>
  {
    /* wait for PLL Lock */
  }

  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 8000e6c:	4b0d      	ldr	r3, [pc, #52]	; (8000ea4 <SystemCoreClockSetup+0x1e4>)
 8000e6e:	4a14      	ldr	r2, [pc, #80]	; (8000ec0 <SystemCoreClockSetup+0x200>)
 8000e70:	609a      	str	r2, [r3, #8]
	                    (PLL_K2DIV << SCU_PLL_PLLCON1_K2DIV_Pos) |
	                    (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));


  delay(DELAY_CNT_50US_120MHZ);
 8000e72:	f241 7070 	movw	r0, #6000	; 0x1770
 8000e76:	f7ff fec1 	bl	8000bfc <delay>
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8000e7a:	bf00      	nop
 8000e7c:	4b09      	ldr	r3, [pc, #36]	; (8000ea4 <SystemCoreClockSetup+0x1e4>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	f003 0304 	and.w	r3, r3, #4
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d0f9      	beq.n	8000e7c <SystemCoreClockSetup+0x1bc>
  {
    /* wait for PLL Lock */
  }

  SCU_TRAP->TRAPCLR = SCU_TRAP_TRAPCLR_SOSCWDGT_Msk | SCU_TRAP_TRAPCLR_SVCOLCKT_Msk;
 8000e88:	4b0e      	ldr	r3, [pc, #56]	; (8000ec4 <SystemCoreClockSetup+0x204>)
 8000e8a:	2205      	movs	r2, #5
 8000e8c:	60da      	str	r2, [r3, #12]
    /* wait for PLL Lock */
  }
#endif /* (USBCLKDIV & SCU_CLK_USBCLKCR_USBSEL_Msk) */

  /* Enable selected clocks */
  SCU_CLK->CLKSET = ENABLE_SCUCLK;
 8000e8e:	4b09      	ldr	r3, [pc, #36]	; (8000eb4 <SystemCoreClockSetup+0x1f4>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	605a      	str	r2, [r3, #4]
  PORT0->IOCR8 = (PORT0->IOCR8 & ~PORT0_IOCR8_PC8_Msk) | (0x11U << PORT0_IOCR8_PC8_Pos);
#endif

#endif  /* ENABLE_EXTCLK == 1  */

  SystemCoreClockUpdate();
 8000e94:	f000 f818 	bl	8000ec8 <SystemCoreClockUpdate>
}
 8000e98:	bf00      	nop
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	50004200 	.word	0x50004200
 8000ea0:	50004400 	.word	0x50004400
 8000ea4:	50004710 	.word	0x50004710
 8000ea8:	50004700 	.word	0x50004700
 8000eac:	6b5fca6b 	.word	0x6b5fca6b
 8000eb0:	01134f00 	.word	0x01134f00
 8000eb4:	50004600 	.word	0x50004600
 8000eb8:	01074f00 	.word	0x01074f00
 8000ebc:	01044f00 	.word	0x01044f00
 8000ec0:	01034f00 	.word	0x01034f00
 8000ec4:	50004160 	.word	0x50004160

08000ec8 <SystemCoreClockUpdate>:

__WEAK void SystemCoreClockUpdate(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b084      	sub	sp, #16
 8000ecc:	af00      	add	r7, sp, #0
  uint32_t pdiv;
  uint32_t ndiv;
  uint32_t kdiv;
  uint32_t temp;

  if (SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSSEL_Msk)
 8000ece:	4b2f      	ldr	r3, [pc, #188]	; (8000f8c <SystemCoreClockUpdate+0xc4>)
 8000ed0:	68db      	ldr	r3, [r3, #12]
 8000ed2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d03e      	beq.n	8000f58 <SystemCoreClockUpdate+0x90>
  {
    /* fPLL is clock source for fSYS */
    if(SCU_PLL->PLLCON2 & SCU_PLL_PLLCON2_PINSEL_Msk)
 8000eda:	4b2d      	ldr	r3, [pc, #180]	; (8000f90 <SystemCoreClockUpdate+0xc8>)
 8000edc:	68db      	ldr	r3, [r3, #12]
 8000ede:	f003 0301 	and.w	r3, r3, #1
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d002      	beq.n	8000eec <SystemCoreClockUpdate+0x24>
    {
      /* PLL input clock is the backup clock (fOFI) */
      temp = OFI_FREQUENCY;
 8000ee6:	4b2b      	ldr	r3, [pc, #172]	; (8000f94 <SystemCoreClockUpdate+0xcc>)
 8000ee8:	60fb      	str	r3, [r7, #12]
 8000eea:	e002      	b.n	8000ef2 <SystemCoreClockUpdate+0x2a>
    }
    else
    {
      /* PLL input clock is the high performance osicllator (fOSCHP) */
      temp = OSCHP_GetFrequency();
 8000eec:	f000 f856 	bl	8000f9c <OSCHP_GetFrequency>
 8000ef0:	60f8      	str	r0, [r7, #12]
    }

    /* check if PLL is locked */
    if (SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk)
 8000ef2:	4b27      	ldr	r3, [pc, #156]	; (8000f90 <SystemCoreClockUpdate+0xc8>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	f003 0304 	and.w	r3, r3, #4
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d020      	beq.n	8000f40 <SystemCoreClockUpdate+0x78>
    {
      /* PLL normal mode */
      /* read back divider settings */
      pdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1;
 8000efe:	4b24      	ldr	r3, [pc, #144]	; (8000f90 <SystemCoreClockUpdate+0xc8>)
 8000f00:	689b      	ldr	r3, [r3, #8]
 8000f02:	0e1b      	lsrs	r3, r3, #24
 8000f04:	f003 030f 	and.w	r3, r3, #15
 8000f08:	3301      	adds	r3, #1
 8000f0a:	607b      	str	r3, [r7, #4]
      ndiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1;
 8000f0c:	4b20      	ldr	r3, [pc, #128]	; (8000f90 <SystemCoreClockUpdate+0xc8>)
 8000f0e:	689b      	ldr	r3, [r3, #8]
 8000f10:	0a1b      	lsrs	r3, r3, #8
 8000f12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000f16:	3301      	adds	r3, #1
 8000f18:	603b      	str	r3, [r7, #0]
      kdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1;
 8000f1a:	4b1d      	ldr	r3, [pc, #116]	; (8000f90 <SystemCoreClockUpdate+0xc8>)
 8000f1c:	689b      	ldr	r3, [r3, #8]
 8000f1e:	0c1b      	lsrs	r3, r3, #16
 8000f20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000f24:	3301      	adds	r3, #1
 8000f26:	60bb      	str	r3, [r7, #8]

      temp = (temp / (pdiv * kdiv)) * ndiv;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	68ba      	ldr	r2, [r7, #8]
 8000f2c:	fb02 f303 	mul.w	r3, r2, r3
 8000f30:	68fa      	ldr	r2, [r7, #12]
 8000f32:	fbb2 f2f3 	udiv	r2, r2, r3
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	fb02 f303 	mul.w	r3, r2, r3
 8000f3c:	60fb      	str	r3, [r7, #12]
 8000f3e:	e00d      	b.n	8000f5c <SystemCoreClockUpdate+0x94>
    }
    else
    {
      /* PLL prescalar mode */
      /* read back divider settings */
      kdiv  = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K1DIV_Msk) >> SCU_PLL_PLLCON1_K1DIV_Pos) + 1;
 8000f40:	4b13      	ldr	r3, [pc, #76]	; (8000f90 <SystemCoreClockUpdate+0xc8>)
 8000f42:	689b      	ldr	r3, [r3, #8]
 8000f44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000f48:	3301      	adds	r3, #1
 8000f4a:	60bb      	str	r3, [r7, #8]
      
      temp = (temp / kdiv);
 8000f4c:	68fa      	ldr	r2, [r7, #12]
 8000f4e:	68bb      	ldr	r3, [r7, #8]
 8000f50:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f54:	60fb      	str	r3, [r7, #12]
 8000f56:	e001      	b.n	8000f5c <SystemCoreClockUpdate+0x94>
    }
  }
  else
  {
    /* fOFI is clock source for fSYS */    
    temp = OFI_FREQUENCY;
 8000f58:	4b0e      	ldr	r3, [pc, #56]	; (8000f94 <SystemCoreClockUpdate+0xcc>)
 8000f5a:	60fb      	str	r3, [r7, #12]
  }

  temp = temp / ((SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSDIV_Msk) + 1);
 8000f5c:	4b0b      	ldr	r3, [pc, #44]	; (8000f8c <SystemCoreClockUpdate+0xc4>)
 8000f5e:	68db      	ldr	r3, [r3, #12]
 8000f60:	b2db      	uxtb	r3, r3
 8000f62:	3301      	adds	r3, #1
 8000f64:	68fa      	ldr	r2, [r7, #12]
 8000f66:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f6a:	60fb      	str	r3, [r7, #12]
  temp = temp / ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) + 1);
 8000f6c:	4b07      	ldr	r3, [pc, #28]	; (8000f8c <SystemCoreClockUpdate+0xc4>)
 8000f6e:	691b      	ldr	r3, [r3, #16]
 8000f70:	f003 0301 	and.w	r3, r3, #1
 8000f74:	3301      	adds	r3, #1
 8000f76:	68fa      	ldr	r2, [r7, #12]
 8000f78:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f7c:	60fb      	str	r3, [r7, #12]

  SystemCoreClock = temp;
 8000f7e:	4a06      	ldr	r2, [pc, #24]	; (8000f98 <SystemCoreClockUpdate+0xd0>)
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	6013      	str	r3, [r2, #0]
}
 8000f84:	bf00      	nop
 8000f86:	3710      	adds	r7, #16
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	50004600 	.word	0x50004600
 8000f90:	50004710 	.word	0x50004710
 8000f94:	016e3600 	.word	0x016e3600
 8000f98:	2000ffc0 	.word	0x2000ffc0

08000f9c <OSCHP_GetFrequency>:

__WEAK uint32_t OSCHP_GetFrequency(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  return OSCHP_FREQUENCY;
 8000fa0:	4b02      	ldr	r3, [pc, #8]	; (8000fac <OSCHP_GetFrequency+0x10>)
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr
 8000fac:	00b71b00 	.word	0x00b71b00

08000fb0 <_sbrk>:

// defined in linker script
extern caddr_t Heap_Bank1_Start;
extern caddr_t Heap_Bank1_End;
caddr_t _sbrk(int nbytes)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b084      	sub	sp, #16
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  static caddr_t heap_ptr = NULL;
  caddr_t base;

  if (heap_ptr == NULL) {
 8000fb8:	4b14      	ldr	r3, [pc, #80]	; (800100c <_sbrk+0x5c>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d102      	bne.n	8000fc6 <_sbrk+0x16>
    heap_ptr = (caddr_t)&Heap_Bank1_Start;
 8000fc0:	4b12      	ldr	r3, [pc, #72]	; (800100c <_sbrk+0x5c>)
 8000fc2:	4a13      	ldr	r2, [pc, #76]	; (8001010 <_sbrk+0x60>)
 8000fc4:	601a      	str	r2, [r3, #0]
  }

  base = heap_ptr;
 8000fc6:	4b11      	ldr	r3, [pc, #68]	; (800100c <_sbrk+0x5c>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	60fb      	str	r3, [r7, #12]

  /* heap word alignment */
  nbytes = (nbytes + 3) & ~0x3U;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	3303      	adds	r3, #3
 8000fd0:	f023 0303 	bic.w	r3, r3, #3
 8000fd4:	607b      	str	r3, [r7, #4]
  if ((caddr_t)&Heap_Bank1_End > (heap_ptr + nbytes))
 8000fd6:	4b0d      	ldr	r3, [pc, #52]	; (800100c <_sbrk+0x5c>)
 8000fd8:	681a      	ldr	r2, [r3, #0]
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	4413      	add	r3, r2
 8000fde:	4a0d      	ldr	r2, [pc, #52]	; (8001014 <_sbrk+0x64>)
 8000fe0:	4293      	cmp	r3, r2
 8000fe2:	d207      	bcs.n	8000ff4 <_sbrk+0x44>
  {
    heap_ptr += nbytes;
 8000fe4:	4b09      	ldr	r3, [pc, #36]	; (800100c <_sbrk+0x5c>)
 8000fe6:	681a      	ldr	r2, [r3, #0]
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	4413      	add	r3, r2
 8000fec:	4a07      	ldr	r2, [pc, #28]	; (800100c <_sbrk+0x5c>)
 8000fee:	6013      	str	r3, [r2, #0]
    return (base);
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	e006      	b.n	8001002 <_sbrk+0x52>
  }
  else
  {
    /* Heap overflow */
    errno = ENOMEM;
 8000ff4:	f000 f818 	bl	8001028 <__errno>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	220c      	movs	r2, #12
 8000ffc:	601a      	str	r2, [r3, #0]
    return ((caddr_t)-1);
 8000ffe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  }
}
 8001002:	4618      	mov	r0, r3
 8001004:	3710      	adds	r7, #16
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	20000438 	.word	0x20000438
 8001010:	20000440 	.word	0x20000440
 8001014:	2000ffc0 	.word	0x2000ffc0

08001018 <_init>:

/* Init */
void _init(void)
{}
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
 800101c:	bf00      	nop
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr
	...

08001028 <__errno>:
 8001028:	4b01      	ldr	r3, [pc, #4]	; (8001030 <__errno+0x8>)
 800102a:	6818      	ldr	r0, [r3, #0]
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop
 8001030:	20000000 	.word	0x20000000

08001034 <__libc_init_array>:
 8001034:	b570      	push	{r4, r5, r6, lr}
 8001036:	4e0d      	ldr	r6, [pc, #52]	; (800106c <__libc_init_array+0x38>)
 8001038:	4d0d      	ldr	r5, [pc, #52]	; (8001070 <__libc_init_array+0x3c>)
 800103a:	1b76      	subs	r6, r6, r5
 800103c:	10b6      	asrs	r6, r6, #2
 800103e:	d006      	beq.n	800104e <__libc_init_array+0x1a>
 8001040:	2400      	movs	r4, #0
 8001042:	f855 3b04 	ldr.w	r3, [r5], #4
 8001046:	3401      	adds	r4, #1
 8001048:	4798      	blx	r3
 800104a:	42a6      	cmp	r6, r4
 800104c:	d1f9      	bne.n	8001042 <__libc_init_array+0xe>
 800104e:	4e09      	ldr	r6, [pc, #36]	; (8001074 <__libc_init_array+0x40>)
 8001050:	4d09      	ldr	r5, [pc, #36]	; (8001078 <__libc_init_array+0x44>)
 8001052:	1b76      	subs	r6, r6, r5
 8001054:	f7ff ffe0 	bl	8001018 <_init>
 8001058:	10b6      	asrs	r6, r6, #2
 800105a:	d006      	beq.n	800106a <__libc_init_array+0x36>
 800105c:	2400      	movs	r4, #0
 800105e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001062:	3401      	adds	r4, #1
 8001064:	4798      	blx	r3
 8001066:	42a6      	cmp	r6, r4
 8001068:	d1f9      	bne.n	800105e <__libc_init_array+0x2a>
 800106a:	bd70      	pop	{r4, r5, r6, pc}
 800106c:	20000430 	.word	0x20000430
 8001070:	20000430 	.word	0x20000430
 8001074:	20000430 	.word	0x20000430
 8001078:	20000430 	.word	0x20000430

0800107c <out_config>:
 800107c:	00000080 00010000 00000000              ............

08001088 <in_config>:
 8001088:	00000000 00010000 00000000 61632069     ............i ca
 8001098:	6f6d206e 00657372                       n morse.

080010a0 <_global_impure_ptr>:
 80010a0:	20000008                                ... 
